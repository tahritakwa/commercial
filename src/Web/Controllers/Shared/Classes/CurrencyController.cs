using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Services.Specific.Administration.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using Utils.Utilities.DataUtilities;
using Utils.Utilities.PredicateUtilities;
using ViewModels.DTO.Administration;
using Web.Controllers.GenericController;

namespace Web.Controllers.Shared.Classes
{
    [Route("api/currency")]
    public class CurrencyController : BaseController
    {
        private readonly IServiceCurrency _serviceCurrency;
        public CurrencyController(IServiceCurrency serviceCurrency, IServiceProvider serviceProvider, ILogger<CurrencyController> logger) : base(serviceProvider, logger)
        {
            _logger = logger;
            _serviceProvider = serviceProvider;
            _serviceCurrency = serviceCurrency;
        }

        [HttpGet("getById/{id}"), Authorize("UPDATE_BANKACCOUNT,LIST_TIERS,ADD_ITEM,DETAILS_ITEM,UPDATE_ITEM,ADD_INVENTORY_MOVEMENT,RESEARCH_HISTORY,LIST_QUOTATION_SALES,LIST_ORDER_SALES,LIST_DELIVERY_SALES,LIST_INVOICE_SALES,LIST_ASSET_SALES," +
            "LIST_INVOICE_ASSET_SALES,LIST_FINANCIAL_ASSET_SALES,LIST_QUICK_SALES,ADD_PRICES,UPDATE_PRICES,ADD_CUSTOMER,SHOW_CUSTOMER,ADD_SUPPLIER,UPDATE_SUPPLIER,UPDATE_PRICEREQUEST,LIST_ORDER_QUOTATION_PURCHASE," +
            "LIST_FINAL_ORDER_PURCHASE,LIST_RECEIPT_PURCHASE,LIST_INVOICE_PURCHASE,LIST_ASSET_PURCHASE,ADD_EXPENSE,UPDATE_EXPENSE,ADD_ADMISSION_VOUCHERS,ADD_EXIT_VOUCHERS,UPDATE_ADMISSION_VOUCHERS,UPDATE_EXIT_VOUCHERS," +
            "SHOW_ADMISSION_VOUCHERS,SHOW_EXIT_VOUCHERS,ADD_EXPENSEREPORT,UPDATE_EXPENSEREPORT,UPDATE_COMPANY,ADD_CUSTOMER_SETTLEMENT,ADD_SUPPLIER_SETTLEMENT,VIEW_ORGANISATION_LEAD,VIEW_ORGANISATION_CLIENT,ADD_ORGANISATION," +
            "EDIT_ORGANISATION,OWN_ORGANISATION,VIEW_OPPORTUNITY,VIEW_HISTORY_OPPORTUNITY,ADD_TIERS,ADD_SHARED_CONTACT,ADD_PRICES,VIEW_DEVISE,ADD_DEVISE,EDIT_OPPORTUNITY,OWN_OPPORTUNITY,VIEW_CONTACT_LEAD,VIEW_CONTACT_CLIENT," +
            "VIEW_HISTORY_CONTACT,ADD_CONTACT,EDIT_CONTACT,OWN_CONTACT,ADD_SUPPLIER_SETTLEMENT,ADD_BANKACCOUNT,SHOW_DELIVERY_SALES,LIST_CUSTOMER,UPDATE_CUSTOMER,ADD_DELIVERY_SALES,UPDATE_DELIVERY_SALES," +
            "SHOW_ORDER_QUOTATION_PURCHASE,UPDATE_ORDER_QUOTATION_PURCHASE,ADD_ORDER_QUOTATION_PURCHASE,UPDATE_COMPANY,SHOW_COMPANY,SHOW_FINAL_ORDER_PURCHASE,UPDATE_FINAL_ORDER_PURCHASE,ADD_FINAL_ORDER_PURCHASE," +
            "UPDATE_INVOICE_PURCHASE,ADD_INVOICE_PURCHASE,SHOW_INVOICE_PURCHASE,SHOW_RECEIPT_PURCHASE,UPDATE_RECEIPT_PURCHASE,ADD_ASSET_PURCHASE,UPDATE_ASSET_PURCHASE,SHOW_ASSET_PURCHASE,ADD_QUOTATION_SALES,SHOW_QUOTATION_SALES," +
            "UPDATE_QUOTATION_SALES,ADD_RECEIPT_PURCHASE,SHOW_FINANCIAL_ASSET_SALES,ADD_FINANCIAL_ASSET_SALES,UPDATE_FINANCIAL_ASSET_SALES,SHOW_INVOICE_ASSET_SALES,ADD_INVOICE_ASSET_SALES,UPDATE_INVOICE_ASSET_SALES," +
            "UPDATE_ORDER_SALES,ADD_ORDER_SALES,SHOW_ORDER_SALES,UPDATE_VALID_ORDER_SALES,SHOW_ASSET_SALES,UPDATE_ASSET_SALES,ADD_ASSET_SALES,UPDATE_VALID_ASSET_SALES,SHOW_INVOICE_SALES,UPDATE_INVOICE_SALES,ADD_INVOICE_SALES," +
            "UPDATE_VALID_DELIVERY_SALES,LIST_SUPPLIER,LIST_CUSTOMER,SHOW_SUPPLIER,ADD_CURRENCY,UPDATE_CURRENCY,SHOW_PRICES,ADD_SERVICES_CONTRACT,SHOW_SERVICES_CONTRACT,UPDATE_SERVICES_CONTRACT,COUNTER_SALES")]
        public override ResponseData GetById(int id)
        {
            return base.GetById(id);
        }

        [HttpPost("getDataDropdownWithPredicate"), Authorize("UPDATE_BANKACCOUNT,SHOW_ADMISSION_VOUCHERS,SHOW_EXIT_VOUCHERS,ADD_ADMISSION_VOUCHERS,ADD_EXIT_VOUCHERS,UPDATE_ADMISSION_VOUCHERS,UPDATE_EXIT_VOUCHERS,ADD_CUSTOMER," +
            "SHOW_CUSTOMER,ADD_SUPPLIER,UPDATE_SUPPLIER,ADD_PRICEREQUEST,UPDATE_PRICEREQUEST,ADD_PRICES,UPDATE_PRICES,ADD_EXPENSEREPORT,UPDATE_EXPENSEREPORT,ADD_RECEIPT_PURCHASE,UPDATE_RECEIPT_PURCHASE,ADD_EXPENSE," +
            "UPDATE_EXPENSE,UPDATE_COMPANY,ADD_CUSTOMER_SETTLEMENT,ADD_SUPPLIER_SETTLEMENT,ADD_BANKACCOUNT,LIST_CUSTOMER,UPDATE_CUSTOMER,SHOW_COMPANY,UPDATE_COMPANY,COMPANY,LIST_SUPPLIER,LIST_CUSTOMER,SHOW_SUPPLIER,SHOW_PRICES," +
            "ADD_SERVICES_CONTRACT,SHOW_SERVICES_CONTRACT,UPDATE_SERVICES_CONTRACT,VIEW_ORGANISATION_LEAD,VIEW_ORGANISATION_CLIENT,VIEW_ARCHIVED_ORGANISATION,EDIT_ORGANISATION,ADD_ORGANISATION,ADD_TIERS")]
        public override ResponseData GetDataDropdownWithPredicate([FromBody] PredicateFormatViewModel model)
        {
            return base.GetDataDropdownWithPredicate(model);
        }
        [HttpPost("getPictures"), Authorize("ADD_CURRENCY,UPDATE_CURRENCY,SHOW_CURRENCY")]
        public override ResponseData getPictures([FromBody] List<string> paths)
        {
            return base.getPictures(paths);
        }
        [HttpPost("getDataSourcePredicate"), Authorize("LIST_CURRENCY")]
        public override ResponseData GetDataSourcePredicate([FromBody] PredicateFormatViewModel model)
        {
            return base.GetDataSourcePredicate(model);
        }

        [HttpPost("getCurrenciesByIds"), Authorize("ADD_BILLING_SESSION,UPDATE_BILLING_SESSION,SHOW_BILLING_SESSION")]
        public List<CurrencyViewModel> GetCurrencies([FromBody] List<int> ids)
        {
            return _serviceCurrency.FindByAsNoTracking(x => ids.Contains(x.Id)).ToList();
        }
    }

}
