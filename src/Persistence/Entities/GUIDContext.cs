// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Persistence.Context;

#nullable disable

namespace Persistence.Entities
{
    public partial class GUIDContext : BaseContext
    {
        public GUIDContext()
        {
        }

        public GUIDContext(DbContextOptions<StarkContextFactory> options)
            : base(options)
        {
        }

        public virtual DbSet<Active> Active { get; set; }
        public virtual DbSet<AdditionalHour> AdditionalHour { get; set; }
        public virtual DbSet<AdditionalHourSlot> AdditionalHourSlot { get; set; }
        public virtual DbSet<Address> Address { get; set; }
        public virtual DbSet<Advantages> Advantages { get; set; }
        public virtual DbSet<Attendance> Attendance { get; set; }
        public virtual DbSet<Axis> Axis { get; set; }
        public virtual DbSet<AxisEntity> AxisEntity { get; set; }
        public virtual DbSet<AxisRelationShip> AxisRelationShip { get; set; }
        public virtual DbSet<AxisValue> AxisValue { get; set; }
        public virtual DbSet<AxisValueRelationShip> AxisValueRelationShip { get; set; }
        public virtual DbSet<Bank> Bank { get; set; }
        public virtual DbSet<BankAccount> BankAccount { get; set; }
        public virtual DbSet<BankAgency> BankAgency { get; set; }
        public virtual DbSet<BaseSalary> BaseSalary { get; set; }
        public virtual DbSet<BenefitInKind> BenefitInKind { get; set; }
        public virtual DbSet<BillingEmployee> BillingEmployee { get; set; }
        public virtual DbSet<BillingSession> BillingSession { get; set; }
        public virtual DbSet<Bonus> Bonus { get; set; }
        public virtual DbSet<BonusValidityPeriod> BonusValidityPeriod { get; set; }
        public virtual DbSet<Candidacy> Candidacy { get; set; }
        public virtual DbSet<Candidate> Candidate { get; set; }
        public virtual DbSet<CashRegister> CashRegister { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<City> City { get; set; }
        public virtual DbSet<Civility> Civility { get; set; }
        public virtual DbSet<Claim> Claim { get; set; }
        public virtual DbSet<ClaimInteraction> ClaimInteraction { get; set; }
        public virtual DbSet<ClaimStatus> ClaimStatus { get; set; }
        public virtual DbSet<ClaimType> ClaimType { get; set; }
        public virtual DbSet<ClaimTypeRelation> ClaimTypeRelation { get; set; }
        public virtual DbSet<ClientDetails> ClientDetails { get; set; }
        public virtual DbSet<Cnss> Cnss { get; set; }
        public virtual DbSet<CnssDeclaration> CnssDeclaration { get; set; }
        public virtual DbSet<CnssDeclarationDetails> CnssDeclarationDetails { get; set; }
        public virtual DbSet<CnssDeclarationSession> CnssDeclarationSession { get; set; }
        public virtual DbSet<Codification> Codification { get; set; }
        public virtual DbSet<Comment> Comment { get; set; }
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<ConstantRate> ConstantRate { get; set; }
        public virtual DbSet<ConstantRateValidityPeriod> ConstantRateValidityPeriod { get; set; }
        public virtual DbSet<ConstantValue> ConstantValue { get; set; }
        public virtual DbSet<ConstantValueValidityPeriod> ConstantValueValidityPeriod { get; set; }
        public virtual DbSet<Contact> Contact { get; set; }
        public virtual DbSet<ContactTypeDocument> ContactTypeDocument { get; set; }
        public virtual DbSet<Contract> Contract { get; set; }
        public virtual DbSet<ContractAdvantage> ContractAdvantage { get; set; }
        public virtual DbSet<ContractBenefitInKind> ContractBenefitInKind { get; set; }
        public virtual DbSet<ContractBonus> ContractBonus { get; set; }
        public virtual DbSet<ContractType> ContractType { get; set; }
        public virtual DbSet<ContributionRegister> ContributionRegister { get; set; }
        public virtual DbSet<Counter> Counter { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<CriteriaMark> CriteriaMark { get; set; }
        public virtual DbSet<Currency> Currency { get; set; }
        public virtual DbSet<CurrencyRate> CurrencyRate { get; set; }
        public virtual DbSet<CurriculumVitae> CurriculumVitae { get; set; }
        public virtual DbSet<DateToRemember> DateToRemember { get; set; }
        public virtual DbSet<DayOff> DayOff { get; set; }
        public virtual DbSet<Delivery> Delivery { get; set; }
        public virtual DbSet<DeliveryType> DeliveryType { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<DetailReconciliation> DetailReconciliation { get; set; }
        public virtual DbSet<DetailTimetable> DetailTimetable { get; set; }
        public virtual DbSet<DetailsSettlementMode> DetailsSettlementMode { get; set; }
        public virtual DbSet<DimCurrency> DimCurrency { get; set; }
        public virtual DbSet<DimItem> DimItem { get; set; }
        public virtual DbSet<DimTiers> DimTiers { get; set; }
        public virtual DbSet<DimWarehouse> DimWarehouse { get; set; }
        public virtual DbSet<Discussion> Discussion { get; set; }
        public virtual DbSet<Document> Document { get; set; }
        public virtual DbSet<DocumentExpenseLine> DocumentExpenseLine { get; set; }
        public virtual DbSet<DocumentLine> DocumentLine { get; set; }
        public virtual DbSet<DocumentLineNegotiationOptions> DocumentLineNegotiationOptions { get; set; }
        public virtual DbSet<DocumentLinePrices> DocumentLinePrices { get; set; }
        public virtual DbSet<DocumentLineTaxe> DocumentLineTaxe { get; set; }
        public virtual DbSet<DocumentRequest> DocumentRequest { get; set; }
        public virtual DbSet<DocumentRequestEmail> DocumentRequestEmail { get; set; }
        public virtual DbSet<DocumentRequestType> DocumentRequestType { get; set; }
        public virtual DbSet<DocumentStatus> DocumentStatus { get; set; }
        public virtual DbSet<DocumentTaxsResume> DocumentTaxsResume { get; set; }
        public virtual DbSet<DocumentType> DocumentType { get; set; }
        public virtual DbSet<DocumentTypeRelation> DocumentTypeRelation { get; set; }
        public virtual DbSet<DocumentWithholdingTax> DocumentWithholdingTax { get; set; }
        public virtual DbSet<Email> Email { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<EmployeeDocument> EmployeeDocument { get; set; }
        public virtual DbSet<EmployeeProject> EmployeeProject { get; set; }
        public virtual DbSet<EmployeeSkills> EmployeeSkills { get; set; }
        public virtual DbSet<EmployeeTeam> EmployeeTeam { get; set; }
        public virtual DbSet<EmployeeTrainingSession> EmployeeTrainingSession { get; set; }
        public virtual DbSet<Entity> Entity { get; set; }
        public virtual DbSet<EntityAxisValues> EntityAxisValues { get; set; }
        public virtual DbSet<EntityCodification> EntityCodification { get; set; }
        public virtual DbSet<EvaluationCriteria> EvaluationCriteria { get; set; }
        public virtual DbSet<EvaluationCriteriaTheme> EvaluationCriteriaTheme { get; set; }
        public virtual DbSet<ExitAction> ExitAction { get; set; }
        public virtual DbSet<ExitActionEmployee> ExitActionEmployee { get; set; }
        public virtual DbSet<ExitEmailForEmployee> ExitEmailForEmployee { get; set; }
        public virtual DbSet<ExitEmployee> ExitEmployee { get; set; }
        public virtual DbSet<ExitEmployeeLeaveLine> ExitEmployeeLeaveLine { get; set; }
        public virtual DbSet<ExitEmployeePayLine> ExitEmployeePayLine { get; set; }
        public virtual DbSet<ExitEmployeePayLineSalaryRule> ExitEmployeePayLineSalaryRule { get; set; }
        public virtual DbSet<ExitReason> ExitReason { get; set; }
        public virtual DbSet<Expense> Expense { get; set; }
        public virtual DbSet<ExpenseReport> ExpenseReport { get; set; }
        public virtual DbSet<ExpenseReportDetails> ExpenseReportDetails { get; set; }
        public virtual DbSet<ExpenseReportDetailsType> ExpenseReportDetailsType { get; set; }
        public virtual DbSet<ExpenseReportEmail> ExpenseReportEmail { get; set; }
        public virtual DbSet<ExternalTrainer> ExternalTrainer { get; set; }
        public virtual DbSet<ExternalTrainerSkills> ExternalTrainerSkills { get; set; }
        public virtual DbSet<ExternalTraining> ExternalTraining { get; set; }
        public virtual DbSet<Family> Family { get; set; }
        public virtual DbSet<FileDrive> FileDrive { get; set; }
        public virtual DbSet<FileDriveSharedDocument> FileDriveSharedDocument { get; set; }
        public virtual DbSet<FinancialCommitment> FinancialCommitment { get; set; }
        public virtual DbSet<Formation> Formation { get; set; }
        public virtual DbSet<FormationType> FormationType { get; set; }
        public virtual DbSet<Functionality> Functionality { get; set; }
        public virtual DbSet<FundsTransfer> FundsTransfer { get; set; }
        public virtual DbSet<GeneralSettings> GeneralSettings { get; set; }
        public virtual DbSet<Grade> Grade { get; set; }
        public virtual DbSet<History> History { get; set; }
        public virtual DbSet<Hours> Hours { get; set; }
        public virtual DbSet<Information> Information { get; set; }
        public virtual DbSet<Interview> Interview { get; set; }
        public virtual DbSet<InterviewEmail> InterviewEmail { get; set; }
        public virtual DbSet<InterviewMark> InterviewMark { get; set; }
        public virtual DbSet<InterviewQuestion> InterviewQuestion { get; set; }
        public virtual DbSet<InterviewQuestionTheme> InterviewQuestionTheme { get; set; }
        public virtual DbSet<InterviewType> InterviewType { get; set; }
        public virtual DbSet<Item> Item { get; set; }
        public virtual DbSet<ItemKit> ItemKit { get; set; }
        public virtual DbSet<ItemPrices> ItemPrices { get; set; }
        public virtual DbSet<ItemSalesPrice> ItemSalesPrice { get; set; }
        public virtual DbSet<ItemTiers> ItemTiers { get; set; }
        public virtual DbSet<ItemVehicleBrandModelSubModel> ItemVehicleBrandModelSubModel { get; set; }
        public virtual DbSet<ItemWarehouse> ItemWarehouse { get; set; }
        public virtual DbSet<Job> Job { get; set; }
        public virtual DbSet<JobEmployee> JobEmployee { get; set; }
        public virtual DbSet<JobSkills> JobSkills { get; set; }
        public virtual DbSet<JobTable> JobTable { get; set; }
        public virtual DbSet<JobsParameter> JobsParameter { get; set; }
        public virtual DbSet<Language> Language { get; set; }
        public virtual DbSet<Leave> Leave { get; set; }
        public virtual DbSet<LeaveBalanceRemaining> LeaveBalanceRemaining { get; set; }
        public virtual DbSet<LeaveEmail> LeaveEmail { get; set; }
        public virtual DbSet<LeaveType> LeaveType { get; set; }
        public virtual DbSet<Loan> Loan { get; set; }
        public virtual DbSet<LoanInstallment> LoanInstallment { get; set; }
        public virtual DbSet<Log> Log { get; set; }
        public virtual DbSet<Logs> Logs { get; set; }
        public virtual DbSet<MeasureUnit> MeasureUnit { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<MessageChat> MessageChat { get; set; }
        public virtual DbSet<MobilityRequest> MobilityRequest { get; set; }
        public virtual DbSet<ModelOfItem> ModelOfItem { get; set; }
        public virtual DbSet<MovementHistory> MovementHistory { get; set; }
        public virtual DbSet<MsgNotification> MsgNotification { get; set; }
        public virtual DbSet<Nature> Nature { get; set; }
        public virtual DbSet<NewUserEmail> NewUserEmail { get; set; }
        public virtual DbSet<Note> Note { get; set; }
        public virtual DbSet<Notification> Notification { get; set; }
        public virtual DbSet<OauthAccessToken> OauthAccessToken { get; set; }
        public virtual DbSet<OauthClientDetails> OauthClientDetails { get; set; }
        public virtual DbSet<OauthClientToken> OauthClientToken { get; set; }
        public virtual DbSet<Objective> Objective { get; set; }
        public virtual DbSet<Oem> Oem { get; set; }
        public virtual DbSet<OemItem> OemItem { get; set; }
        public virtual DbSet<Offer> Offer { get; set; }
        public virtual DbSet<OfferBenefitInKind> OfferBenefitInKind { get; set; }
        public virtual DbSet<OfferBonus> OfferBonus { get; set; }
        public virtual DbSet<Office> Office { get; set; }
        public virtual DbSet<OperationCash> OperationCash { get; set; }
        public virtual DbSet<OperationType> OperationType { get; set; }
        public virtual DbSet<ParentInCharge> ParentInCharge { get; set; }
        public virtual DbSet<ParentType> ParentType { get; set; }
        public virtual DbSet<PaymentCondition> PaymentCondition { get; set; }
        public virtual DbSet<PaymentDirection> PaymentDirection { get; set; }
        public virtual DbSet<PaymentMethod> PaymentMethod { get; set; }
        public virtual DbSet<PaymentSlip> PaymentSlip { get; set; }
        public virtual DbSet<PaymentStatus> PaymentStatus { get; set; }
        public virtual DbSet<PaymentType> PaymentType { get; set; }
        public virtual DbSet<Payslip> Payslip { get; set; }
        public virtual DbSet<PayslipDetails> PayslipDetails { get; set; }
        public virtual DbSet<Period> Period { get; set; }
        public virtual DbSet<Phone> Phone { get; set; }
        public virtual DbSet<PriceDetail> PriceDetail { get; set; }
        public virtual DbSet<PriceRequest> PriceRequest { get; set; }
        public virtual DbSet<PriceRequestDetail> PriceRequestDetail { get; set; }
        public virtual DbSet<Prices> Prices { get; set; }
        public virtual DbSet<Privilege> Privilege { get; set; }
        public virtual DbSet<ProductItem> ProductItem { get; set; }
        public virtual DbSet<Project> Project { get; set; }
        public virtual DbSet<Provisioning> Provisioning { get; set; }
        public virtual DbSet<ProvisioningDetails> ProvisioningDetails { get; set; }
        public virtual DbSet<ProvisioningOption> ProvisioningOption { get; set; }
        public virtual DbSet<PurchaseSettings> PurchaseSettings { get; set; }
        public virtual DbSet<Qualification> Qualification { get; set; }
        public virtual DbSet<QualificationType> QualificationType { get; set; }
        public virtual DbSet<Question> Question { get; set; }
        public virtual DbSet<ReceiptSpent> ReceiptSpent { get; set; }
        public virtual DbSet<Reconciliation> Reconciliation { get; set; }
        public virtual DbSet<Recruitment> Recruitment { get; set; }
        public virtual DbSet<RecruitmentLanguage> RecruitmentLanguage { get; set; }
        public virtual DbSet<RecruitmentSkills> RecruitmentSkills { get; set; }
        public virtual DbSet<ReflectiveSettlement> ReflectiveSettlement { get; set; }
        public virtual DbSet<ReportTemplate> ReportTemplate { get; set; }
        public virtual DbSet<RequestType> RequestType { get; set; }
        public virtual DbSet<Review> Review { get; set; }
        public virtual DbSet<ReviewFormation> ReviewFormation { get; set; }
        public virtual DbSet<ReviewResume> ReviewResume { get; set; }
        public virtual DbSet<ReviewSkills> ReviewSkills { get; set; }
        public virtual DbSet<RuleUniqueReference> RuleUniqueReference { get; set; }
        public virtual DbSet<SalaryRule> SalaryRule { get; set; }
        public virtual DbSet<SalaryRuleValidityPeriod> SalaryRuleValidityPeriod { get; set; }
        public virtual DbSet<SalaryStructure> SalaryStructure { get; set; }
        public virtual DbSet<SalaryStructureValidityPeriod> SalaryStructureValidityPeriod { get; set; }
        public virtual DbSet<SalaryStructureValidityPeriodSalaryRule> SalaryStructureValidityPeriodSalaryRule { get; set; }
        public virtual DbSet<SaleSettings> SaleSettings { get; set; }
        public virtual DbSet<SalesInvoiceLog> SalesInvoiceLog { get; set; }
        public virtual DbSet<SalesPrice> SalesPrice { get; set; }
        public virtual DbSet<SearchItem> SearchItem { get; set; }
        public virtual DbSet<Session> Session { get; set; }
        public virtual DbSet<SessionBonus> SessionBonus { get; set; }
        public virtual DbSet<SessionCash> SessionCash { get; set; }
        public virtual DbSet<SessionContract> SessionContract { get; set; }
        public virtual DbSet<SessionLoanInstallment> SessionLoanInstallment { get; set; }
        public virtual DbSet<Settlement> Settlement { get; set; }
        public virtual DbSet<SettlementCommitment> SettlementCommitment { get; set; }
        public virtual DbSet<SettlementDocumentWithholdingTax> SettlementDocumentWithholdingTax { get; set; }
        public virtual DbSet<SettlementMode> SettlementMode { get; set; }
        public virtual DbSet<SettlementType> SettlementType { get; set; }
        public virtual DbSet<SharedDocument> SharedDocument { get; set; }
        public virtual DbSet<Shelf> Shelf { get; set; }
        public virtual DbSet<Skills> Skills { get; set; }
        public virtual DbSet<SkillsFamily> SkillsFamily { get; set; }
        public virtual DbSet<SourceDeduction> SourceDeduction { get; set; }
        public virtual DbSet<SourceDeductionSession> SourceDeductionSession { get; set; }
        public virtual DbSet<SourceDeductionSessionEmployee> SourceDeductionSessionEmployee { get; set; }
        public virtual DbSet<StockDocument> StockDocument { get; set; }
        public virtual DbSet<StockDocumentLine> StockDocumentLine { get; set; }
        public virtual DbSet<StockDocumentType> StockDocumentType { get; set; }
        public virtual DbSet<StockMovement> StockMovement { get; set; }
        public virtual DbSet<Storage> Storage { get; set; }
        public virtual DbSet<SubFamily> SubFamily { get; set; }
        public virtual DbSet<SubModel> SubModel { get; set; }
        public virtual DbSet<Taxe> Taxe { get; set; }
        public virtual DbSet<TaxeGroupTiers> TaxeGroupTiers { get; set; }
        public virtual DbSet<TaxeGroupTiersConfig> TaxeGroupTiersConfig { get; set; }
        public virtual DbSet<TaxeItem> TaxeItem { get; set; }
        public virtual DbSet<TaxeType> TaxeType { get; set; }
        public virtual DbSet<Team> Team { get; set; }
        public virtual DbSet<TeamType> TeamType { get; set; }
        public virtual DbSet<Ticket> Ticket { get; set; }
        public virtual DbSet<TicketPayment> TicketPayment { get; set; }
        public virtual DbSet<TierCategory> TierCategory { get; set; }
        public virtual DbSet<Tiers> Tiers { get; set; }
        public virtual DbSet<TiersPrices> TiersPrices { get; set; }
        public virtual DbSet<TiersProvisioning> TiersProvisioning { get; set; }
        public virtual DbSet<TimeSheet> TimeSheet { get; set; }
        public virtual DbSet<TimeSheetLine> TimeSheetLine { get; set; }
        public virtual DbSet<Timetable> Timetable { get; set; }
        public virtual DbSet<Training> Training { get; set; }
        public virtual DbSet<TrainingByEmployee> TrainingByEmployee { get; set; }
        public virtual DbSet<TrainingCenter> TrainingCenter { get; set; }
        public virtual DbSet<TrainingCenterManager> TrainingCenterManager { get; set; }
        public virtual DbSet<TrainingCenterRoom> TrainingCenterRoom { get; set; }
        public virtual DbSet<TrainingExpectedSkills> TrainingExpectedSkills { get; set; }
        public virtual DbSet<TrainingRequest> TrainingRequest { get; set; }
        public virtual DbSet<TrainingRequiredSkills> TrainingRequiredSkills { get; set; }
        public virtual DbSet<TrainingSeance> TrainingSeance { get; set; }
        public virtual DbSet<TrainingSession> TrainingSession { get; set; }
        public virtual DbSet<TransferOrder> TransferOrder { get; set; }
        public virtual DbSet<TransferOrderDetails> TransferOrderDetails { get; set; }
        public virtual DbSet<TransferOrderSession> TransferOrderSession { get; set; }
        public virtual DbSet<TriggerItemLog> TriggerItemLog { get; set; }
        public virtual DbSet<TypePrices> TypePrices { get; set; }
        public virtual DbSet<TypeTiers> TypeTiers { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserDiscussionChat> UserDiscussionChat { get; set; }
        public virtual DbSet<UserFileAccess> UserFileAccess { get; set; }
        public virtual DbSet<UserFileModification> UserFileModification { get; set; }
        public virtual DbSet<UserInfo> UserInfo { get; set; }
        public virtual DbSet<UserPrivilege> UserPrivilege { get; set; }
        public virtual DbSet<UserWarehouse> UserWarehouse { get; set; }
        public virtual DbSet<UsersBtob> UsersBtob { get; set; }
        public virtual DbSet<Variable> Variable { get; set; }
        public virtual DbSet<VariableValidityPeriod> VariableValidityPeriod { get; set; }
        public virtual DbSet<Vehicle> Vehicle { get; set; }
        public virtual DbSet<VehicleBrand> VehicleBrand { get; set; }
        public virtual DbSet<VehicleEnergy> VehicleEnergy { get; set; }
        public virtual DbSet<Warehouse> Warehouse { get; set; }
        public virtual DbSet<WithholdingTax> WithholdingTax { get; set; }
        public virtual DbSet<WithholdingTaxLine> WithholdingTaxLine { get; set; }
        public virtual DbSet<ZipCode> ZipCode { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "French_CI_AS");

            modelBuilder.Entity<Active>(entity =>
            {
                entity.ToTable("Active", "Immobilisation");

                entity.Property(e => e.AcquisationDate).HasColumnType("date");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(50)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.HostName).HasMaxLength(500);

                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(500)
                    .HasColumnName("IPAddress");

                entity.Property(e => e.Label).HasMaxLength(50);

                entity.Property(e => e.Macaddress)
                    .HasMaxLength(500)
                    .HasColumnName("MACAddress");

                entity.Property(e => e.NumSerie).HasMaxLength(50);

                entity.Property(e => e.PhoneNumber).HasMaxLength(500);

                entity.Property(e => e.ServiceDate).HasColumnType("date");

                entity.HasOne(d => d.IdCategoryNavigation)
                    .WithMany(p => p.Active)
                    .HasForeignKey(d => d.IdCategory)
                    .HasConstraintName("FK_Active_Category1");

                entity.HasOne(d => d.IdDocumentLineNavigation)
                    .WithMany(p => p.Active)
                    .HasForeignKey(d => d.IdDocumentLine)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Active_DocumentLine1");

                entity.HasOne(d => d.IdWarehouseNavigation)
                    .WithMany(p => p.Active)
                    .HasForeignKey(d => d.IdWarehouse)
                    .HasConstraintName("FK_Active_Warehouse");
            });

            modelBuilder.Entity<AdditionalHour>(entity =>
            {
                entity.ToTable("AdditionalHour", "Payroll");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<AdditionalHourSlot>(entity =>
            {
                entity.ToTable("AdditionalHourSlot", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdAdditionalHourNavigation)
                    .WithMany(p => p.AdditionalHourSlot)
                    .HasForeignKey(d => d.IdAdditionalHour)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AdditionalHourSlot_AdditionalHour");
            });

            modelBuilder.Entity<Address>(entity =>
            {
                entity.ToTable("Address", "Shared");

                entity.Property(e => e.DeletedToken).HasMaxLength(255);

                entity.Property(e => e.ExtraAdress).HasMaxLength(255);

                entity.Property(e => e.Label).HasMaxLength(50);

                entity.Property(e => e.PrincipalAddress).HasMaxLength(255);

                entity.Property(e => e.ZipCode).HasMaxLength(255);

                entity.HasOne(d => d.IdCityNavigation)
                    .WithMany(p => p.Address)
                    .HasForeignKey(d => d.IdCity)
                    .HasConstraintName("FK_Address_City");

                entity.HasOne(d => d.IdCompanyNavigation)
                    .WithMany(p => p.Address)
                    .HasForeignKey(d => d.IdCompany)
                    .HasConstraintName("FK_Address_Company");

                entity.HasOne(d => d.IdCountryNavigation)
                    .WithMany(p => p.Address)
                    .HasForeignKey(d => d.IdCountry)
                    .HasConstraintName("FK_Country_Address");

                entity.HasOne(d => d.IdOfficeNavigation)
                    .WithMany(p => p.Address)
                    .HasForeignKey(d => d.IdOffice)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Address_Office");

                entity.HasOne(d => d.IdTiersNavigation)
                    .WithMany(p => p.Address)
                    .HasForeignKey(d => d.IdTiers)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Adress_Tiers");

                entity.HasOne(d => d.IdZipCodeNavigation)
                    .WithMany(p => p.Address)
                    .HasForeignKey(d => d.IdZipCode)
                    .HasConstraintName("FK_Address_ZipCode");
            });

            modelBuilder.Entity<Advantages>(entity =>
            {
                entity.ToTable("Advantages", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdOfferNavigation)
                    .WithMany(p => p.Advantages)
                    .HasForeignKey(d => d.IdOffer)
                    .HasConstraintName("FK_Advantages_Advantages");
            });

            modelBuilder.Entity<Attendance>(entity =>
            {
                entity.ToTable("Attendance", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.IdContractNavigation)
                    .WithMany(p => p.Attendance)
                    .HasForeignKey(d => d.IdContract)
                    .HasConstraintName("FK_Attendance_Contract");

                entity.HasOne(d => d.IdSessionNavigation)
                    .WithMany(p => p.Attendance)
                    .HasForeignKey(d => d.IdSession)
                    .HasConstraintName("FK_Attendance_Session");
            });

            modelBuilder.Entity<Axis>(entity =>
            {
                entity.ToTable("Axis", "Administration");

                entity.HasComment("Analytical axes table");

                entity.HasIndex(e => new { e.DeletedToken, e.Code }, "UniqueCodeAxis")
                    .IsUnique();

                entity.Property(e => e.Id).HasComment("Axis Identifier");

                entity.Property(e => e.Ar)
                    .HasMaxLength(255)
                    .HasColumnName("AR");

                entity.Property(e => e.Ch)
                    .HasMaxLength(255)
                    .HasColumnName("CH");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("Axis code");

                entity.Property(e => e.De)
                    .HasMaxLength(255)
                    .HasColumnName("DE");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.En)
                    .HasMaxLength(255)
                    .HasColumnName("EN");

                entity.Property(e => e.Es)
                    .HasMaxLength(255)
                    .HasColumnName("ES");

                entity.Property(e => e.Fr)
                    .HasMaxLength(255)
                    .HasColumnName("FR");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("Axis label");
            });

            modelBuilder.Entity<AxisEntity>(entity =>
            {
                entity.ToTable("AxisEntity", "Administration");

                entity.HasComment("This table defines which entity uses which axes");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.IdAxis).HasComment("Axis identifier");

                entity.Property(e => e.IdTableEntity).HasComment("Entity identifier");

                entity.HasOne(d => d.IdAxisNavigation)
                    .WithMany(p => p.AxisEntity)
                    .HasForeignKey(d => d.IdAxis)
                    .HasConstraintName("FK__AxisEntit__IdAxi__72C6D7A1");

                entity.HasOne(d => d.IdTableEntityNavigation)
                    .WithMany(p => p.AxisEntity)
                    .HasForeignKey(d => d.IdTableEntity)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AxisEntity_Entity");
            });

            modelBuilder.Entity<AxisRelationShip>(entity =>
            {
                entity.ToTable("AxisRelationShip", "Administration");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdAxisNavigation)
                    .WithMany(p => p.AxisRelationShipIdAxisNavigation)
                    .HasForeignKey(d => d.IdAxis)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_AxisRelationShip_Axis");

                entity.HasOne(d => d.IdAxisParentNavigation)
                    .WithMany(p => p.AxisRelationShipIdAxisParentNavigation)
                    .HasForeignKey(d => d.IdAxisParent)
                    .HasConstraintName("FK_AxisRelationShip_Axis1");
            });

            modelBuilder.Entity<AxisValue>(entity =>
            {
                entity.ToTable("AxisValue", "Administration");

                entity.HasComment("This table defines value of axis");

                entity.HasIndex(e => e.Code, "UQ__AxisValu__A25C5AA7EBA93297")
                    .IsUnique();

                entity.HasIndex(e => e.Label, "UQ__AxisValu__EDBE0C5872A60955")
                    .IsUnique();

                entity.HasIndex(e => new { e.DeletedToken, e.Code }, "UniqueCodeAxisValue")
                    .IsUnique();

                entity.Property(e => e.Id).HasComment("AxisValue identifier");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("AxisValue code");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.IdAxis).HasComment("Axis identifier");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("AxisValue label");

                entity.HasOne(d => d.IdAxisNavigation)
                    .WithMany(p => p.AxisValue)
                    .HasForeignKey(d => d.IdAxis)
                    .HasConstraintName("FK__AxisValue__IdAxi__675524F5");
            });

            modelBuilder.Entity<AxisValueRelationShip>(entity =>
            {
                entity.ToTable("AxisValueRelationShip", "Administration");

                entity.HasComment("This table defines relationship between axis values");

                entity.Property(e => e.Id).HasComment("AxisRelationShip identifier");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.IdAxisValue).HasComment("Axis value identifier");

                entity.Property(e => e.IdAxisValueParent).HasComment("Parent identifier");

                entity.HasOne(d => d.IdAxisValueNavigation)
                    .WithMany(p => p.AxisValueRelationShipIdAxisValueNavigation)
                    .HasForeignKey(d => d.IdAxisValue)
                    .HasConstraintName("FK__AxisRelat__IdAxi__6A3191A0");

                entity.HasOne(d => d.IdAxisValueParentNavigation)
                    .WithMany(p => p.AxisValueRelationShipIdAxisValueParentNavigation)
                    .HasForeignKey(d => d.IdAxisValueParent)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AxisValueRelationShip_AxisValue");
            });

            modelBuilder.Entity<Bank>(entity =>
            {
                entity.ToTable("Bank", "Shared");

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.AttachmentUrl).HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.WebSite).HasMaxLength(50);

                entity.HasOne(d => d.IdCountryNavigation)
                    .WithMany(p => p.Bank)
                    .HasForeignKey(d => d.IdCountry)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Bank_Country");

                entity.HasOne(d => d.IdPhoneNavigation)
                    .WithMany(p => p.Bank)
                    .HasForeignKey(d => d.IdPhone)
                    .HasConstraintName("FK_Bank_Phone");
            });

            modelBuilder.Entity<BankAccount>(entity =>
            {
                entity.ToTable("BankAccount", "Shared");

                entity.HasIndex(e => new { e.DeletedToken, e.Code }, "UniqueCodeBankAccount")
                    .IsUnique();

                entity.HasIndex(e => new { e.Iban, e.DeletedToken }, "UniqueIBANBankAccount")
                    .IsUnique();

                entity.HasIndex(e => new { e.Rib, e.DeletedToken }, "UniqueRIBBankAccount")
                    .IsUnique();

                entity.Property(e => e.Agency)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Bic)
                    .HasMaxLength(50)
                    .HasColumnName("BIC");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.Entitled).HasMaxLength(255);

                entity.Property(e => e.Fax).HasMaxLength(255);

                entity.Property(e => e.Iban)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("IBAN");

                entity.Property(e => e.Locality).HasMaxLength(250);

                entity.Property(e => e.Pic)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Rib)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Telephone).HasMaxLength(255);

                entity.Property(e => e.ZipCode).HasMaxLength(50);

                entity.HasOne(d => d.IdBankNavigation)
                    .WithMany(p => p.BankAccount)
                    .HasForeignKey(d => d.IdBank)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankAccount_Bank");

                entity.HasOne(d => d.IdCityNavigation)
                    .WithMany(p => p.BankAccount)
                    .HasForeignKey(d => d.IdCity)
                    .HasConstraintName("FK_BankAccount_City");

                entity.HasOne(d => d.IdCountryNavigation)
                    .WithMany(p => p.BankAccount)
                    .HasForeignKey(d => d.IdCountry)
                    .HasConstraintName("FK_BankAccount_Country");

                entity.HasOne(d => d.IdCurrencyNavigation)
                    .WithMany(p => p.BankAccount)
                    .HasForeignKey(d => d.IdCurrency)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankAccount_Currency");
            });

            modelBuilder.Entity<BankAgency>(entity =>
            {
                entity.ToTable("BankAgency", "Shared");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(50);

                entity.HasOne(d => d.IdBankNavigation)
                    .WithMany(p => p.BankAgency)
                    .HasForeignKey(d => d.IdBank)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_BankAgency_Bank");
            });

            modelBuilder.Entity<BaseSalary>(entity =>
            {
                entity.ToTable("BaseSalary", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.HasOne(d => d.IdContractNavigation)
                    .WithMany(p => p.BaseSalary)
                    .HasForeignKey(d => d.IdContract)
                    .HasConstraintName("FK_BaseSalary_Contract");
            });

            modelBuilder.Entity<BenefitInKind>(entity =>
            {
                entity.ToTable("BenefitInKind", "Payroll");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.IdCnssNavigation)
                    .WithMany(p => p.BenefitInKind)
                    .HasForeignKey(d => d.IdCnss)
                    .HasConstraintName("FK_BenefitInKind_Cnss");
            });

            modelBuilder.Entity<BillingEmployee>(entity =>
            {
                entity.ToTable("BillingEmployee", "Sales");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdBillingSessionNavigation)
                    .WithMany(p => p.BillingEmployee)
                    .HasForeignKey(d => d.IdBillingSession)
                    .HasConstraintName("FK_BillingEmployee_BillingSession");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.BillingEmployee)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BillingEmployee_Employee");

                entity.HasOne(d => d.IdProjectNavigation)
                    .WithMany(p => p.BillingEmployee)
                    .HasForeignKey(d => d.IdProject)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BillingEmployee_Project");

                entity.HasOne(d => d.IdTimeSheetNavigation)
                    .WithMany(p => p.BillingEmployee)
                    .HasForeignKey(d => d.IdTimeSheet)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BillingEmployee_TimeSheet");
            });

            modelBuilder.Entity<BillingSession>(entity =>
            {
                entity.ToTable("BillingSession", "Sales");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.CreationDate).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Month).HasColumnType("date");

                entity.Property(e => e.NumberOfNotGeneratedDocuments).HasDefaultValueSql("((0))");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(125);
            });

            modelBuilder.Entity<Bonus>(entity =>
            {
                entity.ToTable("Bonus", "Payroll");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.IdCnssNavigation)
                    .WithMany(p => p.Bonus)
                    .HasForeignKey(d => d.IdCnss)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Bonus_Cnss");
            });

            modelBuilder.Entity<BonusValidityPeriod>(entity =>
            {
                entity.ToTable("BonusValidityPeriod", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.HasOne(d => d.IdBonusNavigation)
                    .WithMany(p => p.BonusValidityPeriod)
                    .HasForeignKey(d => d.IdBonus)
                    .HasConstraintName("FK_ContractBonusValidityPeriod_Bonus");
            });

            modelBuilder.Entity<Candidacy>(entity =>
            {
                entity.ToTable("Candidacy", "RH");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.DepositDate).HasColumnType("datetime");

                entity.HasOne(d => d.IdCandidateNavigation)
                    .WithMany(p => p.Candidacy)
                    .HasForeignKey(d => d.IdCandidate)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Candidacy_Candidate");

                entity.HasOne(d => d.IdEmailNavigation)
                    .WithMany(p => p.Candidacy)
                    .HasForeignKey(d => d.IdEmail)
                    .HasConstraintName("FK_Candidacy_Email");

                entity.HasOne(d => d.IdRecruitmentNavigation)
                    .WithMany(p => p.Candidacy)
                    .HasForeignKey(d => d.IdRecruitment)
                    .HasConstraintName("FK_Candidacy_Recruitment");
            });

            modelBuilder.Entity<Candidate>(entity =>
            {
                entity.ToTable("Candidate", "RH");

                entity.HasIndex(e => new { e.Email, e.DeletedToken }, "UniqueKeyEmail")
                    .IsUnique();

                entity.Property(e => e.AddressLine1).HasMaxLength(255);

                entity.Property(e => e.AddressLine2).HasMaxLength(255);

                entity.Property(e => e.AddressLine3).HasMaxLength(255);

                entity.Property(e => e.AddressLine4).HasMaxLength(255);

                entity.Property(e => e.AddressLine5).HasMaxLength(255);

                entity.Property(e => e.BirthDate).HasColumnType("date");

                entity.Property(e => e.Cin)
                    .HasMaxLength(50)
                    .HasColumnName("CIN");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreationDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Facebook).HasMaxLength(255);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FullName).HasMaxLength(100);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PersonalPhone).HasMaxLength(50);

                entity.Property(e => e.ProfessionalPhone).HasMaxLength(50);

                entity.HasOne(d => d.IdCitizenshipNavigation)
                    .WithMany(p => p.Candidate)
                    .HasForeignKey(d => d.IdCitizenship)
                    .HasConstraintName("FK_Candidate_Country");

                entity.HasOne(d => d.IdCreationUserNavigation)
                    .WithMany(p => p.Candidate)
                    .HasForeignKey(d => d.IdCreationUser)
                    .HasConstraintName("FK_Candidate_User");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.Candidate)
                    .HasForeignKey(d => d.IdEmployee)
                    .HasConstraintName("FK_Candidate_Employee");
            });

            modelBuilder.Entity<CashRegister>(entity =>
            {
                entity.ToTable("CashRegister", "Payment");

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.AgentCode)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.IdCityNavigation)
                    .WithMany(p => p.CashRegister)
                    .HasForeignKey(d => d.IdCity)
                    .HasConstraintName("FK_CashRegister_City");

                entity.HasOne(d => d.IdCountryNavigation)
                    .WithMany(p => p.CashRegister)
                    .HasForeignKey(d => d.IdCountry)
                    .HasConstraintName("FK_CashRegister_Country");

                entity.HasOne(d => d.IdParentCashNavigation)
                    .WithMany(p => p.InverseIdParentCashNavigation)
                    .HasForeignKey(d => d.IdParentCash)
                    .HasConstraintName("FK_CashRegister_CashRegister");

                entity.HasOne(d => d.IdResponsibleNavigation)
                    .WithMany(p => p.CashRegister)
                    .HasForeignKey(d => d.IdResponsible)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CashRegister_User");

                entity.HasOne(d => d.IdWarehouseNavigation)
                    .WithMany(p => p.CashRegister)
                    .HasForeignKey(d => d.IdWarehouse)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CashRegister_Warehouse");
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.ToTable("Category", "Immobilisation");

                entity.HasIndex(e => new { e.DeletedToken, e.Code }, "UniqueCodeImmobilisationCategory")
                    .IsUnique();

                entity.HasIndex(e => new { e.DeletedToken, e.Label }, "UniqueLabelImmobilisationCategory")
                    .IsUnique();

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(50)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(50);
            });

            modelBuilder.Entity<City>(entity =>
            {
                entity.ToTable("City", "Shared");

                entity.HasIndex(e => new { e.DeletedToken, e.Code }, "UniqueCodeCity")
                    .IsUnique();

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(255);

                entity.HasOne(d => d.IdCountryNavigation)
                    .WithMany(p => p.City)
                    .HasForeignKey(d => d.IdCountry)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_City_Country");
            });

            modelBuilder.Entity<Civility>(entity =>
            {
                entity.ToTable("Civility", "Shared");

                entity.HasIndex(e => new { e.DeletedToken, e.CivilityCode }, "UniqueCodeCivility")
                    .IsUnique();

                entity.Property(e => e.CivilityBit1).HasColumnName("Civility_bit_1");

                entity.Property(e => e.CivilityBit10).HasColumnName("Civility_bit_10");

                entity.Property(e => e.CivilityBit2).HasColumnName("Civility_bit_2");

                entity.Property(e => e.CivilityBit3).HasColumnName("Civility_bit_3");

                entity.Property(e => e.CivilityBit4).HasColumnName("Civility_bit_4");

                entity.Property(e => e.CivilityBit5).HasColumnName("Civility_bit_5");

                entity.Property(e => e.CivilityBit6).HasColumnName("Civility_bit_6");

                entity.Property(e => e.CivilityBit7).HasColumnName("Civility_bit_7");

                entity.Property(e => e.CivilityBit8).HasColumnName("Civility_bit_8");

                entity.Property(e => e.CivilityBit9).HasColumnName("Civility_bit_9");

                entity.Property(e => e.CivilityCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CivilityDate1)
                    .HasColumnType("date")
                    .HasColumnName("Civility_date_1");

                entity.Property(e => e.CivilityDate10)
                    .HasColumnType("date")
                    .HasColumnName("Civility_date_10");

                entity.Property(e => e.CivilityDate2)
                    .HasColumnType("date")
                    .HasColumnName("Civility_date_2");

                entity.Property(e => e.CivilityDate3)
                    .HasColumnType("date")
                    .HasColumnName("Civility_date_3");

                entity.Property(e => e.CivilityDate4)
                    .HasColumnType("date")
                    .HasColumnName("Civility_date_4");

                entity.Property(e => e.CivilityDate5)
                    .HasColumnType("date")
                    .HasColumnName("Civility_date_5");

                entity.Property(e => e.CivilityDate6)
                    .HasColumnType("date")
                    .HasColumnName("Civility_date_6");

                entity.Property(e => e.CivilityDate7)
                    .HasColumnType("date")
                    .HasColumnName("Civility_date_7");

                entity.Property(e => e.CivilityDate8)
                    .HasColumnType("date")
                    .HasColumnName("Civility_date_8");

                entity.Property(e => e.CivilityDate9)
                    .HasColumnType("date")
                    .HasColumnName("Civility_date_9");

                entity.Property(e => e.CivilityFloat1).HasColumnName("Civility_float_1");

                entity.Property(e => e.CivilityFloat10).HasColumnName("Civility_float_10");

                entity.Property(e => e.CivilityFloat2).HasColumnName("Civility_float_2");

                entity.Property(e => e.CivilityFloat3).HasColumnName("Civility_float_3");

                entity.Property(e => e.CivilityFloat4).HasColumnName("Civility_float_4");

                entity.Property(e => e.CivilityFloat5).HasColumnName("Civility_float_5");

                entity.Property(e => e.CivilityFloat6).HasColumnName("Civility_float_6");

                entity.Property(e => e.CivilityFloat7).HasColumnName("Civility_float_7");

                entity.Property(e => e.CivilityFloat8).HasColumnName("Civility_float_8");

                entity.Property(e => e.CivilityFloat9).HasColumnName("Civility_float_9");

                entity.Property(e => e.CivilityInt1).HasColumnName("Civility_int_1");

                entity.Property(e => e.CivilityInt10).HasColumnName("Civility_int_10");

                entity.Property(e => e.CivilityInt2).HasColumnName("Civility_int_2");

                entity.Property(e => e.CivilityInt3).HasColumnName("Civility_int_3");

                entity.Property(e => e.CivilityInt4).HasColumnName("Civility_int_4");

                entity.Property(e => e.CivilityInt5).HasColumnName("Civility_int_5");

                entity.Property(e => e.CivilityInt6).HasColumnName("Civility_int_6");

                entity.Property(e => e.CivilityInt7).HasColumnName("Civility_int_7");

                entity.Property(e => e.CivilityInt8).HasColumnName("Civility_int_8");

                entity.Property(e => e.CivilityInt9).HasColumnName("Civility_int_9");

                entity.Property(e => e.CivilityVarchar1)
                    .IsUnicode(false)
                    .HasColumnName("Civility_varchar_1");

                entity.Property(e => e.CivilityVarchar10)
                    .IsUnicode(false)
                    .HasColumnName("Civility_varchar_10");

                entity.Property(e => e.CivilityVarchar2)
                    .IsUnicode(false)
                    .HasColumnName("Civility_varchar_2");

                entity.Property(e => e.CivilityVarchar3)
                    .IsUnicode(false)
                    .HasColumnName("Civility_varchar_3");

                entity.Property(e => e.CivilityVarchar4)
                    .IsUnicode(false)
                    .HasColumnName("Civility_varchar_4");

                entity.Property(e => e.CivilityVarchar5)
                    .IsUnicode(false)
                    .HasColumnName("Civility_varchar_5");

                entity.Property(e => e.CivilityVarchar6)
                    .IsUnicode(false)
                    .HasColumnName("Civility_varchar_6");

                entity.Property(e => e.CivilityVarchar7)
                    .IsUnicode(false)
                    .HasColumnName("Civility_varchar_7");

                entity.Property(e => e.CivilityVarchar8)
                    .IsUnicode(false)
                    .HasColumnName("Civility_varchar_8");

                entity.Property(e => e.CivilityVarchar9)
                    .IsUnicode(false)
                    .HasColumnName("Civility_varchar_9");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasColumnType("text");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Claim>(entity =>
            {
                entity.ToTable("Claim", "Helpdesk");

                entity.HasIndex(e => e.Code, "IX_Claim")
                    .IsUnique();

                entity.HasIndex(e => new { e.DeletedToken, e.Code }, "UniqueCodeClaim")
                    .IsUnique();

                entity.Property(e => e.ClaimType).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.Informations).HasMaxLength(255);

                entity.Property(e => e.Reference).HasMaxLength(255);

                entity.Property(e => e.ReferenceOldDocument).HasMaxLength(50);

                entity.Property(e => e.ValidationDate).HasColumnType("datetime");

                entity.HasOne(d => d.ClaimTypeNavigation)
                    .WithMany(p => p.Claim)
                    .HasForeignKey(d => d.ClaimType)
                    .HasConstraintName("FK_Claim_ClaimType");

                entity.HasOne(d => d.IdClaimStatusNavigation)
                    .WithMany(p => p.Claim)
                    .HasForeignKey(d => d.IdClaimStatus)
                    .HasConstraintName("FK_Claim_ClaimStatus");

                entity.HasOne(d => d.IdClientNavigation)
                    .WithMany(p => p.ClaimIdClientNavigation)
                    .HasForeignKey(d => d.IdClient)
                    .HasConstraintName("FK_Claim_Client");

                entity.HasOne(d => d.IdContactNavigation)
                    .WithMany(p => p.Claim)
                    .HasForeignKey(d => d.IdContact)
                    .HasConstraintName("FK_Claim_Contact");

                entity.HasOne(d => d.IdDeliveryDocumentNavigation)
                    .WithMany(p => p.ClaimIdDeliveryDocumentNavigation)
                    .HasForeignKey(d => d.IdDeliveryDocument)
                    .HasConstraintName("FK_Claim_DeliveryDocument");

                entity.HasOne(d => d.IdDocumentNavigation)
                    .WithMany(p => p.ClaimIdDocumentNavigation)
                    .HasForeignKey(d => d.IdDocument)
                    .HasConstraintName("FK_Claim_Document");

                entity.HasOne(d => d.IdDocumentLineNavigation)
                    .WithMany(p => p.Claim)
                    .HasForeignKey(d => d.IdDocumentLine)
                    .HasConstraintName("FK_Claim_DocumentLine");

                entity.HasOne(d => d.IdFournisseurNavigation)
                    .WithMany(p => p.ClaimIdFournisseurNavigation)
                    .HasForeignKey(d => d.IdFournisseur)
                    .HasConstraintName("FK_Claim_Fournisseur");

                entity.HasOne(d => d.IdItemNavigation)
                    .WithMany(p => p.Claim)
                    .HasForeignKey(d => d.IdItem)
                    .HasConstraintName("FK_Claim_Item");

                entity.HasOne(d => d.IdMovementInNavigation)
                    .WithMany(p => p.ClaimIdMovementInNavigation)
                    .HasForeignKey(d => d.IdMovementIn)
                    .HasConstraintName("FK_Claim_MovementIn");

                entity.HasOne(d => d.IdMovementOutNavigation)
                    .WithMany(p => p.ClaimIdMovementOutNavigation)
                    .HasForeignKey(d => d.IdMovementOut)
                    .HasConstraintName("FK_Claim_MovementOut");

                entity.HasOne(d => d.IdPurchaseAssetDocumentNavigation)
                    .WithMany(p => p.ClaimIdPurchaseAssetDocumentNavigation)
                    .HasForeignKey(d => d.IdPurchaseAssetDocument)
                    .HasConstraintName("FK_Claim_PurchaseAssetDocument");

                entity.HasOne(d => d.IdPurchaseDocumentNavigation)
                    .WithMany(p => p.ClaimIdPurchaseDocumentNavigation)
                    .HasForeignKey(d => d.IdPurchaseDocument)
                    .HasConstraintName("FK_Claim_PurchaseDocument");

                entity.HasOne(d => d.IdReceiptDocumentNavigation)
                    .WithMany(p => p.ClaimIdReceiptDocumentNavigation)
                    .HasForeignKey(d => d.IdReceiptDocument)
                    .HasConstraintName("FK_Claim_ReceiptDocument");

                entity.HasOne(d => d.IdSalesAssetDocumentNavigation)
                    .WithMany(p => p.ClaimIdSalesAssetDocumentNavigation)
                    .HasForeignKey(d => d.IdSalesAssetDocument)
                    .HasConstraintName("FK_Claim_SalesAssetDocument");

                entity.HasOne(d => d.IdSalesDocumentNavigation)
                    .WithMany(p => p.ClaimIdSalesDocumentNavigation)
                    .HasForeignKey(d => d.IdSalesDocument)
                    .HasConstraintName("FK_Claim_SalesDocument");

                entity.HasOne(d => d.IdWarehouseNavigation)
                    .WithMany(p => p.Claim)
                    .HasForeignKey(d => d.IdWarehouse)
                    .HasConstraintName("FK_Claim_Warehouse");
            });

            modelBuilder.Entity<ClaimInteraction>(entity =>
            {
                entity.ToTable("ClaimInteraction", "Helpdesk");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.TranslationCode).HasMaxLength(255);

                entity.Property(e => e.TypeInteraction).HasMaxLength(100);

                entity.HasOne(d => d.IdClaimNavigation)
                    .WithMany(p => p.ClaimInteraction)
                    .HasForeignKey(d => d.IdClaim)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimInteraction_Claim");
            });

            modelBuilder.Entity<ClaimStatus>(entity =>
            {
                entity.HasKey(e => e.IdStatus)
                    .HasName("PK_IDSTATUS");

                entity.ToTable("ClaimStatus", "Helpdesk");

                entity.HasIndex(e => new { e.DeletedToken, e.Code, e.CodeStatus, e.IdStatus }, "UniqueCodeClaimStatus")
                    .IsUnique();

                entity.Property(e => e.IdStatus).ValueGeneratedNever();

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.CodeStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Label).HasMaxLength(255);

                entity.Property(e => e.TranslationCode).HasMaxLength(255);
            });

            modelBuilder.Entity<ClaimType>(entity =>
            {
                entity.HasKey(e => e.CodeType);

                entity.ToTable("ClaimType", "Helpdesk");

                entity.Property(e => e.CodeType).HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.StockOperation).HasMaxLength(50);

                entity.Property(e => e.TranslationCode).HasMaxLength(255);

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<ClaimTypeRelation>(entity =>
            {
                entity.ToTable("ClaimTypeRelation", "Helpdesk");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CodeClaimType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CodeClaimTypeAssociated)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ClientDetails>(entity =>
            {
                entity.HasKey(e => e.AppId)
                    .HasName("PK__ClientDe__C00006D56B0C6DBE");

                entity.Property(e => e.AppId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("appId");

                entity.Property(e => e.AccessTokenValidity).HasColumnName("access_token_validity");

                entity.Property(e => e.AdditionalInformation)
                    .HasMaxLength(4096)
                    .IsUnicode(false)
                    .HasColumnName("additionalInformation");

                entity.Property(e => e.AppSecret)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("appSecret");

                entity.Property(e => e.Authorities)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("authorities");

                entity.Property(e => e.AutoApproveScopes)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("autoApproveScopes");

                entity.Property(e => e.GrantTypes)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("grantTypes");

                entity.Property(e => e.RedirectUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("redirectUrl");

                entity.Property(e => e.RefreshTokenValidity).HasColumnName("refresh_token_validity");

                entity.Property(e => e.ResourceIds)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("resourceIds");

                entity.Property(e => e.Scope)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("scope");
            });

            modelBuilder.Entity<Cnss>(entity =>
            {
                entity.ToTable("Cnss", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.OperatingCode)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<CnssDeclaration>(entity =>
            {
                entity.ToTable("CnssDeclaration", "Payroll");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.CreationDate).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.IdCnssNavigation)
                    .WithMany(p => p.CnssDeclaration)
                    .HasForeignKey(d => d.IdCnss)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CnssDeclaration_Cnss");
            });

            modelBuilder.Entity<CnssDeclarationDetails>(entity =>
            {
                entity.ToTable("CnssDeclarationDetails", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdCnssDeclarationNavigation)
                    .WithMany(p => p.CnssDeclarationDetails)
                    .HasForeignKey(d => d.IdCnssDeclaration)
                    .HasConstraintName("FK_CnssDeclarationDetails_CnssDeclaration");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.CnssDeclarationDetails)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CnssDelarationDetails_Employee");
            });

            modelBuilder.Entity<CnssDeclarationSession>(entity =>
            {
                entity.ToTable("CnssDeclarationSession", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdCnssDeclarationNavigation)
                    .WithMany(p => p.CnssDeclarationSession)
                    .HasForeignKey(d => d.IdCnssDeclaration)
                    .HasConstraintName("FK_CnssDeclarationSession_CnssDeclaration");

                entity.HasOne(d => d.IdSessionNavigation)
                    .WithMany(p => p.CnssDeclarationSession)
                    .HasForeignKey(d => d.IdSession)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CnssDeclarationSession_Session");
            });

            modelBuilder.Entity<Codification>(entity =>
            {
                entity.ToTable("Codification", "ERPSettings");

                entity.Property(e => e.Format).HasMaxLength(255);

                entity.Property(e => e.InitValue).HasMaxLength(255);

                entity.Property(e => e.IsCounter).HasDefaultValueSql("((0))");

                entity.Property(e => e.LastCounterValue).HasMaxLength(255);

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.Path).HasMaxLength(500);

                entity.HasOne(d => d.IdCodificationParentNavigation)
                    .WithMany(p => p.InverseIdCodificationParentNavigation)
                    .HasForeignKey(d => d.IdCodificationParent)
                    .HasConstraintName("FK_Codification_Codification");
            });

            modelBuilder.Entity<Comment>(entity =>
            {
                entity.ToTable("Comment", "ERPSettings");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.EmailCreator).HasMaxLength(255);

                entity.HasOne(d => d.IdEntityReferenceNavigation)
                    .WithMany(p => p.Comment)
                    .HasForeignKey(d => d.IdEntityReference)
                    .HasConstraintName("FK_Comment_Entity");
            });

            modelBuilder.Entity<Company>(entity =>
            {
                entity.ToTable("Company", "Shared");

                entity.HasIndex(e => new { e.DeletedToken, e.Code }, "UniqueCodeCompany")
                    .IsUnique();

                entity.HasIndex(e => new { e.DeletedToken, e.MatriculeFisc }, "UniqueMatriculeFiscCompany")
                    .IsUnique();

                entity.Property(e => e.ActivityArea).HasDefaultValueSql("((1))");

                entity.Property(e => e.ActivitySector).HasMaxLength(50);

                entity.Property(e => e.AllowEditionItemDesignation)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AllowRelationSupplierItems)
                    .IsRequired()
                    .HasDefaultValueSql("('false')");

                entity.Property(e => e.Category).HasMaxLength(255);

                entity.Property(e => e.CnssAffiliation).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CommercialRegister).HasMaxLength(255);

                entity.Property(e => e.Culture).HasMaxLength(50);

                entity.Property(e => e.DataLogoCompany).HasColumnType("image");

                entity.Property(e => e.DaysWorkedInTheWeek).HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.HeuRef).HasComment("Heures de références");

                entity.Property(e => e.IdAtrate).HasColumnName("IdATRate");

                entity.Property(e => e.IdNaf).HasColumnName("IdNAF");

                entity.Property(e => e.MatriculeFisc)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.Nic).HasColumnName("NIC");

                entity.Property(e => e.NoteIsRequired)
                    .IsRequired()
                    .HasDefaultValueSql("('false')");

                entity.Property(e => e.PaymentOffset)
                    .HasMaxLength(10)
                    .IsFixedLength(true)
                    .HasComment("Décalage de paye");

                entity.Property(e => e.Picture).HasColumnType("image");

                entity.Property(e => e.RegularisationMode)
                .HasMaxLength(250)
                .HasComment("Mode de régularisation");

                entity.Property(e => e.SecondaryEstablishment).HasMaxLength(255);

                entity.Property(e => e.Siret)
                    .HasMaxLength(255)
                    .HasColumnName("SIRET");

                entity.Property(e => e.TaxIdentNumber).HasMaxLength(255);

                entity.Property(e => e.Tel1).HasMaxLength(50);

                entity.Property(e => e.Tel2).HasMaxLength(50);

                entity.Property(e => e.TimeSheetPerHalfDay)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.VatNumber).HasMaxLength(50);

                entity.Property(e => e.WebSite).HasMaxLength(255);

                entity.Property(e => e.WithholdingTax)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdCurrencyNavigation)
                    .WithMany(p => p.Company)
                    .HasForeignKey(d => d.IdCurrency)
                    .HasConstraintName("FK_Company_Currency");

                entity.HasOne(d => d.IdDefaultTaxNavigation)
                    .WithMany(p => p.Company)
                    .HasForeignKey(d => d.IdDefaultTax)
                    .HasConstraintName("FK_Company_Taxe");
            });

            modelBuilder.Entity<ConstantRate>(entity =>
            {
                entity.ToTable("ConstantRate", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.HasOne(d => d.IdRuleUniqueReferenceNavigation)
                    .WithMany(p => p.ConstantRate)
                    .HasForeignKey(d => d.IdRuleUniqueReference)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConstantRate_RuleUniqueReference");
            });

            modelBuilder.Entity<ConstantRateValidityPeriod>(entity =>
            {
                entity.ToTable("ConstantRateValidityPeriod", "Payroll");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdConstantRateNavigation)
                    .WithMany(p => p.ConstantRateValidityPeriod)
                    .HasForeignKey(d => d.IdConstantRate)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConstantRate_ValidityPeriod");
            });

            modelBuilder.Entity<ConstantValue>(entity =>
            {
                entity.ToTable("ConstantValue", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.HasOne(d => d.IdRuleUniqueReferenceNavigation)
                    .WithMany(p => p.ConstantValue)
                    .HasForeignKey(d => d.IdRuleUniqueReference)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConstantValue_RuleUniqueReference");
            });

            modelBuilder.Entity<ConstantValueValidityPeriod>(entity =>
            {
                entity.ToTable("ConstantValueValidityPeriod", "Payroll");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdConstantValueNavigation)
                    .WithMany(p => p.ConstantValueValidityPeriod)
                    .HasForeignKey(d => d.IdConstantValue)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConstantValueValidityPeriod_ConstantValue");
            });

            modelBuilder.Entity<Contact>(entity =>
            {
                entity.ToTable("Contact", "Shared");

                entity.Property(e => e.AssistantName).HasMaxLength(255);

                entity.Property(e => e.AssistantPhone).HasMaxLength(255);

                entity.Property(e => e.Classification).HasMaxLength(255);

                entity.Property(e => e.ContactType).HasMaxLength(255);

                entity.Property(e => e.CreationDate).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.Facebook).HasMaxLength(255);

                entity.Property(e => e.Fax1).HasMaxLength(255);

                entity.Property(e => e.Fax2).HasMaxLength(255);

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.Fonction)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.HomePhone).HasMaxLength(255);

                entity.Property(e => e.Label).HasMaxLength(50);

                entity.Property(e => e.LastName).HasMaxLength(255);

                entity.Property(e => e.Linkedin).HasMaxLength(255);

                entity.Property(e => e.MapLocation).HasMaxLength(255);

                entity.Property(e => e.OtherPhone).HasMaxLength(255);

                entity.Property(e => e.Picture).HasColumnType("image");

                entity.Property(e => e.Prefix).HasMaxLength(255);

                entity.Property(e => e.Tel1).HasMaxLength(255);

                entity.Property(e => e.Tel2).HasMaxLength(255);

                entity.Property(e => e.Twitter).HasMaxLength(255);

                entity.Property(e => e.UrlPicture).HasMaxLength(255);

                entity.Property(e => e.WebSite).HasColumnType("text");

                entity.HasOne(d => d.IdAddressNavigation)
                    .WithMany(p => p.Contact)
                    .HasForeignKey(d => d.IdAddress)
                    .HasConstraintName("FK_Contact_Address");

                entity.HasOne(d => d.IdAgencyNavigation)
                    .WithMany(p => p.Contact)
                    .HasForeignKey(d => d.IdAgency)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Contact_BankAgency");

                entity.HasOne(d => d.IdCompanyNavigation)
                    .WithMany(p => p.Contact)
                    .HasForeignKey(d => d.IdCompany)
                    .HasConstraintName("FK_Contact_Company");

                entity.HasOne(d => d.IdOfficeNavigation)
                    .WithMany(p => p.Contact)
                    .HasForeignKey(d => d.IdOffice)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Contact_Office");

                entity.HasOne(d => d.IdTiersNavigation)
                    .WithMany(p => p.Contact)
                    .HasForeignKey(d => d.IdTiers)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Contact_Tiers");
            });

            modelBuilder.Entity<ContactTypeDocument>(entity =>
            {
                entity.ToTable("ContactTypeDocument", "Shared");

                entity.Property(e => e.CodeTypeDocument).HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdContactNavigation)
                    .WithMany(p => p.ContactTypeDocument)
                    .HasForeignKey(d => d.IdContact)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ContactTypeDocument_Contact");
            });

            modelBuilder.Entity<Contract>(entity =>
            {
                entity.ToTable("Contract", "Payroll");

                entity.Property(e => e.ContractAttached).HasMaxLength(500);

                entity.Property(e => e.ContractReference)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.HasOne(d => d.IdCnssNavigation)
                    .WithMany(p => p.Contract)
                    .HasForeignKey(d => d.IdCnss)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Contract_Cnss");

                entity.HasOne(d => d.IdContractTypeNavigation)
                    .WithMany(p => p.Contract)
                    .HasForeignKey(d => d.IdContractType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Contract_ContractType");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.Contract)
                    .HasForeignKey(d => d.IdEmployee)
                    .HasConstraintName("FK_Contract_Employee");

                entity.HasOne(d => d.IdSalaryStructureNavigation)
                    .WithMany(p => p.Contract)
                    .HasForeignKey(d => d.IdSalaryStructure)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Contract_SalaryStructure");
            });

            modelBuilder.Entity<ContractAdvantage>(entity =>
            {
                entity.ToTable("ContractAdvantage", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdContractNavigation)
                    .WithMany(p => p.ContractAdvantage)
                    .HasForeignKey(d => d.IdContract)
                    .HasConstraintName("FK_ContractAdvantage_Contract");
            });

            modelBuilder.Entity<ContractBenefitInKind>(entity =>
            {
                entity.ToTable("ContractBenefitInKind", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.ValidityEndDate).HasColumnType("date");

                entity.Property(e => e.ValidityStartDate).HasColumnType("date");

                entity.HasOne(d => d.IdBenefitInKindNavigation)
                    .WithMany(p => p.ContractBenefitInKind)
                    .HasForeignKey(d => d.IdBenefitInKind)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ContractBenefitInKind_BenefitInKind");

                entity.HasOne(d => d.IdContractNavigation)
                    .WithMany(p => p.ContractBenefitInKind)
                    .HasForeignKey(d => d.IdContract)
                    .HasConstraintName("FK_ContractBenefitInKind_Contract");
            });

            modelBuilder.Entity<ContractBonus>(entity =>
            {
                entity.ToTable("ContractBonus", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.ValidityEndDate).HasColumnType("date");

                entity.Property(e => e.ValidityStartDate).HasColumnType("date");

                entity.HasOne(d => d.IdBonusNavigation)
                    .WithMany(p => p.ContractBonus)
                    .HasForeignKey(d => d.IdBonus)
                    .HasConstraintName("FK_Contract_Bonus_Bonus");

                entity.HasOne(d => d.IdContractNavigation)
                    .WithMany(p => p.ContractBonus)
                    .HasForeignKey(d => d.IdContract)
                    .HasConstraintName("FK_Contract_Bonus_Contract");
            });

            modelBuilder.Entity<ContractType>(entity =>
            {
                entity.ToTable("ContractType", "Payroll");

                entity.Property(e => e.CalendarNoticeDays)
                    .IsRequired()
                    .HasDefaultValueSql("('false')");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.HasEndDate)
                    .IsRequired()
                    .HasDefaultValueSql("('false')");

                entity.Property(e => e.Label).HasMaxLength(255);
            });

            modelBuilder.Entity<ContributionRegister>(entity =>
            {
                entity.ToTable("ContributionRegister", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Counter>(entity =>
            {
                entity.ToTable("Counter", "Shared");

                entity.Property(e => e.Id).HasMaxLength(50);

                entity.Property(e => e.CounterBit1).HasColumnName("Counter_bit_1");

                entity.Property(e => e.CounterBit10).HasColumnName("Counter_bit_10");

                entity.Property(e => e.CounterBit2).HasColumnName("Counter_bit_2");

                entity.Property(e => e.CounterBit3).HasColumnName("Counter_bit_3");

                entity.Property(e => e.CounterBit4).HasColumnName("Counter_bit_4");

                entity.Property(e => e.CounterBit5).HasColumnName("Counter_bit_5");

                entity.Property(e => e.CounterBit6).HasColumnName("Counter_bit_6");

                entity.Property(e => e.CounterBit7).HasColumnName("Counter_bit_7");

                entity.Property(e => e.CounterBit8).HasColumnName("Counter_bit_8");

                entity.Property(e => e.CounterBit9).HasColumnName("Counter_bit_9");

                entity.Property(e => e.CounterDate1)
                    .HasColumnType("date")
                    .HasColumnName("Counter_date_1");

                entity.Property(e => e.CounterDate10)
                    .HasColumnType("date")
                    .HasColumnName("Counter_date_10");

                entity.Property(e => e.CounterDate2)
                    .HasColumnType("date")
                    .HasColumnName("Counter_date_2");

                entity.Property(e => e.CounterDate3)
                    .HasColumnType("date")
                    .HasColumnName("Counter_date_3");

                entity.Property(e => e.CounterDate4)
                    .HasColumnType("date")
                    .HasColumnName("Counter_date_4");

                entity.Property(e => e.CounterDate5)
                    .HasColumnType("date")
                    .HasColumnName("Counter_date_5");

                entity.Property(e => e.CounterDate6)
                    .HasColumnType("date")
                    .HasColumnName("Counter_date_6");

                entity.Property(e => e.CounterDate7)
                    .HasColumnType("date")
                    .HasColumnName("Counter_date_7");

                entity.Property(e => e.CounterDate8)
                    .HasColumnType("date")
                    .HasColumnName("Counter_date_8");

                entity.Property(e => e.CounterDate9)
                    .HasColumnType("date")
                    .HasColumnName("Counter_date_9");

                entity.Property(e => e.CounterFloat1).HasColumnName("Counter_float_1");

                entity.Property(e => e.CounterFloat10).HasColumnName("Counter_float_10");

                entity.Property(e => e.CounterFloat2).HasColumnName("Counter_float_2");

                entity.Property(e => e.CounterFloat3).HasColumnName("Counter_float_3");

                entity.Property(e => e.CounterFloat4).HasColumnName("Counter_float_4");

                entity.Property(e => e.CounterFloat5).HasColumnName("Counter_float_5");

                entity.Property(e => e.CounterFloat6).HasColumnName("Counter_float_6");

                entity.Property(e => e.CounterFloat7).HasColumnName("Counter_float_7");

                entity.Property(e => e.CounterFloat8).HasColumnName("Counter_float_8");

                entity.Property(e => e.CounterFloat9).HasColumnName("Counter_float_9");

                entity.Property(e => e.CounterInt1).HasColumnName("Counter_int_1");

                entity.Property(e => e.CounterInt10).HasColumnName("Counter_int_10");

                entity.Property(e => e.CounterInt2).HasColumnName("Counter_int_2");

                entity.Property(e => e.CounterInt3).HasColumnName("Counter_int_3");

                entity.Property(e => e.CounterInt4).HasColumnName("Counter_int_4");

                entity.Property(e => e.CounterInt5).HasColumnName("Counter_int_5");

                entity.Property(e => e.CounterInt6).HasColumnName("Counter_int_6");

                entity.Property(e => e.CounterInt7).HasColumnName("Counter_int_7");

                entity.Property(e => e.CounterInt8).HasColumnName("Counter_int_8");

                entity.Property(e => e.CounterInt9).HasColumnName("Counter_int_9");

                entity.Property(e => e.CounterVarchar1)
                    .IsUnicode(false)
                    .HasColumnName("Counter_varchar_1");

                entity.Property(e => e.CounterVarchar10)
                    .IsUnicode(false)
                    .HasColumnName("Counter_varchar_10");

                entity.Property(e => e.CounterVarchar2)
                    .IsUnicode(false)
                    .HasColumnName("Counter_varchar_2");

                entity.Property(e => e.CounterVarchar3)
                    .IsUnicode(false)
                    .HasColumnName("Counter_varchar_3");

                entity.Property(e => e.CounterVarchar4)
                    .IsUnicode(false)
                    .HasColumnName("Counter_varchar_4");

                entity.Property(e => e.CounterVarchar5)
                    .IsUnicode(false)
                    .HasColumnName("Counter_varchar_5");

                entity.Property(e => e.CounterVarchar6)
                    .IsUnicode(false)
                    .HasColumnName("Counter_varchar_6");

                entity.Property(e => e.CounterVarchar7)
                    .IsUnicode(false)
                    .HasColumnName("Counter_varchar_7");

                entity.Property(e => e.CounterVarchar8)
                    .IsUnicode(false)
                    .HasColumnName("Counter_varchar_8");

                entity.Property(e => e.CounterVarchar9)
                    .IsUnicode(false)
                    .HasColumnName("Counter_varchar_9");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Prefix).HasMaxLength(50);
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.ToTable("Country", "Shared");

                entity.HasIndex(e => new { e.Code, e.DeletedToken }, "ConstraintCode")
                    .IsUnique();

                entity.HasIndex(e => new { e.Alpha2, e.DeletedToken }, "UniqueAlpha2Country")
                    .IsUnique();

                entity.HasIndex(e => new { e.Alpha3, e.DeletedToken }, "UniqueAlpha3Country")
                    .IsUnique();

                entity.HasIndex(e => new { e.DeletedToken, e.Code }, "UniqueCodePays")
                    .IsUnique();

                entity.Property(e => e.Alpha2).HasMaxLength(2);

                entity.Property(e => e.Alpha3).HasMaxLength(3);

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(255);

                entity.Property(e => e.NameEn).HasMaxLength(255);

                entity.Property(e => e.NameFr).HasMaxLength(255);
            });

            modelBuilder.Entity<CriteriaMark>(entity =>
            {
                entity.ToTable("CriteriaMark", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdEvaluationCriteriaNavigation)
                    .WithMany(p => p.CriteriaMark)
                    .HasForeignKey(d => d.IdEvaluationCriteria)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CriteriaMark_EvaluationCriteria");

                entity.HasOne(d => d.IdInterviewMarkNavigation)
                    .WithMany(p => p.CriteriaMark)
                    .HasForeignKey(d => d.IdInterviewMark)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CriteriaMark_InterviewMark");
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.ToTable("Currency", "Administration");

                entity.HasIndex(e => new { e.DeletedToken, e.Code }, "UniqueCodeCurrency")
                    .IsUnique();

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CurrencyInLetter).HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.FloatInLetter).HasMaxLength(50);

                entity.Property(e => e.Symbole).HasMaxLength(50);
            });

            modelBuilder.Entity<CurrencyRate>(entity =>
            {
                entity.ToTable("CurrencyRate", "Administration");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.HasOne(d => d.IdCurrencyNavigation)
                    .WithMany(p => p.CurrencyRate)
                    .HasForeignKey(d => d.IdCurrency)
                    .HasConstraintName("FK_CurrencyRate_Currency");
            });

            modelBuilder.Entity<CurriculumVitae>(entity =>
            {
                entity.ToTable("CurriculumVitae", "RH");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CurriculumVitaePath)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.DepositDate).HasColumnType("date");

                entity.Property(e => e.Entitled)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.IdCandidateNavigation)
                    .WithMany(p => p.CurriculumVitae)
                    .HasForeignKey(d => d.IdCandidate)
                    .HasConstraintName("FK_CV_Candidate");
            });

            modelBuilder.Entity<DateToRemember>(entity =>
            {
                entity.ToTable("DateToRemember", "Shared");

                entity.Property(e => e.DeletedToken).HasMaxLength(255);

                entity.Property(e => e.EventName).HasMaxLength(255);

                entity.HasOne(d => d.IdContactNavigation)
                    .WithMany(p => p.DateToRemember)
                    .HasForeignKey(d => d.IdContact)
                    .HasConstraintName("FK_DateToRemember_Contact");

                entity.HasOne(d => d.IdTiersNavigation)
                    .WithMany(p => p.DateToRemember)
                    .HasForeignKey(d => d.IdTiers)
                    .HasConstraintName("FK_DateToRemember_Tiers");
            });

            modelBuilder.Entity<DayOff>(entity =>
            {
                entity.ToTable("DayOff", "Shared");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.IdPeriodNavigation)
                    .WithMany(p => p.DayOff)
                    .HasForeignKey(d => d.IdPeriod)
                    .HasConstraintName("FK_DayOff_Period");
            });

            modelBuilder.Entity<Delivery>(entity =>
            {
                entity.ToTable("Delivery", "Ecommerce");

                entity.HasOne(d => d.IdItemNavigation)
                    .WithMany(p => p.Delivery)
                    .HasForeignKey(d => d.IdItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Delivery_Item");
            });

            modelBuilder.Entity<DeliveryType>(entity =>
            {
                entity.ToTable("DeliveryType", "Sales");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(255);
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.ToTable("Department", "Payroll");

                entity.Property(e => e.CreationDate).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.DepartmentCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Domain)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<DetailReconciliation>(entity =>
            {
                entity.ToTable("DetailReconciliation", "Treasury");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdDetailTimetableNavigation)
                    .WithMany(p => p.DetailReconciliation)
                    .HasForeignKey(d => d.IdDetailTimetable)
                    .HasConstraintName("FK_DetailReconciliation3");

                entity.HasOne(d => d.IdReconciliationNavigation)
                    .WithMany(p => p.DetailReconciliation)
                    .HasForeignKey(d => d.IdReconciliation)
                    .HasConstraintName("FK_DetailReconciliation");
            });

            modelBuilder.Entity<DetailTimetable>(entity =>
            {
                entity.ToTable("DetailTimetable", "Treasury");

                entity.Property(e => e.Activity).HasMaxLength(255);

                entity.Property(e => e.DateTimetable).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.IdDetailTimetableAxis1).HasColumnName("IdDetailTimetableAxis_1");

                entity.Property(e => e.IdDetailTimetableAxis10).HasColumnName("IdDetailTimetableAxis_10");

                entity.Property(e => e.IdDetailTimetableAxis11).HasColumnName("IdDetailTimetableAxis_11");

                entity.Property(e => e.IdDetailTimetableAxis12).HasColumnName("IdDetailTimetableAxis_12");

                entity.Property(e => e.IdDetailTimetableAxis13).HasColumnName("IdDetailTimetableAxis_13");

                entity.Property(e => e.IdDetailTimetableAxis14).HasColumnName("IdDetailTimetableAxis_14");

                entity.Property(e => e.IdDetailTimetableAxis15).HasColumnName("IdDetailTimetableAxis_15");

                entity.Property(e => e.IdDetailTimetableAxis16).HasColumnName("IdDetailTimetableAxis_16");

                entity.Property(e => e.IdDetailTimetableAxis17).HasColumnName("IdDetailTimetableAxis_17");

                entity.Property(e => e.IdDetailTimetableAxis18).HasColumnName("IdDetailTimetableAxis_18");

                entity.Property(e => e.IdDetailTimetableAxis19).HasColumnName("IdDetailTimetableAxis_19");

                entity.Property(e => e.IdDetailTimetableAxis2).HasColumnName("IdDetailTimetableAxis_2");

                entity.Property(e => e.IdDetailTimetableAxis20).HasColumnName("IdDetailTimetableAxis_20");

                entity.Property(e => e.IdDetailTimetableAxis21).HasColumnName("IdDetailTimetableAxis_21");

                entity.Property(e => e.IdDetailTimetableAxis22).HasColumnName("IdDetailTimetableAxis_22");

                entity.Property(e => e.IdDetailTimetableAxis23).HasColumnName("IdDetailTimetableAxis_23");

                entity.Property(e => e.IdDetailTimetableAxis24).HasColumnName("IdDetailTimetableAxis_24");

                entity.Property(e => e.IdDetailTimetableAxis25).HasColumnName("IdDetailTimetableAxis_25");

                entity.Property(e => e.IdDetailTimetableAxis26).HasColumnName("IdDetailTimetableAxis_26");

                entity.Property(e => e.IdDetailTimetableAxis27).HasColumnName("IdDetailTimetableAxis_27");

                entity.Property(e => e.IdDetailTimetableAxis28).HasColumnName("IdDetailTimetableAxis_28");

                entity.Property(e => e.IdDetailTimetableAxis29).HasColumnName("IdDetailTimetableAxis_29");

                entity.Property(e => e.IdDetailTimetableAxis3).HasColumnName("IdDetailTimetableAxis_3");

                entity.Property(e => e.IdDetailTimetableAxis30).HasColumnName("IdDetailTimetableAxis_30");

                entity.Property(e => e.IdDetailTimetableAxis4).HasColumnName("IdDetailTimetableAxis_4");

                entity.Property(e => e.IdDetailTimetableAxis5).HasColumnName("IdDetailTimetableAxis_5");

                entity.Property(e => e.IdDetailTimetableAxis6).HasColumnName("IdDetailTimetableAxis_6");

                entity.Property(e => e.IdDetailTimetableAxis7).HasColumnName("IdDetailTimetableAxis_7");

                entity.Property(e => e.IdDetailTimetableAxis8).HasColumnName("IdDetailTimetableAxis_8");

                entity.Property(e => e.IdDetailTimetableAxis9).HasColumnName("IdDetailTimetableAxis_9");

                entity.Property(e => e.Meaning).HasMaxLength(255);

                entity.Property(e => e.PostponedDate).HasColumnType("date");

                entity.HasOne(d => d.IdPaymentTypeNavigation)
                    .WithMany(p => p.DetailTimetable)
                    .HasForeignKey(d => d.IdPaymentType)
                    .HasConstraintName("FK_DetailTimetable_PaymentType");

                entity.HasOne(d => d.IdTimetableNavigation)
                    .WithMany(p => p.DetailTimetable)
                    .HasForeignKey(d => d.IdTimetable)
                    .HasConstraintName("FK_DetailTimetable_Timetable");
            });

            modelBuilder.Entity<DetailsSettlementMode>(entity =>
            {
                entity.ToTable("DetailsSettlementMode", "Sales");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdPaymentMethodNavigation)
                    .WithMany(p => p.DetailsSettlementMode)
                    .HasForeignKey(d => d.IdPaymentMethod)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_DetailsSettlementMode_PaymentMethod");

                entity.HasOne(d => d.IdSettlementModeNavigation)
                    .WithMany(p => p.DetailsSettlementMode)
                    .HasForeignKey(d => d.IdSettlementMode)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_DetailsSettlementMode_SettlementMode");

                entity.HasOne(d => d.IdSettlementTypeNavigation)
                    .WithMany(p => p.DetailsSettlementMode)
                    .HasForeignKey(d => d.IdSettlementType)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_DetailsSettlementMode_SettlementType");
            });

            modelBuilder.Entity<DimCurrency>(entity =>
            {
                entity.HasKey(e => e.IdCurrency)
                    .HasName("PK_Currency_1");

                entity.ToTable("DimCurrency", "Reporting");

                entity.Property(e => e.IdCurrency).ValueGeneratedNever();

                entity.Property(e => e.CurrencyCode).HasMaxLength(255);
            });

            modelBuilder.Entity<DimItem>(entity =>
            {
                entity.HasKey(e => e.IdItem)
                    .HasName("PK_Item");

                entity.ToTable("DimItem", "Reporting");

                entity.Property(e => e.IdItem).ValueGeneratedNever();

                entity.Property(e => e.ItemCode).HasMaxLength(255);

                entity.Property(e => e.ItemDescription).HasMaxLength(255);

                entity.Property(e => e.LabelItemFamily).HasMaxLength(255);

                entity.Property(e => e.LabelItemNature).HasMaxLength(255);

                entity.Property(e => e.LabelSubFamily).HasMaxLength(255);
            });

            modelBuilder.Entity<DimTiers>(entity =>
            {
                entity.HasKey(e => e.IdTiers)
                    .HasName("PK_Dim.Tiers");

                entity.ToTable("DimTiers", "Reporting");

                entity.Property(e => e.IdTiers).ValueGeneratedNever();

                entity.Property(e => e.CountryEn).HasMaxLength(255);

                entity.Property(e => e.CountryFr).HasMaxLength(255);

                entity.Property(e => e.CreationDate).HasColumnType("date");

                entity.Property(e => e.TiersAdress).HasMaxLength(255);

                entity.Property(e => e.TiersCode).HasMaxLength(255);

                entity.Property(e => e.TiersName).HasMaxLength(255);

                entity.Property(e => e.TypeTiersLabel).HasMaxLength(255);
            });

            modelBuilder.Entity<DimWarehouse>(entity =>
            {
                entity.HasKey(e => e.IdWarehouse)
                    .HasName("PK_Warehouse");

                entity.ToTable("DimWarehouse", "Reporting");

                entity.Property(e => e.IdWarehouse).ValueGeneratedNever();

                entity.Property(e => e.WarehouseAdress).HasMaxLength(255);

                entity.Property(e => e.WarehouseCode).HasMaxLength(255);

                entity.Property(e => e.WarehouseName).HasMaxLength(255);
            });

            modelBuilder.Entity<Discussion>(entity =>
            {
                entity.ToTable("Discussion", "ERPSettings");

                entity.Property(e => e.DateLastNotif).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<Document>(entity =>
            {
                entity.ToTable("Document", "Sales");

                entity.HasIndex(e => new { e.DeletedToken, e.Code, e.DocumentTypeCode }, "UniqueCodeDocument")
                    .IsUnique();

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.Coefficient).HasDefaultValueSql("((1))");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DateTerm).HasColumnType("datetime");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentHtprice).HasColumnName("DocumentHTPrice");

                entity.Property(e => e.DocumentHtpriceWithCurrency).HasColumnName("DocumentHTPriceWithCurrency");

                entity.Property(e => e.DocumentInvoicingDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentInvoicingNumber).HasMaxLength(255);

                entity.Property(e => e.DocumentPriceIncludeVat).HasColumnName("DocumentPriceIncludeVAT");

                entity.Property(e => e.DocumentPriceIncludeVatwithCurrency).HasColumnName("DocumentPriceIncludeVATWithCurrency");

                entity.Property(e => e.DocumentTtcprice).HasColumnName("DocumentTTCPrice");

                entity.Property(e => e.DocumentTtcpriceWithCurrency).HasColumnName("DocumentTTCPriceWithCurrency");

                entity.Property(e => e.DocumentTypeCode)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DocumentVarchar2)
                    .IsUnicode(false)
                    .HasColumnName("Document_varchar_2");

                entity.Property(e => e.DocumentVarchar3)
                    .IsUnicode(false)
                    .HasColumnName("Document_varchar_3");

                entity.Property(e => e.DocumentVarchar7)
                    .IsUnicode(false)
                    .HasColumnName("Document_varchar_7");

                entity.Property(e => e.DocumentVarchar8)
                    .IsUnicode(false)
                    .HasColumnName("Document_varchar_8");

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.Informations).HasMaxLength(255);

                entity.Property(e => e.IsBtoB)
                    .HasColumnName("IsBToB")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDeliverySuccess).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsForPos).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsSynchronizedBtoB).HasColumnName("IsSynchronizedBToB");

                entity.Property(e => e.LastName).HasMaxLength(255);

                entity.Property(e => e.MatriculeFiscale).HasMaxLength(255);

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.ProvisionalCode).HasMaxLength(255);

                entity.Property(e => e.Tel1).HasMaxLength(255);

                entity.Property(e => e.Tel2).HasMaxLength(255);

                entity.Property(e => e.ValidationDate).HasColumnType("datetime");

                entity.Property(e => e.WithHoldingFlag).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.IdBankAccountNavigation)
                    .WithMany(p => p.Document)
                    .HasForeignKey(d => d.IdBankAccount)
                    .HasConstraintName("FK_Document_BankAccount");

                entity.HasOne(d => d.IdContactNavigation)
                    .WithMany(p => p.Document)
                    .HasForeignKey(d => d.IdContact)
                    .HasConstraintName("FK_Document_Contact");

                entity.HasOne(d => d.IdCreatorNavigation)
                    .WithMany(p => p.DocumentIdCreatorNavigation)
                    .HasForeignKey(d => d.IdCreator)
                    .HasConstraintName("FK_Document_User1");

                entity.HasOne(d => d.IdDeliveryTypeNavigation)
                    .WithMany(p => p.Document)
                    .HasForeignKey(d => d.IdDeliveryType)
                    .HasConstraintName("FK_Document_DeliveryType");

                entity.HasOne(d => d.IdDocumentStatusNavigation)
                    .WithMany(p => p.Document)
                    .HasForeignKey(d => d.IdDocumentStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Document_DocumentStatus");

                entity.HasOne(d => d.IdExchangeRateNavigation)
                    .WithMany(p => p.Document)
                    .HasForeignKey(d => d.IdExchangeRate)
                    .HasConstraintName("FK_Document_CurrencyRate");

                entity.HasOne(d => d.IdPaymentMethodNavigation)
                    .WithMany(p => p.Document)
                    .HasForeignKey(d => d.IdPaymentMethod)
                    .HasConstraintName("FK_Document_PaymentMethod");

                entity.HasOne(d => d.IdPriceRequestNavigation)
                    .WithMany(p => p.Document)
                    .HasForeignKey(d => d.IdPriceRequest)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Document_PriceRequest");

                entity.HasOne(d => d.IdProvisionNavigation)
                    .WithMany(p => p.Document)
                    .HasForeignKey(d => d.IdProvision)
                    .HasConstraintName("FK_Document_Provisioning");

                entity.HasOne(d => d.IdSessionCounterSalesNavigation)
                    .WithMany(p => p.Document)
                    .HasForeignKey(d => d.IdSessionCounterSales)
                    .HasConstraintName("FK_Document_SessionCash");

                entity.HasOne(d => d.IdSettlementModeNavigation)
                    .WithMany(p => p.Document)
                    .HasForeignKey(d => d.IdSettlementMode)
                    .HasConstraintName("FK_Document_SettlementMode");

                entity.HasOne(d => d.IdTiersNavigation)
                    .WithMany(p => p.Document)
                    .HasForeignKey(d => d.IdTiers)
                    .HasConstraintName("FK_Document_Tiers");

                entity.HasOne(d => d.IdUsedCurrencyNavigation)
                    .WithMany(p => p.Document)
                    .HasForeignKey(d => d.IdUsedCurrency)
                    .HasConstraintName("FK_Document_Currency");

                entity.HasOne(d => d.IdValidatorNavigation)
                    .WithMany(p => p.DocumentIdValidatorNavigation)
                    .HasForeignKey(d => d.IdValidator)
                    .HasConstraintName("FK_Document_User");

                entity.HasOne(d => d.IdVehicleNavigation)
                    .WithMany(p => p.Document)
                    .HasForeignKey(d => d.IdVehicle)
                    .HasConstraintName("FK_Document_Vehicle");
            });

            modelBuilder.Entity<DocumentExpenseLine>(entity =>
            {
                entity.ToTable("DocumentExpenseLine", "Sales");

                entity.Property(e => e.CodeExpenseLine).HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Designation).HasMaxLength(300);

                entity.HasOne(d => d.IdCurrencyNavigation)
                    .WithMany(p => p.DocumentExpenseLine)
                    .HasForeignKey(d => d.IdCurrency)
                    .HasConstraintName("FK_DocumentExpenseLine_Currency");

                entity.HasOne(d => d.IdDocumentNavigation)
                    .WithMany(p => p.DocumentExpenseLine)
                    .HasForeignKey(d => d.IdDocument)
                    .HasConstraintName("FK_DocumentExpenseLine_Document");

                entity.HasOne(d => d.IdExpenseNavigation)
                    .WithMany(p => p.DocumentExpenseLine)
                    .HasForeignKey(d => d.IdExpense)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentExpenseLine_Expense");

                entity.HasOne(d => d.IdTaxeNavigation)
                    .WithMany(p => p.DocumentExpenseLine)
                    .HasForeignKey(d => d.IdTaxe)
                    .HasConstraintName("FK_DocumentExpenseLine_Taxe");

                entity.HasOne(d => d.IdTiersNavigation)
                    .WithMany(p => p.DocumentExpenseLine)
                    .HasForeignKey(d => d.IdTiers)
                    .HasConstraintName("FK_DocumentExpenseLine_Tiers");
            });

            modelBuilder.Entity<DocumentLine>(entity =>
            {
                entity.ToTable("DocumentLine", "Sales");

                entity.Property(e => e.CodeDocumentLine).HasMaxLength(50);

                entity.Property(e => e.DateAvailability).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Designation).HasMaxLength(300);

                entity.Property(e => e.Requirement).HasMaxLength(255);

                entity.Property(e => e.SelectedItemSalePolicy).HasColumnName("selectedItemSalePolicy");

                entity.HasOne(d => d.IdDeliveryAssociatedNavigation)
                    .WithMany(p => p.InverseIdDeliveryAssociatedNavigation)
                    .HasForeignKey(d => d.IdDeliveryAssociated)
                    .HasConstraintName("FK_DocumentLine_DocumentLine2");

                entity.HasOne(d => d.IdDocumentNavigation)
                    .WithMany(p => p.DocumentLine)
                    .HasForeignKey(d => d.IdDocument)
                    .HasConstraintName("FK_DocumentLine_Document");

                entity.HasOne(d => d.IdDocumentLineAssociatedNavigation)
                    .WithMany(p => p.InverseIdDocumentLineAssociatedNavigation)
                    .HasForeignKey(d => d.IdDocumentLineAssociated)
                    .HasConstraintName("FK_DocumentLine_DocumentLine");

                entity.HasOne(d => d.IdItemNavigation)
                    .WithMany(p => p.DocumentLine)
                    .HasForeignKey(d => d.IdItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentLine_Item");

                entity.HasOne(d => d.IdMeasureUnitNavigation)
                    .WithMany(p => p.DocumentLine)
                    .HasForeignKey(d => d.IdMeasureUnit)
                    .HasConstraintName("FK_DocumentLine_MeasureUnit");

                entity.HasOne(d => d.IdPricesNavigation)
                    .WithMany(p => p.DocumentLine)
                    .HasForeignKey(d => d.IdPrices)
                    .HasConstraintName("FK_DocumentLine_Prices");

                entity.HasOne(d => d.IdStorageNavigation)
                    .WithMany(p => p.DocumentLine)
                    .HasForeignKey(d => d.IdStorage)
                    .HasConstraintName("FK_DocumentLine_Storage");

                entity.HasOne(d => d.IdWarehouseNavigation)
                    .WithMany(p => p.DocumentLine)
                    .HasForeignKey(d => d.IdWarehouse)
                    .HasConstraintName("FK_DocumentLine_Warehouse");
            });

            modelBuilder.Entity<DocumentLineNegotiationOptions>(entity =>
            {
                entity.ToTable("DocumentLineNegotiationOptions", "Sales");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.HasOne(d => d.IdDocumentLineNavigation)
                    .WithMany(p => p.DocumentLineNegotiationOptions)
                    .HasForeignKey(d => d.IdDocumentLine)
                    .HasConstraintName("FK_DocumentLineNegotiationOptions_DocumentLineNegotiationOptions");

                entity.HasOne(d => d.IdItemNavigation)
                    .WithMany(p => p.DocumentLineNegotiationOptions)
                    .HasForeignKey(d => d.IdItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentLineNegotiationOptions_Item");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.DocumentLineNegotiationOptions)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentLineNegotiationOptions_User");
            });

            modelBuilder.Entity<DocumentLinePrices>(entity =>
            {
                entity.ToTable("DocumentLinePrices", "Sales");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdDocumentLineNavigation)
                    .WithMany(p => p.DocumentLinePrices)
                    .HasForeignKey(d => d.IdDocumentLine)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_DocumentLinePrices_DocumentLine");

                entity.HasOne(d => d.IdPricesNavigation)
                    .WithMany(p => p.DocumentLinePrices)
                    .HasForeignKey(d => d.IdPrices)
                    .HasConstraintName("FK_DocumentLinePrices_Prices");
            });

            modelBuilder.Entity<DocumentLineTaxe>(entity =>
            {
                entity.ToTable("DocumentLineTaxe", "Sales");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdDocumentLineNavigation)
                    .WithMany(p => p.DocumentLineTaxe)
                    .HasForeignKey(d => d.IdDocumentLine)
                    .HasConstraintName("FK_DocumentLineTaxe_DocumentLine");

                entity.HasOne(d => d.IdTaxeNavigation)
                    .WithMany(p => p.DocumentLineTaxe)
                    .HasForeignKey(d => d.IdTaxe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentLineTaxe_Taxe");
            });

            modelBuilder.Entity<DocumentRequest>(entity =>
            {
                entity.ToTable("DocumentRequest", "Payroll");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.DeadLine).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.SubmissionDate).HasColumnType("date");

                entity.Property(e => e.TreatmentDate).HasColumnType("date");

                entity.HasOne(d => d.IdDocumentRequestTypeNavigation)
                    .WithMany(p => p.DocumentRequest)
                    .HasForeignKey(d => d.IdDocumentRequestType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentRequest_DocumentRequestType");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.DocumentRequestIdEmployeeNavigation)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentRequest_Employee");

                entity.HasOne(d => d.TreatedByNavigation)
                    .WithMany(p => p.DocumentRequestTreatedByNavigation)
                    .HasForeignKey(d => d.TreatedBy)
                    .HasConstraintName("FK_DocumentRequest_Superior");
            });

            modelBuilder.Entity<DocumentRequestEmail>(entity =>
            {
                entity.ToTable("DocumentRequestEmail", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdDocumentRequestNavigation)
                    .WithMany(p => p.DocumentRequestEmail)
                    .HasForeignKey(d => d.IdDocumentRequest)
                    .HasConstraintName("FK_DocumentRequest");

                entity.HasOne(d => d.IdEmailNavigation)
                    .WithMany(p => p.DocumentRequestEmail)
                    .HasForeignKey(d => d.IdEmail)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentRequestEmail");
            });

            modelBuilder.Entity<DocumentRequestType>(entity =>
            {
                entity.ToTable("DocumentRequestType", "Payroll");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<DocumentStatus>(entity =>
            {
                entity.ToTable("DocumentStatus", "Sales");

                entity.HasIndex(e => new { e.DeletedToken, e.Code }, "UniqueCodeDocumentStatus")
                    .IsUnique();

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(255);
            });

            modelBuilder.Entity<DocumentTaxsResume>(entity =>
            {
                entity.ToTable("DocumentTaxsResume", "Sales");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.IdTax).HasColumnName("Id_Tax");

                entity.HasOne(d => d.IdDocumentNavigation)
                    .WithMany(p => p.DocumentTaxsResume)
                    .HasForeignKey(d => d.IdDocument)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentTaxsResume_Document");

                entity.HasOne(d => d.IdTaxNavigation)
                    .WithMany(p => p.DocumentTaxsResume)
                    .HasForeignKey(d => d.IdTax)
                    .HasConstraintName("FK_DocumentTaxsResume_Taxe");
            });

            modelBuilder.Entity<DocumentType>(entity =>
            {
                entity.HasKey(e => e.CodeType);

                entity.ToTable("DocumentType", "Sales");

                entity.HasIndex(e => new { e.DeletedToken, e.Code }, "UniqueCodeDocumentType")
                    .IsUnique();

                entity.Property(e => e.CodeType).HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DefaultCodeDocumentTypeAssociated).HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Label).HasMaxLength(255);

                entity.Property(e => e.StockOperation).HasMaxLength(50);

                entity.Property(e => e.StockOperationStatus).HasMaxLength(50);

                entity.HasOne(d => d.DefaultCodeDocumentTypeAssociatedNavigation)
                    .WithMany(p => p.InverseDefaultCodeDocumentTypeAssociatedNavigation)
                    .HasForeignKey(d => d.DefaultCodeDocumentTypeAssociated)
                    .HasConstraintName("FK_DocumentType_DocumentType");
            });

            modelBuilder.Entity<DocumentTypeRelation>(entity =>
            {
                entity.ToTable("DocumentTypeRelation", "Sales");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CodeDocumentType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CodeDocumentTypeAssociated)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.CodeDocumentTypeNavigation)
                    .WithMany(p => p.DocumentTypeRelationCodeDocumentTypeNavigation)
                    .HasForeignKey(d => d.CodeDocumentType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentTypeRelation_DocumentTypeRelation");

                entity.HasOne(d => d.CodeDocumentTypeAssociatedNavigation)
                    .WithMany(p => p.DocumentTypeRelationCodeDocumentTypeAssociatedNavigation)
                    .HasForeignKey(d => d.CodeDocumentTypeAssociated)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentTypeRelation_DocumentType");
            });

            modelBuilder.Entity<DocumentWithholdingTax>(entity =>
            {
                entity.ToTable("DocumentWithholdingTax", "Sales");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdDocumentNavigation)
                    .WithMany(p => p.DocumentWithholdingTax)
                    .HasForeignKey(d => d.IdDocument)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentWithholdingTax_Document");

                entity.HasOne(d => d.IdWithholdingTaxNavigation)
                    .WithMany(p => p.DocumentWithholdingTax)
                    .HasForeignKey(d => d.IdWithholdingTax)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentWithholdingTax_WithholdingTax");
            });

            modelBuilder.Entity<Email>(entity =>
            {
                entity.ToTable("Email", "Shared");

                entity.Property(e => e.Body).IsRequired();

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Receivers).IsRequired();

                entity.Property(e => e.Sender)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.ToTable("Employee", "Payroll");

                entity.HasIndex(e => new { e.Email, e.DeletedToken }, "UniqueKeyEmail")
                    .IsUnique();

                entity.HasIndex(e => new { e.Matricule, e.DeletedToken }, "UniqueKeyMatricule")
                    .IsUnique();

                entity.Property(e => e.AddressLine1).HasMaxLength(255);

                entity.Property(e => e.AddressLine2).HasMaxLength(255);

                entity.Property(e => e.AddressLine3).HasMaxLength(255);

                entity.Property(e => e.AddressLine4).HasMaxLength(255);

                entity.Property(e => e.AddressLine5).HasMaxLength(255);

                entity.Property(e => e.BirthDate).HasColumnType("date");

                entity.Property(e => e.BirthPlace).HasMaxLength(50);

                entity.Property(e => e.Category).HasMaxLength(50);

                entity.Property(e => e.Cin)
                    .HasMaxLength(50)
                    .HasColumnName("CIN");

                entity.Property(e => e.CinAttached).HasMaxLength(500);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Facebook).HasMaxLength(255);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FullName).HasMaxLength(100);

                entity.Property(e => e.HiringDate).HasColumnType("date");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Linkedin).HasMaxLength(255);

                entity.Property(e => e.Matricule).HasMaxLength(10);

                entity.Property(e => e.PersonalEmail).HasMaxLength(255);

                entity.Property(e => e.PersonalPhone).HasMaxLength(50);

                entity.Property(e => e.Picture).HasMaxLength(500);

                entity.Property(e => e.ProfessionalPhone).HasMaxLength(50);

                entity.Property(e => e.PseudoSkype).HasMaxLength(255);

                entity.Property(e => e.ResignationDate).HasColumnType("date");

                entity.Property(e => e.ResignationDepositDate).HasColumnType("date");

                entity.Property(e => e.Rib).HasMaxLength(50);

                entity.Property(e => e.SharedDocumentsPassword).HasMaxLength(500);

                entity.Property(e => e.SocialSecurityNumber).HasMaxLength(50);

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");

                entity.Property(e => e.WorkingLicenseNumber).HasMaxLength(255);

                entity.Property(e => e.ZipCode).HasMaxLength(50);

                entity.HasOne(d => d.IdBankNavigation)
                    .WithMany(p => p.Employee)
                    .HasForeignKey(d => d.IdBank)
                    .HasConstraintName("FK_Employee_Bank");

                entity.HasOne(d => d.IdCitizenshipNavigation)
                    .WithMany(p => p.EmployeeIdCitizenshipNavigation)
                    .HasForeignKey(d => d.IdCitizenship)
                    .HasConstraintName("FK_Employee_Citizenship");

                entity.HasOne(d => d.IdCityNavigation)
                    .WithMany(p => p.Employee)
                    .HasForeignKey(d => d.IdCity)
                    .HasConstraintName("FK_Employee_City");

                entity.HasOne(d => d.IdCountryNavigation)
                    .WithMany(p => p.EmployeeIdCountryNavigation)
                    .HasForeignKey(d => d.IdCountry)
                    .HasConstraintName("FK_Employee_Country");

                entity.HasOne(d => d.IdGradeNavigation)
                    .WithMany(p => p.Employee)
                    .HasForeignKey(d => d.IdGrade)
                    .HasConstraintName("FK_Employee_Grade");

                entity.HasOne(d => d.IdOfficeNavigation)
                    .WithMany(p => p.Employee)
                    .HasForeignKey(d => d.IdOffice)
                    .HasConstraintName("FK_Employee_Office");

                entity.HasOne(d => d.IdPaymentTypeNavigation)
                    .WithMany(p => p.Employee)
                    .HasForeignKey(d => d.IdPaymentType)
                    .HasConstraintName("FK_Employee_PaymentType");

                entity.HasOne(d => d.IdUpperHierarchyNavigation)
                    .WithMany(p => p.InverseIdUpperHierarchyNavigation)
                    .HasForeignKey(d => d.IdUpperHierarchy)
                    .HasConstraintName("FK_Employee_UpperHierarchy");
            });

            modelBuilder.Entity<EmployeeDocument>(entity =>
            {
                entity.ToTable("EmployeeDocument", "Payroll");

                entity.Property(e => e.AttachedFile).HasMaxLength(500);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.ExpirationDate).HasColumnType("date");

                entity.Property(e => e.Label).HasMaxLength(250);

                entity.Property(e => e.Value).HasMaxLength(250);

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.EmployeeDocument)
                    .HasForeignKey(d => d.IdEmployee)
                    .HasConstraintName("FK_EmployeeDocument_Employee");
            });

            modelBuilder.Entity<EmployeeProject>(entity =>
            {
                entity.ToTable("EmployeeProject", "RH");

                entity.Property(e => e.AssignmentDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CompanyCode).HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.UnassignmentDate).HasColumnType("date");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.EmployeeProject)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeProject_Employee");

                entity.HasOne(d => d.IdProjectNavigation)
                    .WithMany(p => p.EmployeeProject)
                    .HasForeignKey(d => d.IdProject)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeProject_Project");
            });

            modelBuilder.Entity<EmployeeSkills>(entity =>
            {
                entity.ToTable("EmployeeSkills", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.EmployeeSkills)
                    .HasForeignKey(d => d.IdEmployee)
                    .HasConstraintName("FK_EmployeeSkills_Employee");

                entity.HasOne(d => d.IdSkillsNavigation)
                    .WithMany(p => p.EmployeeSkills)
                    .HasForeignKey(d => d.IdSkills)
                    .HasConstraintName("FK_EmployeeSkills_Skills");
            });

            modelBuilder.Entity<EmployeeTeam>(entity =>
            {
                entity.ToTable("EmployeeTeam", "Payroll");

                entity.Property(e => e.AssignmentDate).HasColumnType("date");

                entity.Property(e => e.DeletedToken).HasColumnName("Deleted_Token");

                entity.Property(e => e.UnassignmentDate).HasColumnType("date");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.EmployeeTeam)
                    .HasForeignKey(d => d.IdEmployee)
                    .HasConstraintName("FK_EmployeeTeam_Employee");

                entity.HasOne(d => d.IdTeamNavigation)
                    .WithMany(p => p.EmployeeTeam)
                    .HasForeignKey(d => d.IdTeam)
                    .HasConstraintName("FK_EmployeeTeam_Team");
            });

            modelBuilder.Entity<EmployeeTrainingSession>(entity =>
            {
                entity.ToTable("EmployeeTrainingSession", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.EmployeeTrainingSession)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeTrainingSession_Employee");

                entity.HasOne(d => d.IdTrainingSessionNavigation)
                    .WithMany(p => p.EmployeeTrainingSession)
                    .HasForeignKey(d => d.IdTrainingSession)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeTrainingSession_TrainingSession");
            });

            modelBuilder.Entity<Entity>(entity =>
            {
                entity.ToTable("Entity", "ERPSettings");

                entity.HasComment("Table which contains all the entities existing in the database of the ERP");

                entity.HasIndex(e => e.EntityName, "IX_Entity")
                    .IsUnique();

                entity.Property(e => e.Id).HasComment("Unique identifier of the table entity");

                entity.Property(e => e.Ar).HasMaxLength(255);

                entity.Property(e => e.Ch).HasMaxLength(255);

                entity.Property(e => e.De).HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.En).HasMaxLength(255);

                entity.Property(e => e.EntityName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("Name of entity (In the database)");

                entity.Property(e => e.Es).HasMaxLength(255);

                entity.Property(e => e.Fr).HasMaxLength(255);

                entity.Property(e => e.TableName)
                    .HasMaxLength(100)
                    .HasComment("The user can change the names of the static tables in this column, just to differentiate the entities");

                entity.Property(e => e.TableSchema)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("Plan of database where entitées allocated to him");

                entity.HasOne(d => d.IdRelatedEntityNavigation)
                    .WithMany(p => p.InverseIdRelatedEntityNavigation)
                    .HasForeignKey(d => d.IdRelatedEntity)
                    .HasConstraintName("FK_Entity_Entity");
            });

            modelBuilder.Entity<EntityAxisValues>(entity =>
            {
                entity.ToTable("EntityAxisValues", "Administration");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.EntityNavigation)
                    .WithMany(p => p.EntityAxisValues)
                    .HasForeignKey(d => d.Entity)
                    .HasConstraintName("FK_EntityAxisValues_Entity");

                entity.HasOne(d => d.IdAxisValueNavigation)
                    .WithMany(p => p.EntityAxisValues)
                    .HasForeignKey(d => d.IdAxisValue)
                    .HasConstraintName("FK_EntityAxisValues_AxisValue");
            });

            modelBuilder.Entity<EntityCodification>(entity =>
            {
                entity.ToTable("EntityCodification", "ERPSettings");

                entity.Property(e => e.Property).HasMaxLength(255);

                entity.Property(e => e.Value).HasMaxLength(255);

                entity.HasOne(d => d.IdCodificationNavigation)
                    .WithMany(p => p.EntityCodification)
                    .HasForeignKey(d => d.IdCodification)
                    .HasConstraintName("FK_EntityCodification_Codification");

                entity.HasOne(d => d.IdEntityNavigation)
                    .WithMany(p => p.EntityCodification)
                    .HasForeignKey(d => d.IdEntity)
                    .HasConstraintName("FK_EntityCodification_Entity");
            });

            modelBuilder.Entity<EvaluationCriteria>(entity =>
            {
                entity.ToTable("EvaluationCriteria", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.IdEvaluationCriteriaThemeNavigation)
                    .WithMany(p => p.EvaluationCriteria)
                    .HasForeignKey(d => d.IdEvaluationCriteriaTheme)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EvaluationCriteria_EvaluationCriteriaTheme");
            });

            modelBuilder.Entity<EvaluationCriteriaTheme>(entity =>
            {
                entity.ToTable("EvaluationCriteriaTheme", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ExitAction>(entity =>
            {
                entity.ToTable("ExitAction", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Label).HasMaxLength(255);
            });

            modelBuilder.Entity<ExitActionEmployee>(entity =>
            {
                entity.ToTable("ExitActionEmployee", "Payroll");

                entity.Property(e => e.DeletedToken).HasColumnName("Deleted_Token");

                entity.Property(e => e.VerifyAction).HasColumnName("Verify_Action");

                entity.HasOne(d => d.IdExitActionNavigation)
                    .WithMany(p => p.ExitActionEmployee)
                    .HasForeignKey(d => d.IdExitAction)
                    .HasConstraintName("FK_ActionExitEmployee_Actions");

                entity.HasOne(d => d.IdExitEmployeeNavigation)
                    .WithMany(p => p.ExitActionEmployee)
                    .HasForeignKey(d => d.IdExitEmployee)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ActionExitEmployee_EmployeeExit");
            });

            modelBuilder.Entity<ExitEmailForEmployee>(entity =>
            {
                entity.ToTable("ExitEmailForEmployee", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.ExitEmailForEmployee)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExitEmailForEmployee_Employee");

                entity.HasOne(d => d.IdExitEmployeeNavigation)
                    .WithMany(p => p.ExitEmailForEmployee)
                    .HasForeignKey(d => d.IdExitEmployee)
                    .HasConstraintName("FK_ExitEmailForEmployee_EmployeeExit");
            });

            modelBuilder.Entity<ExitEmployee>(entity =>
            {
                entity.ToTable("ExitEmployee", "Payroll");

                entity.Property(e => e.CommentRh).HasMaxLength(255);

                entity.Property(e => e.CreationDate).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.ExitDepositDate).HasColumnType("date");

                entity.Property(e => e.ExitEmployeeAttachementFile).HasMaxLength(500);

                entity.Property(e => e.ExitPhysicalDate).HasColumnType("date");

                entity.Property(e => e.LegalExitDate).HasColumnType("date");

                entity.Property(e => e.MaxNoticePeriodDate).HasColumnType("date");

                entity.Property(e => e.MinNoticePeriodDate).HasColumnType("date");

                entity.Property(e => e.ReleaseDate).HasColumnType("date");

                entity.Property(e => e.TreatmentDate).HasColumnType("date");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.ExitEmployee)
                    .HasForeignKey(d => d.IdEmployee)
                    .HasConstraintName("FK_EmployeeExit_Employee");

                entity.HasOne(d => d.IdExitReasonNavigation)
                    .WithMany(p => p.ExitEmployee)
                    .HasForeignKey(d => d.IdExitReason)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeExit_ExitReason");
            });

            modelBuilder.Entity<ExitEmployeeLeaveLine>(entity =>
            {
                entity.ToTable("ExitEmployeeLeaveLine", "Payroll");

                entity.Property(e => e.Month).HasColumnType("date");

                entity.HasOne(d => d.IdExitEmployeeNavigation)
                    .WithMany(p => p.ExitEmployeeLeaveLine)
                    .HasForeignKey(d => d.IdExitEmployee)
                    .HasConstraintName("FK_ExitEmployeeLeaveLine_EmployeeExit");

                entity.HasOne(d => d.IdLeaveTypeNavigation)
                    .WithMany(p => p.ExitEmployeeLeaveLine)
                    .HasForeignKey(d => d.IdLeaveType)
                    .HasConstraintName("FK_ExitEmployeeLeaveLine_LeaveType");
            });

            modelBuilder.Entity<ExitEmployeePayLine>(entity =>
            {
                entity.ToTable("ExitEmployeePayLine", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Month).HasColumnType("date");

                entity.HasOne(d => d.IdExitEmployeeNavigation)
                    .WithMany(p => p.ExitEmployeePayLine)
                    .HasForeignKey(d => d.IdExitEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExitEmployeePayLine_EmployeeExit");
            });

            modelBuilder.Entity<ExitEmployeePayLineSalaryRule>(entity =>
            {
                entity.ToTable("ExitEmployeePayLineSalaryRule", "Payroll");

                entity.HasOne(d => d.IdExitEmployeePayLineNavigation)
                    .WithMany(p => p.ExitEmployeePayLineSalaryRule)
                    .HasForeignKey(d => d.IdExitEmployeePayLine)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_LinesSalaryRule_ExitEmployeePayLine");

                entity.HasOne(d => d.IdSalaryRuleNavigation)
                    .WithMany(p => p.ExitEmployeePayLineSalaryRule)
                    .HasForeignKey(d => d.IdSalaryRule)
                    .HasConstraintName("FK_LinesSalaryRule_SalaryRule");
            });

            modelBuilder.Entity<ExitReason>(entity =>
            {
                entity.ToTable("ExitReason", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Expense>(entity =>
            {
                entity.ToTable("Expense", "Sales");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.IdItemNavigation)
                    .WithMany(p => p.Expense)
                    .HasForeignKey(d => d.IdItem)
                    .HasConstraintName("FK_Expense_Item");

                entity.HasOne(d => d.IdTaxeNavigation)
                    .WithMany(p => p.Expense)
                    .HasForeignKey(d => d.IdTaxe)
                    .HasConstraintName("FK_Expense_Taxe");
            });

            modelBuilder.Entity<ExpenseReport>(entity =>
            {
                entity.ToTable("ExpenseReport", "Payroll");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Purpose)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.SubmissionDate).HasColumnType("date");

                entity.Property(e => e.TreatmentDate).HasColumnType("date");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.ExpenseReportIdEmployeeNavigation)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExpenseReport_Employee");

                entity.HasOne(d => d.TreatedByNavigation)
                    .WithMany(p => p.ExpenseReportTreatedByNavigation)
                    .HasForeignKey(d => d.TreatedBy)
                    .HasConstraintName("FK_ExpenseReport_Superior");
            });

            modelBuilder.Entity<ExpenseReportDetails>(entity =>
            {
                entity.ToTable("ExpenseReportDetails", "Payroll");

                entity.Property(e => e.AttachmentUrl)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.HasOne(d => d.IdCurrencyNavigation)
                    .WithMany(p => p.ExpenseReportDetails)
                    .HasForeignKey(d => d.IdCurrency)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExpenseReportDetails_Currency");

                entity.HasOne(d => d.IdExpenseReportNavigation)
                    .WithMany(p => p.ExpenseReportDetails)
                    .HasForeignKey(d => d.IdExpenseReport)
                    .HasConstraintName("FK_ExpenseReportDetails_ExpenseReport");

                entity.HasOne(d => d.IdExpenseReportDetailsTypeNavigation)
                    .WithMany(p => p.ExpenseReportDetails)
                    .HasForeignKey(d => d.IdExpenseReportDetailsType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExpenseReportDetails_ExpenseReportDetailsType");
            });

            modelBuilder.Entity<ExpenseReportDetailsType>(entity =>
            {
                entity.ToTable("ExpenseReportDetailsType", "Payroll");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(250);
            });

            modelBuilder.Entity<ExpenseReportEmail>(entity =>
            {
                entity.ToTable("ExpenseReportEmail", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdEmailNavigation)
                    .WithMany(p => p.ExpenseReportEmail)
                    .HasForeignKey(d => d.IdEmail)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Email");

                entity.HasOne(d => d.IdExpenseReportNavigation)
                    .WithMany(p => p.ExpenseReportEmail)
                    .HasForeignKey(d => d.IdExpenseReport)
                    .HasConstraintName("FK_ExpenseReport");
            });

            modelBuilder.Entity<ExternalTrainer>(entity =>
            {
                entity.ToTable("ExternalTrainer", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.LastName).HasMaxLength(255);

                entity.Property(e => e.PhoneNumber).HasMaxLength(255);
            });

            modelBuilder.Entity<ExternalTrainerSkills>(entity =>
            {
                entity.ToTable("ExternalTrainerSkills", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdExternalTrainerNavigation)
                    .WithMany(p => p.ExternalTrainerSkills)
                    .HasForeignKey(d => d.IdExternalTrainer)
                    .HasConstraintName("FK_ExternalTrainerSkills_ExternalTrainer");

                entity.HasOne(d => d.IdSkillsNavigation)
                    .WithMany(p => p.ExternalTrainerSkills)
                    .HasForeignKey(d => d.IdSkills)
                    .HasConstraintName("FK_ExternalTrainerSkills_Skills");
            });

            modelBuilder.Entity<ExternalTraining>(entity =>
            {
                entity.ToTable("ExternalTraining", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdExternalTrainerNavigation)
                    .WithMany(p => p.ExternalTraining)
                    .HasForeignKey(d => d.IdExternalTrainer)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExternalTraining_ExternalTrainer");

                entity.HasOne(d => d.IdTrainingCenterRoomNavigation)
                    .WithMany(p => p.ExternalTraining)
                    .HasForeignKey(d => d.IdTrainingCenterRoom)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ExternalTraining_TrainingCenterRoom");

                entity.HasOne(d => d.IdTrainingSessionNavigation)
                    .WithMany(p => p.ExternalTraining)
                    .HasForeignKey(d => d.IdTrainingSession)
                    .HasConstraintName("FK_ExternalTraining_TrainingSession");
            });

            modelBuilder.Entity<Family>(entity =>
            {
                entity.ToTable("Family", "Inventory");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(250);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UrlPicture).HasMaxLength(255);
            });

            modelBuilder.Entity<FileDrive>(entity =>
            {
                entity.ToTable("FileDrive", "RH");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Path)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Type).HasMaxLength(255);

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.FileDrive)
                    .HasForeignKey(d => d.CreatedBy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FileDrive_User");

                entity.HasOne(d => d.IdParentNavigation)
                    .WithMany(p => p.InverseIdParentNavigation)
                    .HasForeignKey(d => d.IdParent)
                    .HasConstraintName("FK_FileDrive_FileDrive");
            });

            modelBuilder.Entity<FileDriveSharedDocument>(entity =>
            {
                entity.ToTable("FileDriveSharedDocument", "RH");

                entity.Property(e => e.AttachmentUrl)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.SharingDate).HasColumnType("datetime");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.FileDriveSharedDocument)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FileDriveSharedDocument_Employee");

                entity.HasOne(d => d.TransactionUser)
                    .WithMany(p => p.FileDriveSharedDocument)
                    .HasForeignKey(d => d.TransactionUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FileDriveSharedDocument_User");
            });

            modelBuilder.Entity<FinancialCommitment>(entity =>
            {
                entity.ToTable("FinancialCommitment", "Sales");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.CommitmentDate).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.FinancialCommitmentDate).HasColumnType("date");

                entity.HasOne(d => d.IdCurrencyNavigation)
                    .WithMany(p => p.FinancialCommitment)
                    .HasForeignKey(d => d.IdCurrency)
                    .HasConstraintName("FK_FinancialCommitment_Currency");

                entity.HasOne(d => d.IdDocumentNavigation)
                    .WithMany(p => p.FinancialCommitment)
                    .HasForeignKey(d => d.IdDocument)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_FinancialCommitment_Document");

                entity.HasOne(d => d.IdPaymentMethodNavigation)
                    .WithMany(p => p.FinancialCommitment)
                    .HasForeignKey(d => d.IdPaymentMethod)
                    .HasConstraintName("FK_FinancialCommitment_PaymentMethod");

                entity.HasOne(d => d.IdStatusNavigation)
                    .WithMany(p => p.FinancialCommitment)
                    .HasForeignKey(d => d.IdStatus)
                    .HasConstraintName("FK_FinancialCommitment_DocumentStatus");

                entity.HasOne(d => d.IdTiersNavigation)
                    .WithMany(p => p.FinancialCommitment)
                    .HasForeignKey(d => d.IdTiers)
                    .HasConstraintName("FK_FinancialCommitment_Tiers");
            });

            modelBuilder.Entity<Formation>(entity =>
            {
                entity.ToTable("Formation", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.HasOne(d => d.IdFormationTypeNavigation)
                    .WithMany(p => p.Formation)
                    .HasForeignKey(d => d.IdFormationType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Formation_FormationType");
            });

            modelBuilder.Entity<FormationType>(entity =>
            {
                entity.ToTable("FormationType", "RH");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(50);

                entity.Property(e => e.TransactionUserId).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Functionality>(entity =>
            {
                entity.HasKey(e => e.IdFunctionality)
                    .HasName("PK_Functionality_1");

                entity.ToTable("Functionality", "ERPSettings");

                entity.HasComment("This table contains all the features existing in our ERP (Ajouter_Article, Edit_Article, List_Article, Confirm_Article....)");

                entity.HasIndex(e => e.FunctionalityName, "AK_FunctionalityName_Unique")
                    .IsUnique();

                entity.Property(e => e.IdFunctionality)
                    .HasDefaultValueSql("(newid())")
                    .HasComment("Unique identifier of Functionaity table");

                entity.Property(e => e.ApiRole).HasMaxLength(50);

                entity.Property(e => e.Ar)
                    .HasMaxLength(500)
                    .HasColumnName("AR")
                    .HasComment("Description of the name modulates in Arabic language ");

                entity.Property(e => e.Ch)
                    .HasMaxLength(500)
                    .HasColumnName("CH")
                    .HasComment("Description of the name modulates in Chine language ");

                entity.Property(e => e.De)
                    .HasMaxLength(500)
                    .HasColumnName("DE")
                    .HasComment("Description of the name modulates in Deutsche language ");

                entity.Property(e => e.DefaultRoute).HasMaxLength(255);

                entity.Property(e => e.En)
                    .HasMaxLength(500)
                    .HasColumnName("EN")
                    .HasComment("Description of the name modulates in English language ");

                entity.Property(e => e.Es)
                    .HasMaxLength(500)
                    .HasColumnName("ES")
                    .HasComment("Description of the name modulates in Spanich language ");

                entity.Property(e => e.Fr)
                    .HasMaxLength(500)
                    .HasColumnName("FR")
                    .HasComment("Description of the name modulates in Drench language ");

                entity.Property(e => e.FunctionalityName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("Name of Functionality ");

                entity.Property(e => e.IdRequestType).HasComment("Foreign key on the table RequestType (Contains every type of the features)");

                entity.Property(e => e.IsDefaultRoute).HasColumnName("isDefaultRoute");

                entity.HasOne(d => d.IdRequestTypeNavigation)
                    .WithMany(p => p.Functionality)
                    .HasForeignKey(d => d.IdRequestType)
                    .HasConstraintName("FK_Functionality_RequestType");
            });

            modelBuilder.Entity<FundsTransfer>(entity =>
            {
                entity.ToTable("FundsTransfer", "Payment");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.TransferDate).HasColumnType("datetime");

                entity.HasOne(d => d.IdCashierNavigation)
                    .WithMany(p => p.FundsTransfer)
                    .HasForeignKey(d => d.IdCashier)
                    .HasConstraintName("FK_FundsTransfer_Cashier");

                entity.HasOne(d => d.IdCurrencyNavigation)
                    .WithMany(p => p.FundsTransfer)
                    .HasForeignKey(d => d.IdCurrency)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FundsTransfer_Currency");

                entity.HasOne(d => d.IdDestinationCashNavigation)
                    .WithMany(p => p.FundsTransferIdDestinationCashNavigation)
                    .HasForeignKey(d => d.IdDestinationCash)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FundsTransfer_DestinationCashRegister");

                entity.HasOne(d => d.IdSourceCashNavigation)
                    .WithMany(p => p.FundsTransferIdSourceCashNavigation)
                    .HasForeignKey(d => d.IdSourceCash)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FundsTransfer_SourceCashRegister");
            });

            modelBuilder.Entity<GeneralSettings>(entity =>
            {
                entity.ToTable("GeneralSettings", "Shared");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Field).HasMaxLength(255);

                entity.Property(e => e.Keys).HasMaxLength(255);

                entity.Property(e => e.Value).HasMaxLength(255);
            });

            modelBuilder.Entity<Grade>(entity =>
            {
                entity.ToTable("Grade", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Designation)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<History>(entity =>
            {
                entity.ToTable("History", "Immobilisation");

                entity.Property(e => e.AbandonmentDate).HasColumnType("date");

                entity.Property(e => e.AcquisationDate).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(50)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdActiveNavigation)
                    .WithMany(p => p.History)
                    .HasForeignKey(d => d.IdActive)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_History_Active");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.History)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_History_Employee");
            });

            modelBuilder.Entity<Hours>(entity =>
            {
                entity.ToTable("Hours", "Shared");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.IdPeriodNavigation)
                    .WithMany(p => p.Hours)
                    .HasForeignKey(d => d.IdPeriod)
                    .HasConstraintName("FK_Hours_Period");
            });

            modelBuilder.Entity<Information>(entity =>
            {
                entity.HasKey(e => e.IdInfo);

                entity.ToTable("Information", "ERPSettings");

                entity.Property(e => e.Ar)
                    .HasMaxLength(500)
                    .HasColumnName("AR");

                entity.Property(e => e.Ch)
                    .HasMaxLength(500)
                    .HasColumnName("CH");

                entity.Property(e => e.De)
                    .HasMaxLength(500)
                    .HasColumnName("DE");

                entity.Property(e => e.En)
                    .HasMaxLength(500)
                    .HasColumnName("EN");

                entity.Property(e => e.Es)
                    .HasMaxLength(500)
                    .HasColumnName("ES");

                entity.Property(e => e.Fr)
                    .HasMaxLength(500)
                    .HasColumnName("FR");

                entity.Property(e => e.IsAcceptedInfo).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsMail).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsNotification).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsToManager).HasDefaultValueSql("((0))");

                entity.Property(e => e.MailSubject).HasMaxLength(500);

                entity.Property(e => e.TranslationKey).HasMaxLength(500);

                entity.Property(e => e.Type).HasMaxLength(500);

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("URL");
                entity.HasOne(d => d.IdFunctionalityNavigation)
                                    .WithMany(p => p.Information)
                                    .HasForeignKey(d => d.IdFunctionality)
                                    .OnDelete(DeleteBehavior.ClientSetNull)
                                    .HasConstraintName("FK_Information_Functionality");



                entity.HasOne(d => d.IdInfoParentNavigation)
                    .WithMany(p => p.InverseIdInfoParentNavigation)
                    .HasForeignKey(d => d.IdInfoParent)
                    .HasConstraintName("FK_Information_Information");
            });

            modelBuilder.Entity<Interview>(entity =>
            {
                entity.ToTable("Interview", "RH");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.InterviewDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");

                entity.Property(e => e.Token).HasMaxLength(255);

                entity.HasOne(d => d.IdCandidacyNavigation)
                    .WithMany(p => p.Interview)
                    .HasForeignKey(d => d.IdCandidacy)
                    .HasConstraintName("FK_Interview_Candidacy");

                entity.HasOne(d => d.IdCreatorNavigation)
                    .WithMany(p => p.InterviewIdCreatorNavigation)
                    .HasForeignKey(d => d.IdCreator)
                    .HasConstraintName("FK_Interview_Creator");

                entity.HasOne(d => d.IdEmailNavigation)
                    .WithMany(p => p.Interview)
                    .HasForeignKey(d => d.IdEmail)
                    .HasConstraintName("FK_Interview_Email");

                entity.HasOne(d => d.IdExitEmployeeNavigation)
                    .WithMany(p => p.Interview)
                    .HasForeignKey(d => d.IdExitEmployee)
                    .HasConstraintName("FK_Interview_ExitEmployee");

                entity.HasOne(d => d.IdInterviewTypeNavigation)
                    .WithMany(p => p.Interview)
                    .HasForeignKey(d => d.IdInterviewType)
                    .HasConstraintName("FK_Interview_InterviewType");

                entity.HasOne(d => d.IdReviewNavigation)
                    .WithMany(p => p.Interview)
                    .HasForeignKey(d => d.IdReview)
                    .HasConstraintName("FK_Interview_Review");

                entity.HasOne(d => d.IdSupervisorNavigation)
                    .WithMany(p => p.InterviewIdSupervisorNavigation)
                    .HasForeignKey(d => d.IdSupervisor)
                    .HasConstraintName("FK_Interview_Employee");
            });

            modelBuilder.Entity<InterviewEmail>(entity =>
            {
                entity.ToTable("InterviewEmail", "RH");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdEmailNavigation)
                    .WithMany(p => p.InterviewEmail)
                    .HasForeignKey(d => d.IdEmail)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InterviewEmail_Email");

                entity.HasOne(d => d.IdInterviewNavigation)
                    .WithMany(p => p.InterviewEmail)
                    .HasForeignKey(d => d.IdInterview)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InterviewEmail_Interview");
            });

            modelBuilder.Entity<InterviewMark>(entity =>
            {
                entity.ToTable("InterviewMark", "RH");

                entity.HasIndex(e => new { e.IdEmployee, e.IdInterview, e.DeletedToken }, "UC_Employee_Interview")
                    .IsUnique();

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");

                entity.Property(e => e.StrongPoints).HasMaxLength(255);

                entity.Property(e => e.Weaknesses).HasMaxLength(255);

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.InterviewMark)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InterviewMark_Employee");

                entity.HasOne(d => d.IdInterviewNavigation)
                    .WithMany(p => p.InterviewMark)
                    .HasForeignKey(d => d.IdInterview)
                    .HasConstraintName("FK_InterviewMark_Interview");
            });

            modelBuilder.Entity<InterviewQuestion>(entity =>
            {
                entity.ToTable("InterviewQuestion", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Question).IsRequired();

                entity.HasOne(d => d.IdThemeNavigation)
                    .WithMany(p => p.InterviewQuestion)
                    .HasForeignKey(d => d.IdTheme)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InterviewQuestion_InterviewQuestionTheme");
            });

            modelBuilder.Entity<InterviewQuestionTheme>(entity =>
            {
                entity.ToTable("InterviewQuestionTheme", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Theme)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<InterviewType>(entity =>
            {
                entity.ToTable("InterviewType", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TransactionUserId).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Item>(entity =>
            {
                entity.ToTable("Item", "Inventory");

                entity.HasIndex(e => new { e.Id, e.Code, e.IdNature }, "index_name");

                entity.Property(e => e.BarCode1D).HasMaxLength(255);

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DefaultUnitHtpurchasePrice).HasColumnName("DefaultUnitHTPurchasePrice");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.IsForPurchase)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsForSales)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.LastUpdateEcommerce)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.TecDocRef).HasMaxLength(50);

                entity.Property(e => e.Tvarate).HasColumnName("TVARate");

                entity.Property(e => e.UnitHtpurchasePrice).HasColumnName("UnitHTPurchasePrice");

                entity.Property(e => e.UnitHtsalePrice).HasColumnName("UnitHTSalePrice");

                entity.Property(e => e.UnitTtcpurchasePrice).HasColumnName("UnitTTCPurchasePrice");

                entity.Property(e => e.UnitTtcsalePrice).HasColumnName("UnitTTCSalePrice");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UrlPicture).HasMaxLength(255);

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.Item)
                    .HasForeignKey(d => d.IdEmployee)
                    .HasConstraintName("FK_Item_Employee");

                entity.HasOne(d => d.IdFamilyNavigation)
                    .WithMany(p => p.Item)
                    .HasForeignKey(d => d.IdFamily)
                    .HasConstraintName("FK_Item_Family");

                entity.HasOne(d => d.IdItemReplacementNavigation)
                    .WithMany(p => p.InverseIdItemReplacementNavigation)
                    .HasForeignKey(d => d.IdItemReplacement)
                    .HasConstraintName("FK_Item_Item");

                entity.HasOne(d => d.IdNatureNavigation)
                    .WithMany(p => p.Item)
                    .HasForeignKey(d => d.IdNature)
                    .HasConstraintName("FK_Item_Nature");

                entity.HasOne(d => d.IdProductItemNavigation)
                    .WithMany(p => p.Item)
                    .HasForeignKey(d => d.IdProductItem)
                    .HasConstraintName("FK_Item_ProductItem");

                entity.HasOne(d => d.IdSubFamilyNavigation)
                    .WithMany(p => p.Item)
                    .HasForeignKey(d => d.IdSubFamily)
                    .HasConstraintName("FK_Item_SubFamily");

                entity.HasOne(d => d.IdUnitSalesNavigation)
                    .WithMany(p => p.ItemIdUnitSalesNavigation)
                    .HasForeignKey(d => d.IdUnitSales)
                    .HasConstraintName("FK_Item_UnitType");

                entity.HasOne(d => d.IdUnitStockNavigation)
                    .WithMany(p => p.ItemIdUnitStockNavigation)
                    .HasForeignKey(d => d.IdUnitStock)
                    .HasConstraintName("FK_Item_UnitType1");
            });

            modelBuilder.Entity<ItemKit>(entity =>
            {
                entity.ToTable("ItemKit", "Inventory");

                entity.HasOne(d => d.IdItemNavigation)
                    .WithMany(p => p.ItemKitIdItemNavigation)
                    .HasForeignKey(d => d.IdItem)
                    .HasConstraintName("FK_ItemKit_Item1");

                entity.HasOne(d => d.IdKitNavigation)
                    .WithMany(p => p.ItemKitIdKitNavigation)
                    .HasForeignKey(d => d.IdKit)
                    .HasConstraintName("FK_ItemKit_Item");
            });

            modelBuilder.Entity<ItemPrices>(entity =>
            {
                entity.ToTable("ItemPrices", "Inventory");

                entity.HasIndex(e => new { e.IdItem, e.IdPrices, e.DeletedToken }, "IX_ItemPrices")
                    .IsUnique();

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdItemNavigation)
                    .WithMany(p => p.ItemPrices)
                    .HasForeignKey(d => d.IdItem)
                    .HasConstraintName("FK_ItemPrices_ItemPrices");

                entity.HasOne(d => d.IdPricesNavigation)
                    .WithMany(p => p.ItemPrices)
                    .HasForeignKey(d => d.IdPrices)
                    .HasConstraintName("FK_ItemPrices_Prices");
            });

            modelBuilder.Entity<ItemSalesPrice>(entity =>
            {
                entity.ToTable("ItemSalesPrice", "Inventory");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(250)
                    .IsFixedLength(true);

                entity.HasOne(d => d.IdItemNavigation)
                    .WithMany(p => p.ItemSalesPrice)
                    .HasForeignKey(d => d.IdItem)
                    .HasConstraintName("FK_ItemSalesPrice_Item");

                entity.HasOne(d => d.IdSalesPriceNavigation)
                    .WithMany(p => p.ItemSalesPrice)
                    .HasForeignKey(d => d.IdSalesPrice)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemSalesPrice_SalesPrice");
            });

            modelBuilder.Entity<ItemTiers>(entity =>
            {
                entity.ToTable("ItemTiers", "Inventory");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(250)
                    .IsFixedLength(true);

                entity.HasOne(d => d.IdItemNavigation)
                    .WithMany(p => p.ItemTiers)
                    .HasForeignKey(d => d.IdItem)
                    .HasConstraintName("FK_ItemTiers_Item");

                entity.HasOne(d => d.IdTiersNavigation)
                    .WithMany(p => p.ItemTiers)
                    .HasForeignKey(d => d.IdTiers)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemTiers_Tiers");
            });

            modelBuilder.Entity<ItemVehicleBrandModelSubModel>(entity =>
            {
                entity.ToTable("ItemVehicleBrandModelSubModel", "Inventory");

                entity.HasOne(d => d.IdItemNavigation)
                    .WithMany(p => p.ItemVehicleBrandModelSubModel)
                    .HasForeignKey(d => d.IdItem)
                    .HasConstraintName("FK_ItemVehicleBrandModelSubModel_Item");

                entity.HasOne(d => d.IdModelNavigation)
                    .WithMany(p => p.ItemVehicleBrandModelSubModel)
                    .HasForeignKey(d => d.IdModel)
                    .HasConstraintName("FK_ItemVehicleBrandModelSubModel_ModelOfItem");

                entity.HasOne(d => d.IdSubModelNavigation)
                    .WithMany(p => p.ItemVehicleBrandModelSubModel)
                    .HasForeignKey(d => d.IdSubModel)
                    .HasConstraintName("FK_ItemVehicleBrandModelSubModel_SubModel");

                entity.HasOne(d => d.IdVehicleBrandNavigation)
                    .WithMany(p => p.ItemVehicleBrandModelSubModel)
                    .HasForeignKey(d => d.IdVehicleBrand)
                    .HasConstraintName("FK_ItemVehicleBrandModelSubModel_VehicleBrand");
            });

            modelBuilder.Entity<ItemWarehouse>(entity =>
            {
                entity.ToTable("ItemWarehouse", "Inventory");

                entity.HasIndex(e => new { e.IdItem, e.IdWarehouse, e.DeletedToken }, "unique_ItemWarehouse_IdItemAndIdWarehouse")
                    .IsUnique();

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Shelf).HasMaxLength(50);

                entity.Property(e => e.Storage).HasMaxLength(50);

                entity.HasOne(d => d.IdItemNavigation)
                    .WithMany(p => p.ItemWarehouse)
                    .HasForeignKey(d => d.IdItem)
                    .HasConstraintName("FK_ItemWarehouse_Item");

                entity.HasOne(d => d.IdShelfNavigation)
                    .WithMany(p => p.ItemWarehouse)
                    .HasForeignKey(d => d.IdShelf)
                    .HasConstraintName("FK_ItemWarehouse_Shelf");

                entity.HasOne(d => d.IdStorageNavigation)
                    .WithMany(p => p.ItemWarehouse)
                    .HasForeignKey(d => d.IdStorage)
                    .HasConstraintName("FK_ItemWarehouse_Storage");

                entity.HasOne(d => d.IdWarehouseNavigation)
                    .WithMany(p => p.ItemWarehouse)
                    .HasForeignKey(d => d.IdWarehouse)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ItemWarehouse_Warehouse");
            });

            modelBuilder.Entity<Job>(entity =>
            {
                entity.ToTable("Job", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Designation)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.IdUpperJobNavigation)
                    .WithMany(p => p.InverseIdUpperJobNavigation)
                    .HasForeignKey(d => d.IdUpperJob)
                    .HasConstraintName("FK_Job_Job");
            });

            modelBuilder.Entity<JobEmployee>(entity =>
            {
                entity.ToTable("JobEmployee", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.JobEmployee)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_JobEmployee_Employee");

                entity.HasOne(d => d.IdJobNavigation)
                    .WithMany(p => p.JobEmployee)
                    .HasForeignKey(d => d.IdJob)
                    .HasConstraintName("FK_JobEmployee_Job");
            });

            modelBuilder.Entity<JobSkills>(entity =>
            {
                entity.ToTable("JobSkills", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdJobNavigation)
                    .WithMany(p => p.JobSkills)
                    .HasForeignKey(d => d.IdJob)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JobSkills_Job");

                entity.HasOne(d => d.IdSkillNavigation)
                    .WithMany(p => p.JobSkills)
                    .HasForeignKey(d => d.IdSkill)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JobSkills_Skills");
            });

            modelBuilder.Entity<JobTable>(entity =>
            {
                entity.ToTable("JobTable", "Ecommerce");

                entity.Property(e => e.LastExecuteDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(datetimefromparts(datepart(year,getutcdate()),datepart(month,getutcdate()),datepart(day,getutcdate()),(0),(0),(0),(0)))");

                entity.Property(e => e.NextExecuteDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(dateadd(day,(1),datetimefromparts(datepart(year,getutcdate()),datepart(month,getutcdate()),datepart(day,getutcdate()),(0),(0),(0),(0))))");
            });

            modelBuilder.Entity<JobsParameter>(entity =>
            {
                entity.ToTable("JobsParameter", "Shared");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Field).HasMaxLength(255);

                entity.Property(e => e.Keys).HasMaxLength(255);

                entity.Property(e => e.Value).HasMaxLength(255);
            });

            modelBuilder.Entity<Language>(entity =>
            {
                entity.ToTable("Language", "Shared");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Name).HasMaxLength(100);
            });

            modelBuilder.Entity<Leave>(entity =>
            {
                entity.ToTable("Leave", "Payroll");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.LeaveAttachementFile).HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.TreatmentDate).HasColumnType("date");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.LeaveIdEmployeeNavigation)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Leave_Employee");

                entity.HasOne(d => d.IdLeaveTypeNavigation)
                    .WithMany(p => p.Leave)
                    .HasForeignKey(d => d.IdLeaveType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Leave_LeaveType");

                entity.HasOne(d => d.TreatedByNavigation)
                    .WithMany(p => p.LeaveTreatedByNavigation)
                    .HasForeignKey(d => d.TreatedBy)
                    .HasConstraintName("FK_Leave_Superior");
            });

            modelBuilder.Entity<LeaveBalanceRemaining>(entity =>
            {
                entity.ToTable("LeaveBalanceRemaining", "Payroll");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.LeaveBalanceRemaining)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LeaveBalanceRemaining_Employee");

                entity.HasOne(d => d.IdLeaveTypeNavigation)
                    .WithMany(p => p.LeaveBalanceRemaining)
                    .HasForeignKey(d => d.IdLeaveType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LeaveBalanceRemaining_LeaveType");
            });

            modelBuilder.Entity<LeaveEmail>(entity =>
            {
                entity.ToTable("LeaveEmail", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdEmailNavigation)
                    .WithMany(p => p.LeaveEmail)
                    .HasForeignKey(d => d.IdEmail)
                    .HasConstraintName("FK_Mail");

                entity.HasOne(d => d.IdLeaveNavigation)
                    .WithMany(p => p.LeaveEmail)
                    .HasForeignKey(d => d.IdLeave)
                    .HasConstraintName("FK_Leave");
            });

            modelBuilder.Entity<LeaveType>(entity =>
            {
                entity.ToTable("LeaveType", "Payroll");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.ExpiryDate).HasColumnType("date");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.MaximumNumberOfDays).HasDefaultValueSql("((1))");

                entity.Property(e => e.Period).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Loan>(entity =>
            {
                entity.ToTable("Loan", "Payroll");

                entity.Property(e => e.ApprouvementDate).HasColumnType("date");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.DisbursementDate).HasColumnType("date");

                entity.Property(e => e.LoanAttachementFile).HasMaxLength(500);

                entity.Property(e => e.ObtainingDate).HasColumnType("date");

                entity.Property(e => e.Reason).HasMaxLength(500);

                entity.Property(e => e.RefundStartDate).HasColumnType("date");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.Loan)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Loan_Employee");
            });

            modelBuilder.Entity<LoanInstallment>(entity =>
            {
                entity.ToTable("LoanInstallment", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Month).HasColumnType("date");

                entity.HasOne(d => d.IdLoanNavigation)
                    .WithMany(p => p.LoanInstallment)
                    .HasForeignKey(d => d.IdLoan)
                    .HasConstraintName("FK_LoanInstallment_Loan");
            });

            modelBuilder.Entity<Log>(entity =>
            {
                entity.HasKey(e => e.IdDbrequest);

                entity.ToTable("Log", "ERPSettings");

                entity.Property(e => e.IdDbrequest).HasColumnName("IdDBRequest");

                entity.Property(e => e.DateOfRequest).HasColumnType("datetime");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.LogBit1).HasColumnName("Log_bit_1");

                entity.Property(e => e.LogBit10).HasColumnName("Log_bit_10");

                entity.Property(e => e.LogBit2).HasColumnName("Log_bit_2");

                entity.Property(e => e.LogBit3).HasColumnName("Log_bit_3");

                entity.Property(e => e.LogBit4).HasColumnName("Log_bit_4");

                entity.Property(e => e.LogBit5).HasColumnName("Log_bit_5");

                entity.Property(e => e.LogBit6).HasColumnName("Log_bit_6");

                entity.Property(e => e.LogBit7).HasColumnName("Log_bit_7");

                entity.Property(e => e.LogBit8).HasColumnName("Log_bit_8");

                entity.Property(e => e.LogBit9).HasColumnName("Log_bit_9");

                entity.Property(e => e.LogDate1)
                    .HasColumnType("date")
                    .HasColumnName("Log_date_1");

                entity.Property(e => e.LogDate10)
                    .HasColumnType("date")
                    .HasColumnName("Log_date_10");

                entity.Property(e => e.LogDate2)
                    .HasColumnType("date")
                    .HasColumnName("Log_date_2");

                entity.Property(e => e.LogDate3)
                    .HasColumnType("date")
                    .HasColumnName("Log_date_3");

                entity.Property(e => e.LogDate4)
                    .HasColumnType("date")
                    .HasColumnName("Log_date_4");

                entity.Property(e => e.LogDate5)
                    .HasColumnType("date")
                    .HasColumnName("Log_date_5");

                entity.Property(e => e.LogDate6)
                    .HasColumnType("date")
                    .HasColumnName("Log_date_6");

                entity.Property(e => e.LogDate7)
                    .HasColumnType("date")
                    .HasColumnName("Log_date_7");

                entity.Property(e => e.LogDate8)
                    .HasColumnType("date")
                    .HasColumnName("Log_date_8");

                entity.Property(e => e.LogDate9)
                    .HasColumnType("date")
                    .HasColumnName("Log_date_9");

                entity.Property(e => e.LogFloat1).HasColumnName("Log_float_1");

                entity.Property(e => e.LogFloat10).HasColumnName("Log_float_10");

                entity.Property(e => e.LogFloat2).HasColumnName("Log_float_2");

                entity.Property(e => e.LogFloat3).HasColumnName("Log_float_3");

                entity.Property(e => e.LogFloat4).HasColumnName("Log_float_4");

                entity.Property(e => e.LogFloat5).HasColumnName("Log_float_5");

                entity.Property(e => e.LogFloat6).HasColumnName("Log_float_6");

                entity.Property(e => e.LogFloat7).HasColumnName("Log_float_7");

                entity.Property(e => e.LogFloat8).HasColumnName("Log_float_8");

                entity.Property(e => e.LogFloat9).HasColumnName("Log_float_9");

                entity.Property(e => e.LogInt1).HasColumnName("Log_int_1");

                entity.Property(e => e.LogInt10).HasColumnName("Log_int_10");

                entity.Property(e => e.LogInt2).HasColumnName("Log_int_2");

                entity.Property(e => e.LogInt3).HasColumnName("Log_int_3");

                entity.Property(e => e.LogInt4).HasColumnName("Log_int_4");

                entity.Property(e => e.LogInt5).HasColumnName("Log_int_5");

                entity.Property(e => e.LogInt6).HasColumnName("Log_int_6");

                entity.Property(e => e.LogInt7).HasColumnName("Log_int_7");

                entity.Property(e => e.LogInt8).HasColumnName("Log_int_8");

                entity.Property(e => e.LogInt9).HasColumnName("Log_int_9");

                entity.Property(e => e.LogVarchar1)
                    .IsUnicode(false)
                    .HasColumnName("Log_varchar_1");

                entity.Property(e => e.LogVarchar10)
                    .IsUnicode(false)
                    .HasColumnName("Log_varchar_10");

                entity.Property(e => e.LogVarchar2)
                    .IsUnicode(false)
                    .HasColumnName("Log_varchar_2");

                entity.Property(e => e.LogVarchar3)
                    .IsUnicode(false)
                    .HasColumnName("Log_varchar_3");

                entity.Property(e => e.LogVarchar4)
                    .IsUnicode(false)
                    .HasColumnName("Log_varchar_4");

                entity.Property(e => e.LogVarchar5)
                    .IsUnicode(false)
                    .HasColumnName("Log_varchar_5");

                entity.Property(e => e.LogVarchar6)
                    .IsUnicode(false)
                    .HasColumnName("Log_varchar_6");

                entity.Property(e => e.LogVarchar7)
                    .IsUnicode(false)
                    .HasColumnName("Log_varchar_7");

                entity.Property(e => e.LogVarchar8)
                    .IsUnicode(false)
                    .HasColumnName("Log_varchar_8");

                entity.Property(e => e.LogVarchar9)
                    .IsUnicode(false)
                    .HasColumnName("Log_varchar_9");

                entity.Property(e => e.Object).HasColumnType("xml");

                entity.Property(e => e.RequestName).HasMaxLength(50);
            });

            modelBuilder.Entity<Logs>(entity =>
            {
                entity.ToTable("Logs", "ERPSettings");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Level).HasMaxLength(128);

                entity.Property(e => e.Properties).HasColumnType("xml");
            });

            modelBuilder.Entity<MeasureUnit>(entity =>
            {
                entity.ToTable("MeasureUnit", "Inventory");

                entity.HasIndex(e => new { e.DeletedToken, e.MeasureUnitCode }, "UniqueCodeMeasureUnit")
                    .IsUnique();

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(255);

                entity.Property(e => e.MeasureUnitCode).HasMaxLength(255);
            });

            modelBuilder.Entity<Message>(entity =>
            {
                entity.ToTable("Message", "ERPSettings");

                entity.Property(e => e.CodeEntity).IsUnicode(false);

                entity.Property(e => e.TypeMessage).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdInformationNavigation)
                    .WithMany(p => p.Message)
                    .HasForeignKey(d => d.IdInformation)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Information_Message");
            });

            modelBuilder.Entity<MessageChat>(entity =>
            {
                entity.ToTable("MessageChat", "ERPSettings");

                entity.Property(e => e.AttachedFilesLink)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("attachedFilesLink");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasColumnName("date");

                entity.Property(e => e.Text)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("text");

                entity.HasOne(d => d.IdUserDiscussionNavigation)
                    .WithMany(p => p.MessageChat)
                    .HasForeignKey(d => d.IdUserDiscussion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MessageChat_UserDiscussionChat");
            });

            modelBuilder.Entity<MobilityRequest>(entity =>
            {
                entity.ToTable("MobilityRequest", "RH");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.DesiredMobilityDate).HasColumnType("datetime");

                entity.Property(e => e.EffectifMobilityDate).HasColumnType("datetime");

                entity.HasOne(d => d.IdCreationUserNavigation)
                    .WithMany(p => p.MobilityRequest)
                    .HasForeignKey(d => d.IdCreationUser)
                    .HasConstraintName("FK_MobilityOffice_User");

                entity.HasOne(d => d.IdCurrentOfficeNavigation)
                    .WithMany(p => p.MobilityRequestIdCurrentOfficeNavigation)
                    .HasForeignKey(d => d.IdCurrentOffice)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MobilityOffice_CurrentOffice");

                entity.HasOne(d => d.IdDestinationOfficeNavigation)
                    .WithMany(p => p.MobilityRequestIdDestinationOfficeNavigation)
                    .HasForeignKey(d => d.IdDestinationOffice)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MobilityOffice_DestinationOffice");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.MobilityRequest)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MobilityRequest_Employee");
            });

            modelBuilder.Entity<ModelOfItem>(entity =>
            {
                entity.ToTable("ModelOfItem", "Inventory");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(250);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UrlPicture).HasMaxLength(255);

                entity.HasOne(d => d.IdVehicleBrandNavigation)
                    .WithMany(p => p.ModelOfItem)
                    .HasForeignKey(d => d.IdVehicleBrand)
                    .HasConstraintName("FK_Model_Brand");
            });

            modelBuilder.Entity<MovementHistory>(entity =>
            {
                entity.ToTable("MovementHistory", "Inventory");

                entity.Property(e => e.CustomerCode).HasMaxLength(50);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DocumentType).HasMaxLength(50);

                entity.Property(e => e.FiscalYear).HasMaxLength(50);

                entity.Property(e => e.OrderNumber).HasMaxLength(50);

                entity.Property(e => e.Puht).HasColumnName("PUHT");

                entity.Property(e => e.Puht1).HasColumnName("PUHT1");

                entity.Property(e => e.SupplierCode).HasMaxLength(50);

                entity.HasOne(d => d.IdItemNavigation)
                    .WithMany(p => p.MovementHistory)
                    .HasForeignKey(d => d.IdItem)
                    .HasConstraintName("FK_MovementHistory_Item");
            });

            modelBuilder.Entity<MsgNotification>(entity =>
            {
                entity.ToTable("MsgNotification", "ERPSettings");

                entity.HasIndex(e => new { e.IdMsg, e.IdTargetedUser }, "UQ_MsgNotification")
                    .IsUnique();

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdMsgNavigation)
                    .WithMany(p => p.MsgNotification)
                    .HasForeignKey(d => d.IdMsg)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MsgNotification_Message");
            });

            modelBuilder.Entity<Nature>(entity =>
            {
                entity.ToTable("Nature", "Inventory");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(255);

                entity.Property(e => e.UrlPicture).HasMaxLength(255);
            });

            modelBuilder.Entity<NewUserEmail>(entity =>
            {
                entity.ToTable("NewUserEmail", "Shared");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdEmailNavigation)
                    .WithMany(p => p.NewUserEmail)
                    .HasForeignKey(d => d.IdEmail)
                    .HasConstraintName("FK_Mail");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.NewUserEmail)
                    .HasForeignKey(d => d.IdUser)
                    .HasConstraintName("FK_NewUserEmail");
            });

            modelBuilder.Entity<Note>(entity =>
            {
                entity.ToTable("Note", "Payroll");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.IdCreator).HasColumnName("idCreator");

                entity.Property(e => e.IdEmployee).HasColumnName("idEmployee");

                entity.Property(e => e.Mark).IsRequired();

                entity.HasOne(d => d.IdCreatorNavigation)
                    .WithMany(p => p.Note)
                    .HasForeignKey(d => d.IdCreator)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Note_IdCreator");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.Note)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Note_idEmployee");
            });

            modelBuilder.Entity<Notification>(entity =>
            {
                entity.HasKey(e => e.IdNotification);

                entity.ToTable("Notification", "ERPSettings");

                entity.Property(e => e.IdNotification).ValueGeneratedNever();

                entity.Property(e => e.Ar)
                    .HasMaxLength(500)
                    .HasColumnName("AR");

                entity.Property(e => e.Ch)
                    .HasMaxLength(500)
                    .HasColumnName("CH");

                entity.Property(e => e.De)
                    .HasMaxLength(500)
                    .HasColumnName("DE");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.En)
                    .HasMaxLength(500)
                    .HasColumnName("EN");

                entity.Property(e => e.Es)
                    .HasMaxLength(500)
                    .HasColumnName("ES");

                entity.Property(e => e.Fr)
                    .HasMaxLength(500)
                    .HasColumnName("FR");
            });

            modelBuilder.Entity<OauthAccessToken>(entity =>
            {
                entity.HasKey(e => e.AuthenticationId)
                    .HasName("PK__oauth_ac__7B2DE7F19DCCD0B1");

                entity.ToTable("oauth_access_token");

                entity.Property(e => e.AuthenticationId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("authentication_id");

                entity.Property(e => e.Authentication)
                    .HasColumnType("image")
                    .HasColumnName("authentication");

                entity.Property(e => e.ClientId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("client_id");

                entity.Property(e => e.RefreshToken)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("refresh_token");

                entity.Property(e => e.Token)
                    .HasColumnType("image")
                    .HasColumnName("token");

                entity.Property(e => e.TokenId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("token_id");

                entity.Property(e => e.UserName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("user_name");
            });

            modelBuilder.Entity<OauthClientDetails>(entity =>
            {
                entity.HasKey(e => e.ClientId)
                    .HasName("PK__oauth_cl__BF21A424D7BD573A");

                entity.ToTable("oauth_client_details");

                entity.Property(e => e.ClientId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("client_id");

                entity.Property(e => e.AccessTokenValidity).HasColumnName("access_token_validity");

                entity.Property(e => e.AdditionalInformation)
                    .HasMaxLength(4096)
                    .IsUnicode(false)
                    .HasColumnName("additional_information");

                entity.Property(e => e.Authorities)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("authorities");

                entity.Property(e => e.AuthorizedGrantTypes)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("authorized_grant_types");

                entity.Property(e => e.Autoapprove)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("autoapprove");

                entity.Property(e => e.ClientSecret)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("client_secret");

                entity.Property(e => e.RefreshTokenValidity).HasColumnName("refresh_token_validity");

                entity.Property(e => e.ResourceIds)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("resource_ids");

                entity.Property(e => e.Scope)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("scope");

                entity.Property(e => e.WebServerRedirectUri)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("web_server_redirect_uri");
            });

            modelBuilder.Entity<OauthClientToken>(entity =>
            {
                entity.HasKey(e => e.AuthenticationId)
                    .HasName("PK__oauth_cl__7B2DE7F1DAF0734C");

                entity.ToTable("oauth_client_token");

                entity.Property(e => e.AuthenticationId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("authentication_id");

                entity.Property(e => e.ClientId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("client_id");

                entity.Property(e => e.Token)
                    .HasColumnType("image")
                    .HasColumnName("token");

                entity.Property(e => e.TokenId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("token_id");

                entity.Property(e => e.UserName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("user_name");
            });

            modelBuilder.Entity<Objective>(entity =>
            {
                entity.ToTable("Objective", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.ExpectedDate).HasColumnType("date");

                entity.Property(e => e.Label).IsRequired();

                entity.Property(e => e.RealisationDate).HasColumnType("date");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.Objective)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Objective_Employee");

                entity.HasOne(d => d.IdReviewNavigation)
                    .WithMany(p => p.Objective)
                    .HasForeignKey(d => d.IdReview)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Objective_Review");
            });

            modelBuilder.Entity<Oem>(entity =>
            {
                entity.ToTable("Oem", "Inventory");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.OemCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<OemItem>(entity =>
            {
                entity.ToTable("OemItem", "Inventory");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.OemNumber)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.OemNumberModified).HasMaxLength(20);

                entity.HasOne(d => d.IdBrandNavigation)
                    .WithMany(p => p.OemItem)
                    .HasForeignKey(d => d.IdBrand)
                    .HasConstraintName("FK_OemItem_VehicleBrand");

                entity.HasOne(d => d.IdItemNavigation)
                    .WithMany(p => p.OemItem)
                    .HasForeignKey(d => d.IdItem)
                    .HasConstraintName("FK_OemItem_Item");
            });

            modelBuilder.Entity<Offer>(entity =>
            {
                entity.ToTable("Offer", "RH");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.SendingDate).HasColumnType("date");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.Token).HasMaxLength(255);

                entity.HasOne(d => d.IdCandidacyNavigation)
                    .WithMany(p => p.Offer)
                    .HasForeignKey(d => d.IdCandidacy)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Offer_Candidacy");

                entity.HasOne(d => d.IdCnssNavigation)
                    .WithMany(p => p.Offer)
                    .HasForeignKey(d => d.IdCnss)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Offer_Cnss");

                entity.HasOne(d => d.IdContractTypeNavigation)
                    .WithMany(p => p.Offer)
                    .HasForeignKey(d => d.IdContractType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Offer_ContractType");

                entity.HasOne(d => d.IdEmailNavigation)
                    .WithMany(p => p.Offer)
                    .HasForeignKey(d => d.IdEmail)
                    .HasConstraintName("FK_Offer_Email");

                entity.HasOne(d => d.IdSalaryStructureNavigation)
                    .WithMany(p => p.Offer)
                    .HasForeignKey(d => d.IdSalaryStructure)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Offer_SalaryStructure");
            });

            modelBuilder.Entity<OfferBenefitInKind>(entity =>
            {
                entity.ToTable("OfferBenefitInKind", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.ValidityEndDate).HasColumnType("date");

                entity.Property(e => e.ValidityStartDate).HasColumnType("date");

                entity.HasOne(d => d.IdBenefitInKindNavigation)
                    .WithMany(p => p.OfferBenefitInKind)
                    .HasForeignKey(d => d.IdBenefitInKind)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OfferBenefitInKind_BenefitInKind");

                entity.HasOne(d => d.IdOfferNavigation)
                    .WithMany(p => p.OfferBenefitInKind)
                    .HasForeignKey(d => d.IdOffer)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OfferBenefitInKind_Offer");
            });

            modelBuilder.Entity<OfferBonus>(entity =>
            {
                entity.ToTable("OfferBonus", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.ValidityEndDate).HasColumnType("date");

                entity.Property(e => e.ValidityStartDate).HasColumnType("date");

                entity.HasOne(d => d.IdBonusNavigation)
                    .WithMany(p => p.OfferBonus)
                    .HasForeignKey(d => d.IdBonus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OfferBonus_Bonus");

                entity.HasOne(d => d.IdOfferNavigation)
                    .WithMany(p => p.OfferBonus)
                    .HasForeignKey(d => d.IdOffer)
                    .HasConstraintName("FK_OfferBonus_Offer");
            });

            modelBuilder.Entity<Office>(entity =>
            {
                entity.ToTable("Office", "Shared");

                entity.Property(e => e.AddressLine1).HasMaxLength(255);

                entity.Property(e => e.AddressLine2).HasMaxLength(255);

                entity.Property(e => e.AddressLine3).HasMaxLength(255);

                entity.Property(e => e.AddressLine4).HasMaxLength(255);

                entity.Property(e => e.AddressLine5).HasMaxLength(255);

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.Facebook).HasMaxLength(255);

                entity.Property(e => e.Fax).HasMaxLength(255);

                entity.Property(e => e.OfficeName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PhoneNumber).HasMaxLength(50);

                entity.Property(e => e.Twitter).HasMaxLength(255);
            });

            modelBuilder.Entity<OperationCash>(entity =>
            {
                entity.ToTable("OperationCash", "Treasury");

                entity.Property(e => e.AgentCode).IsRequired();

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.OperationDate).HasColumnType("datetime");

                entity.HasOne(d => d.IdSessionNavigation)
                    .WithMany(p => p.OperationCash)
                    .HasForeignKey(d => d.IdSession)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Operation_SessionCash");
            });

            modelBuilder.Entity<OperationType>(entity =>
            {
                entity.ToTable("OperationType", "Sales");

                entity.HasIndex(e => new { e.DeletedToken, e.Code }, "UniqueCodeOperationType")
                    .IsUnique();

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(50);
            });

            modelBuilder.Entity<ParentInCharge>(entity =>
            {
                entity.ToTable("ParentInCharge", "Payroll");

                entity.Property(e => e.BirthDate).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.ParentInCharge)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ParentInCharge_Employee");

                entity.HasOne(d => d.IdParentTypeNavigation)
                    .WithMany(p => p.ParentInCharge)
                    .HasForeignKey(d => d.IdParentType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ParentInCharge_ParentType");
            });

            modelBuilder.Entity<ParentType>(entity =>
            {
                entity.ToTable("ParentType", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<PaymentCondition>(entity =>
            {
                entity.ToTable("PaymentCondition", "Payment");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Designation).HasMaxLength(255);

                entity.Property(e => e.PaymentConditionBit1).HasColumnName("PaymentCondition_bit_1");

                entity.Property(e => e.PaymentConditionBit10).HasColumnName("PaymentCondition_bit_10");

                entity.Property(e => e.PaymentConditionBit2).HasColumnName("PaymentCondition_bit_2");

                entity.Property(e => e.PaymentConditionBit3).HasColumnName("PaymentCondition_bit_3");

                entity.Property(e => e.PaymentConditionBit4).HasColumnName("PaymentCondition_bit_4");

                entity.Property(e => e.PaymentConditionBit5).HasColumnName("PaymentCondition_bit_5");

                entity.Property(e => e.PaymentConditionBit6).HasColumnName("PaymentCondition_bit_6");

                entity.Property(e => e.PaymentConditionBit7).HasColumnName("PaymentCondition_bit_7");

                entity.Property(e => e.PaymentConditionBit8).HasColumnName("PaymentCondition_bit_8");

                entity.Property(e => e.PaymentConditionBit9).HasColumnName("PaymentCondition_bit_9");

                entity.Property(e => e.PaymentConditionDate1)
                    .HasColumnType("date")
                    .HasColumnName("PaymentCondition_date_1");

                entity.Property(e => e.PaymentConditionDate10)
                    .HasColumnType("date")
                    .HasColumnName("PaymentCondition_date_10");

                entity.Property(e => e.PaymentConditionDate2)
                    .HasColumnType("date")
                    .HasColumnName("PaymentCondition_date_2");

                entity.Property(e => e.PaymentConditionDate3)
                    .HasColumnType("date")
                    .HasColumnName("PaymentCondition_date_3");

                entity.Property(e => e.PaymentConditionDate4)
                    .HasColumnType("date")
                    .HasColumnName("PaymentCondition_date_4");

                entity.Property(e => e.PaymentConditionDate5)
                    .HasColumnType("date")
                    .HasColumnName("PaymentCondition_date_5");

                entity.Property(e => e.PaymentConditionDate6)
                    .HasColumnType("date")
                    .HasColumnName("PaymentCondition_date_6");

                entity.Property(e => e.PaymentConditionDate7)
                    .HasColumnType("date")
                    .HasColumnName("PaymentCondition_date_7");

                entity.Property(e => e.PaymentConditionDate8)
                    .HasColumnType("date")
                    .HasColumnName("PaymentCondition_date_8");

                entity.Property(e => e.PaymentConditionDate9)
                    .HasColumnType("date")
                    .HasColumnName("PaymentCondition_date_9");

                entity.Property(e => e.PaymentConditionFloat1).HasColumnName("PaymentCondition_float_1");

                entity.Property(e => e.PaymentConditionFloat10).HasColumnName("PaymentCondition_float_10");

                entity.Property(e => e.PaymentConditionFloat2).HasColumnName("PaymentCondition_float_2");

                entity.Property(e => e.PaymentConditionFloat3).HasColumnName("PaymentCondition_float_3");

                entity.Property(e => e.PaymentConditionFloat4).HasColumnName("PaymentCondition_float_4");

                entity.Property(e => e.PaymentConditionFloat5).HasColumnName("PaymentCondition_float_5");

                entity.Property(e => e.PaymentConditionFloat6).HasColumnName("PaymentCondition_float_6");

                entity.Property(e => e.PaymentConditionFloat7).HasColumnName("PaymentCondition_float_7");

                entity.Property(e => e.PaymentConditionFloat8).HasColumnName("PaymentCondition_float_8");

                entity.Property(e => e.PaymentConditionFloat9).HasColumnName("PaymentCondition_float_9");

                entity.Property(e => e.PaymentConditionInt1).HasColumnName("PaymentCondition_int_1");

                entity.Property(e => e.PaymentConditionInt10).HasColumnName("PaymentCondition_int_10");

                entity.Property(e => e.PaymentConditionInt2).HasColumnName("PaymentCondition_int_2");

                entity.Property(e => e.PaymentConditionInt3).HasColumnName("PaymentCondition_int_3");

                entity.Property(e => e.PaymentConditionInt4).HasColumnName("PaymentCondition_int_4");

                entity.Property(e => e.PaymentConditionInt5).HasColumnName("PaymentCondition_int_5");

                entity.Property(e => e.PaymentConditionInt6).HasColumnName("PaymentCondition_int_6");

                entity.Property(e => e.PaymentConditionInt7).HasColumnName("PaymentCondition_int_7");

                entity.Property(e => e.PaymentConditionInt8).HasColumnName("PaymentCondition_int_8");

                entity.Property(e => e.PaymentConditionInt9).HasColumnName("PaymentCondition_int_9");

                entity.Property(e => e.PaymentConditionVarchar1)
                    .IsUnicode(false)
                    .HasColumnName("PaymentCondition_varchar_1");

                entity.Property(e => e.PaymentConditionVarchar10)
                    .IsUnicode(false)
                    .HasColumnName("PaymentCondition_varchar_10");

                entity.Property(e => e.PaymentConditionVarchar2)
                    .IsUnicode(false)
                    .HasColumnName("PaymentCondition_varchar_2");

                entity.Property(e => e.PaymentConditionVarchar3)
                    .IsUnicode(false)
                    .HasColumnName("PaymentCondition_varchar_3");

                entity.Property(e => e.PaymentConditionVarchar4)
                    .IsUnicode(false)
                    .HasColumnName("PaymentCondition_varchar_4");

                entity.Property(e => e.PaymentConditionVarchar5)
                    .IsUnicode(false)
                    .HasColumnName("PaymentCondition_varchar_5");

                entity.Property(e => e.PaymentConditionVarchar6)
                    .IsUnicode(false)
                    .HasColumnName("PaymentCondition_varchar_6");

                entity.Property(e => e.PaymentConditionVarchar7)
                    .IsUnicode(false)
                    .HasColumnName("PaymentCondition_varchar_7");

                entity.Property(e => e.PaymentConditionVarchar8)
                    .IsUnicode(false)
                    .HasColumnName("PaymentCondition_varchar_8");

                entity.Property(e => e.PaymentConditionVarchar9)
                    .IsUnicode(false)
                    .HasColumnName("PaymentCondition_varchar_9");

                entity.Property(e => e.Unit).HasMaxLength(255);
            });

            modelBuilder.Entity<PaymentDirection>(entity =>
            {
                entity.ToTable("PaymentDirection", "Treasury");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PaymentMethod>(entity =>
            {
                entity.ToTable("PaymentMethod", "Payment");

                entity.HasIndex(e => new { e.DeletedToken, e.Code }, "UniqueCodePaymentMethod")
                    .IsUnique();

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.En).HasMaxLength(255);

                entity.Property(e => e.Fr).HasMaxLength(255);

                entity.Property(e => e.MethodName).HasMaxLength(255);

                entity.Property(e => e.PaymentMethodBit1).HasColumnName("PaymentMethod_bit_1");

                entity.Property(e => e.PaymentMethodBit10).HasColumnName("PaymentMethod_bit_10");

                entity.Property(e => e.PaymentMethodBit2).HasColumnName("PaymentMethod_bit_2");

                entity.Property(e => e.PaymentMethodBit3).HasColumnName("PaymentMethod_bit_3");

                entity.Property(e => e.PaymentMethodBit4).HasColumnName("PaymentMethod_bit_4");

                entity.Property(e => e.PaymentMethodBit5).HasColumnName("PaymentMethod_bit_5");

                entity.Property(e => e.PaymentMethodBit6).HasColumnName("PaymentMethod_bit_6");

                entity.Property(e => e.PaymentMethodBit7).HasColumnName("PaymentMethod_bit_7");

                entity.Property(e => e.PaymentMethodBit8).HasColumnName("PaymentMethod_bit_8");

                entity.Property(e => e.PaymentMethodBit9).HasColumnName("PaymentMethod_bit_9");

                entity.Property(e => e.PaymentMethodDate1)
                    .HasColumnType("date")
                    .HasColumnName("PaymentMethod_date_1");

                entity.Property(e => e.PaymentMethodDate10)
                    .HasColumnType("date")
                    .HasColumnName("PaymentMethod_date_10");

                entity.Property(e => e.PaymentMethodDate2)
                    .HasColumnType("date")
                    .HasColumnName("PaymentMethod_date_2");

                entity.Property(e => e.PaymentMethodDate3)
                    .HasColumnType("date")
                    .HasColumnName("PaymentMethod_date_3");

                entity.Property(e => e.PaymentMethodDate4)
                    .HasColumnType("date")
                    .HasColumnName("PaymentMethod_date_4");

                entity.Property(e => e.PaymentMethodDate5)
                    .HasColumnType("date")
                    .HasColumnName("PaymentMethod_date_5");

                entity.Property(e => e.PaymentMethodDate6)
                    .HasColumnType("date")
                    .HasColumnName("PaymentMethod_date_6");

                entity.Property(e => e.PaymentMethodDate7)
                    .HasColumnType("date")
                    .HasColumnName("PaymentMethod_date_7");

                entity.Property(e => e.PaymentMethodDate8)
                    .HasColumnType("date")
                    .HasColumnName("PaymentMethod_date_8");

                entity.Property(e => e.PaymentMethodDate9)
                    .HasColumnType("date")
                    .HasColumnName("PaymentMethod_date_9");

                entity.Property(e => e.PaymentMethodFloat1).HasColumnName("PaymentMethod_float_1");

                entity.Property(e => e.PaymentMethodFloat10).HasColumnName("PaymentMethod_float_10");

                entity.Property(e => e.PaymentMethodFloat2).HasColumnName("PaymentMethod_float_2");

                entity.Property(e => e.PaymentMethodFloat3).HasColumnName("PaymentMethod_float_3");

                entity.Property(e => e.PaymentMethodFloat4).HasColumnName("PaymentMethod_float_4");

                entity.Property(e => e.PaymentMethodFloat5).HasColumnName("PaymentMethod_float_5");

                entity.Property(e => e.PaymentMethodFloat6).HasColumnName("PaymentMethod_float_6");

                entity.Property(e => e.PaymentMethodFloat7).HasColumnName("PaymentMethod_float_7");

                entity.Property(e => e.PaymentMethodFloat8).HasColumnName("PaymentMethod_float_8");

                entity.Property(e => e.PaymentMethodFloat9).HasColumnName("PaymentMethod_float_9");

                entity.Property(e => e.PaymentMethodInt1).HasColumnName("PaymentMethod_int_1");

                entity.Property(e => e.PaymentMethodInt10).HasColumnName("PaymentMethod_int_10");

                entity.Property(e => e.PaymentMethodInt2).HasColumnName("PaymentMethod_int_2");

                entity.Property(e => e.PaymentMethodInt3).HasColumnName("PaymentMethod_int_3");

                entity.Property(e => e.PaymentMethodInt4).HasColumnName("PaymentMethod_int_4");

                entity.Property(e => e.PaymentMethodInt5).HasColumnName("PaymentMethod_int_5");

                entity.Property(e => e.PaymentMethodInt6).HasColumnName("PaymentMethod_int_6");

                entity.Property(e => e.PaymentMethodInt7).HasColumnName("PaymentMethod_int_7");

                entity.Property(e => e.PaymentMethodInt8).HasColumnName("PaymentMethod_int_8");

                entity.Property(e => e.PaymentMethodInt9).HasColumnName("PaymentMethod_int_9");

                entity.Property(e => e.PaymentMethodVarchar1)
                    .IsUnicode(false)
                    .HasColumnName("PaymentMethod_varchar_1");

                entity.Property(e => e.PaymentMethodVarchar10)
                    .IsUnicode(false)
                    .HasColumnName("PaymentMethod_varchar_10");

                entity.Property(e => e.PaymentMethodVarchar2)
                    .IsUnicode(false)
                    .HasColumnName("PaymentMethod_varchar_2");

                entity.Property(e => e.PaymentMethodVarchar3)
                    .IsUnicode(false)
                    .HasColumnName("PaymentMethod_varchar_3");

                entity.Property(e => e.PaymentMethodVarchar4)
                    .IsUnicode(false)
                    .HasColumnName("PaymentMethod_varchar_4");

                entity.Property(e => e.PaymentMethodVarchar5)
                    .IsUnicode(false)
                    .HasColumnName("PaymentMethod_varchar_5");

                entity.Property(e => e.PaymentMethodVarchar6)
                    .IsUnicode(false)
                    .HasColumnName("PaymentMethod_varchar_6");

                entity.Property(e => e.PaymentMethodVarchar7)
                    .IsUnicode(false)
                    .HasColumnName("PaymentMethod_varchar_7");

                entity.Property(e => e.PaymentMethodVarchar8)
                    .IsUnicode(false)
                    .HasColumnName("PaymentMethod_varchar_8");

                entity.Property(e => e.PaymentMethodVarchar9)
                    .IsUnicode(false)
                    .HasColumnName("PaymentMethod_varchar_9");

                entity.HasOne(d => d.IdPaymentTypeNavigation)
                    .WithMany(p => p.PaymentMethod)
                    .HasForeignKey(d => d.IdPaymentType)
                    .HasConstraintName("FK_PayementMethod_PayementType");
            });

            modelBuilder.Entity<PaymentSlip>(entity =>
            {
                entity.ToTable("PaymentSlip", "Payment");

                entity.HasIndex(e => e.Reference, "Unique_Reference_PaymentSlip")
                    .IsUnique();

                entity.Property(e => e.Agency).HasMaxLength(50);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Deposer).HasMaxLength(50);

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.TotalAmountWithLetters).HasMaxLength(100);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.HasOne(d => d.IdBankAccountNavigation)
                    .WithMany(p => p.PaymentSlip)
                    .HasForeignKey(d => d.IdBankAccount)
                    .HasConstraintName("FK_PaymentSlip_BankAccount");
            });

            modelBuilder.Entity<PaymentStatus>(entity =>
            {
                entity.ToTable("PaymentStatus", "Payment");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(255);
            });

            modelBuilder.Entity<PaymentType>(entity =>
            {
                entity.ToTable("PaymentType", "Payment");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(50);

                entity.Property(e => e.PaymentTypeBit1).HasColumnName("PaymentType_bit_1");

                entity.Property(e => e.PaymentTypeBit10).HasColumnName("PaymentType_bit_10");

                entity.Property(e => e.PaymentTypeBit2).HasColumnName("PaymentType_bit_2");

                entity.Property(e => e.PaymentTypeBit3).HasColumnName("PaymentType_bit_3");

                entity.Property(e => e.PaymentTypeBit4).HasColumnName("PaymentType_bit_4");

                entity.Property(e => e.PaymentTypeBit5).HasColumnName("PaymentType_bit_5");

                entity.Property(e => e.PaymentTypeBit6).HasColumnName("PaymentType_bit_6");

                entity.Property(e => e.PaymentTypeBit7).HasColumnName("PaymentType_bit_7");

                entity.Property(e => e.PaymentTypeBit8).HasColumnName("PaymentType_bit_8");

                entity.Property(e => e.PaymentTypeBit9).HasColumnName("PaymentType_bit_9");

                entity.Property(e => e.PaymentTypeDate1)
                    .HasColumnType("date")
                    .HasColumnName("PaymentType_date_1");

                entity.Property(e => e.PaymentTypeDate10)
                    .HasColumnType("date")
                    .HasColumnName("PaymentType_date_10");

                entity.Property(e => e.PaymentTypeDate2)
                    .HasColumnType("date")
                    .HasColumnName("PaymentType_date_2");

                entity.Property(e => e.PaymentTypeDate3)
                    .HasColumnType("date")
                    .HasColumnName("PaymentType_date_3");

                entity.Property(e => e.PaymentTypeDate4)
                    .HasColumnType("date")
                    .HasColumnName("PaymentType_date_4");

                entity.Property(e => e.PaymentTypeDate5)
                    .HasColumnType("date")
                    .HasColumnName("PaymentType_date_5");

                entity.Property(e => e.PaymentTypeDate6)
                    .HasColumnType("date")
                    .HasColumnName("PaymentType_date_6");

                entity.Property(e => e.PaymentTypeDate7)
                    .HasColumnType("date")
                    .HasColumnName("PaymentType_date_7");

                entity.Property(e => e.PaymentTypeDate8)
                    .HasColumnType("date")
                    .HasColumnName("PaymentType_date_8");

                entity.Property(e => e.PaymentTypeDate9)
                    .HasColumnType("date")
                    .HasColumnName("PaymentType_date_9");

                entity.Property(e => e.PaymentTypeFloat1).HasColumnName("PaymentType_float_1");

                entity.Property(e => e.PaymentTypeFloat10).HasColumnName("PaymentType_float_10");

                entity.Property(e => e.PaymentTypeFloat2).HasColumnName("PaymentType_float_2");

                entity.Property(e => e.PaymentTypeFloat3).HasColumnName("PaymentType_float_3");

                entity.Property(e => e.PaymentTypeFloat4).HasColumnName("PaymentType_float_4");

                entity.Property(e => e.PaymentTypeFloat5).HasColumnName("PaymentType_float_5");

                entity.Property(e => e.PaymentTypeFloat6).HasColumnName("PaymentType_float_6");

                entity.Property(e => e.PaymentTypeFloat7).HasColumnName("PaymentType_float_7");

                entity.Property(e => e.PaymentTypeFloat8).HasColumnName("PaymentType_float_8");

                entity.Property(e => e.PaymentTypeFloat9).HasColumnName("PaymentType_float_9");

                entity.Property(e => e.PaymentTypeInt1).HasColumnName("PaymentType_int_1");

                entity.Property(e => e.PaymentTypeInt10).HasColumnName("PaymentType_int_10");

                entity.Property(e => e.PaymentTypeInt2).HasColumnName("PaymentType_int_2");

                entity.Property(e => e.PaymentTypeInt3).HasColumnName("PaymentType_int_3");

                entity.Property(e => e.PaymentTypeInt4).HasColumnName("PaymentType_int_4");

                entity.Property(e => e.PaymentTypeInt5).HasColumnName("PaymentType_int_5");

                entity.Property(e => e.PaymentTypeInt6).HasColumnName("PaymentType_int_6");

                entity.Property(e => e.PaymentTypeInt7).HasColumnName("PaymentType_int_7");

                entity.Property(e => e.PaymentTypeInt8).HasColumnName("PaymentType_int_8");

                entity.Property(e => e.PaymentTypeInt9).HasColumnName("PaymentType_int_9");

                entity.Property(e => e.PaymentTypeVarchar1)
                    .IsUnicode(false)
                    .HasColumnName("PaymentType_varchar_1");

                entity.Property(e => e.PaymentTypeVarchar10)
                    .IsUnicode(false)
                    .HasColumnName("PaymentType_varchar_10");

                entity.Property(e => e.PaymentTypeVarchar2)
                    .IsUnicode(false)
                    .HasColumnName("PaymentType_varchar_2");

                entity.Property(e => e.PaymentTypeVarchar3)
                    .IsUnicode(false)
                    .HasColumnName("PaymentType_varchar_3");

                entity.Property(e => e.PaymentTypeVarchar4)
                    .IsUnicode(false)
                    .HasColumnName("PaymentType_varchar_4");

                entity.Property(e => e.PaymentTypeVarchar5)
                    .IsUnicode(false)
                    .HasColumnName("PaymentType_varchar_5");

                entity.Property(e => e.PaymentTypeVarchar6)
                    .IsUnicode(false)
                    .HasColumnName("PaymentType_varchar_6");

                entity.Property(e => e.PaymentTypeVarchar7)
                    .IsUnicode(false)
                    .HasColumnName("PaymentType_varchar_7");

                entity.Property(e => e.PaymentTypeVarchar8)
                    .IsUnicode(false)
                    .HasColumnName("PaymentType_varchar_8");

                entity.Property(e => e.PaymentTypeVarchar9)
                    .IsUnicode(false)
                    .HasColumnName("PaymentType_varchar_9");
            });

            modelBuilder.Entity<Payslip>(entity =>
            {
                entity.ToTable("Payslip", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Month).HasColumnType("date");

                entity.HasOne(d => d.IdContractNavigation)
                    .WithMany(p => p.Payslip)
                    .HasForeignKey(d => d.IdContract)
                    .HasConstraintName("FK_Payslip_Contract");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.Payslip)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Payslip_Employee");

                entity.HasOne(d => d.IdSessionNavigation)
                    .WithMany(p => p.Payslip)
                    .HasForeignKey(d => d.IdSession)
                    .HasConstraintName("FK_Payslip_Session");

                entity.HasOne(d => d.IdTransferOrderNavigation)
                    .WithMany(p => p.Payslip)
                    .HasForeignKey(d => d.IdTransferOrder)
                    .HasConstraintName("FK_Payslip_TransferOrder");
            });

            modelBuilder.Entity<PayslipDetails>(entity =>
            {
                entity.ToTable("PayslipDetails", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Rule)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.IdBenefitInKindNavigation)
                    .WithMany(p => p.PayslipDetails)
                    .HasForeignKey(d => d.IdBenefitInKind)
                    .HasConstraintName("FK_PayslipDetails_BenefitInKind");

                entity.HasOne(d => d.IdBonusNavigation)
                    .WithMany(p => p.PayslipDetails)
                    .HasForeignKey(d => d.IdBonus)
                    .HasConstraintName("FK_PayslipDetails_Bonus");

                entity.HasOne(d => d.IdLoanInstallmentNavigation)
                    .WithMany(p => p.PayslipDetails)
                    .HasForeignKey(d => d.IdLoanInstallment)
                    .HasConstraintName("FK_PayslipDetails_LoanInstallment");

                entity.HasOne(d => d.IdPayslipNavigation)
                    .WithMany(p => p.PayslipDetails)
                    .HasForeignKey(d => d.IdPayslip)
                    .HasConstraintName("FK_PayslipDetails_Payslip");

                entity.HasOne(d => d.IdSalaryRuleNavigation)
                    .WithMany(p => p.PayslipDetails)
                    .HasForeignKey(d => d.IdSalaryRule)
                    .HasConstraintName("FK_PayslipDetails_SalaryRule");
            });

            modelBuilder.Entity<Period>(entity =>
            {
                entity.ToTable("Period", "Shared");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.StartDate).HasColumnType("date");
            });

            modelBuilder.Entity<Phone>(entity =>
            {
                entity.ToTable("Phone", "Shared");

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.DialCode)
                    .HasMaxLength(5)
                    .IsFixedLength(true);

                entity.HasOne(d => d.IdContactNavigation)
                    .WithMany(p => p.Phone)
                    .HasForeignKey(d => d.IdContact)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Phone_Contact");
            });

            modelBuilder.Entity<PriceDetail>(entity =>
            {
                entity.ToTable("PriceDetail", "Sales");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.EndDateTime).HasColumnType("datetime");

                entity.Property(e => e.StartDateTime).HasColumnType("datetime");

                entity.HasOne(d => d.IdPricesNavigation)
                    .WithMany(p => p.PriceDetail)
                    .HasForeignKey(d => d.IdPrices)
                    .HasConstraintName("FK_PriceDetail_Prices");
            });

            modelBuilder.Entity<PriceRequest>(entity =>
            {
                entity.ToTable("PriceRequest", "Sales");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.DocumentDate).HasColumnType("date");

                entity.Property(e => e.Reference).HasMaxLength(500);
            });

            modelBuilder.Entity<PriceRequestDetail>(entity =>
            {
                entity.ToTable("PriceRequestDetail", "Sales");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Designation).HasMaxLength(300);

                entity.HasOne(d => d.IdContactNavigation)
                    .WithMany(p => p.PriceRequestDetail)
                    .HasForeignKey(d => d.IdContact)
                    .HasConstraintName("FK_PriceRequestDetail_Contact");

                entity.HasOne(d => d.IdItemNavigation)
                    .WithMany(p => p.PriceRequestDetail)
                    .HasForeignKey(d => d.IdItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PriceRequestDetail_Item");

                entity.HasOne(d => d.IdPriceRequestNavigation)
                    .WithMany(p => p.PriceRequestDetail)
                    .HasForeignKey(d => d.IdPriceRequest)
                    .HasConstraintName("FK_PriceRequestDetail_PriceRequest");

                entity.HasOne(d => d.IdTiersNavigation)
                    .WithMany(p => p.PriceRequestDetail)
                    .HasForeignKey(d => d.IdTiers)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PriceRequestDetail_Tiers");
            });

            modelBuilder.Entity<Prices>(entity =>
            {
                entity.ToTable("Prices", "Sales");

                entity.HasIndex(e => new { e.DeletedToken, e.CodePrices }, "UniqueCodePrices")
                    .IsUnique();

                entity.Property(e => e.CodePrices).HasMaxLength(20);

                entity.Property(e => e.ContractCode).HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.LabelPrices).HasMaxLength(255);

                entity.HasOne(d => d.IdUsedCurrencyNavigation)
                    .WithMany(p => p.Prices)
                    .HasForeignKey(d => d.IdUsedCurrency)
                    .HasConstraintName("FK_Prices_Currency");
            });

            modelBuilder.Entity<Privilege>(entity =>
            {
                entity.ToTable("Privilege", "ERPSettings");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ProductItem>(entity =>
            {
                entity.ToTable("ProductItem", "Inventory");

                entity.HasIndex(e => new { e.DeletedToken, e.CodeProduct }, "UniqueCodeProduct")
                    .IsUnique();

                entity.Property(e => e.CodeProduct).HasMaxLength(255);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.LabelProduct).HasMaxLength(255);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UrlPicture).HasMaxLength(255);
            });

            modelBuilder.Entity<Project>(entity =>
            {
                entity.ToTable("Project", "RH");

                entity.Property(e => e.AttachementFile).HasMaxLength(255);

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.ExpectedEndDate).HasColumnType("date");

                entity.Property(e => e.LabelInInvoice).HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(125);

                entity.Property(e => e.ProjectLabel).HasMaxLength(255);

                entity.Property(e => e.ReferenceBc).HasMaxLength(255);

                entity.Property(e => e.ReferenceProject).HasMaxLength(255);

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.HasOne(d => d.IdBankAccountNavigation)
                    .WithMany(p => p.Project)
                    .HasForeignKey(d => d.IdBankAccount)
                    .HasConstraintName("FK_Project_BankAccount");

                entity.HasOne(d => d.IdContactNavigation)
                    .WithMany(p => p.Project)
                    .HasForeignKey(d => d.IdContact)
                    .HasConstraintName("FK_Project_Contact");

                entity.HasOne(d => d.IdCurrencyNavigation)
                    .WithMany(p => p.Project)
                    .HasForeignKey(d => d.IdCurrency)
                    .HasConstraintName("FK_Project_Currency");

                entity.HasOne(d => d.IdSettlementModeNavigation)
                    .WithMany(p => p.Project)
                    .HasForeignKey(d => d.IdSettlementMode)
                    .HasConstraintName("FK_Project_SettlementMode");

                entity.HasOne(d => d.IdTaxeNavigation)
                    .WithMany(p => p.Project)
                    .HasForeignKey(d => d.IdTaxe)
                    .HasConstraintName("FK_Project_Taxe");

                entity.HasOne(d => d.IdTiersNavigation)
                    .WithMany(p => p.Project)
                    .HasForeignKey(d => d.IdTiers)
                    .HasConstraintName("FK_Project_Tiers");
            });

            modelBuilder.Entity<Provisioning>(entity =>
            {
                entity.ToTable("Provisioning", "Sales");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.ProjectDate).HasColumnType("datetime");

                entity.HasOne(d => d.IdProvisioningOptionNavigation)
                    .WithMany(p => p.Provisioning)
                    .HasForeignKey(d => d.IdProvisioningOption)
                    .HasConstraintName("FK_Provisioning_ProvisioningOption");
            });

            modelBuilder.Entity<ProvisioningDetails>(entity =>
            {
                entity.ToTable("ProvisioningDetails", "Sales");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdItemNavigation)
                    .WithMany(p => p.ProvisioningDetails)
                    .HasForeignKey(d => d.IdItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProvisioningDetails_Item");

                entity.HasOne(d => d.IdProvisioningNavigation)
                    .WithMany(p => p.ProvisioningDetails)
                    .HasForeignKey(d => d.IdProvisioning)
                    .HasConstraintName("FK_ProvisioningDetails_Provisioning");

                entity.HasOne(d => d.IdTiersNavigation)
                    .WithMany(p => p.ProvisioningDetails)
                    .HasForeignKey(d => d.IdTiers)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProvisioningDetails_Tiers");
            });

            modelBuilder.Entity<ProvisioningOption>(entity =>
            {
                entity.ToTable("ProvisioningOption", "Sales");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.NewReferencesEndDate).HasColumnType("datetime");

                entity.Property(e => e.NewReferencesStartDate).HasColumnType("datetime");

                entity.Property(e => e.PucrahseEndDate).HasColumnType("datetime");

                entity.Property(e => e.PucrahseStartDate).HasColumnType("datetime");

                entity.Property(e => e.SalesEndDate).HasColumnType("datetime");

                entity.Property(e => e.SalesStartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<PurchaseSettings>(entity =>
            {
                entity.ToTable("PurchaseSettings", "Sales");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.PurchaseAllowItemManagedInStock)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PurchaseAllowItemRelatedToSupplier)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.PurchaseSettings)
                    .HasForeignKey<PurchaseSettings>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseSetting_Company");

                entity.HasOne(d => d.IdPurchasingManagerNavigation)
                    .WithMany(p => p.PurchaseSettings)
                    .HasForeignKey(d => d.IdPurchasingManager)
                    .HasConstraintName("FK_PurchaseSettings_User");
            });

            modelBuilder.Entity<Qualification>(entity =>
            {
                entity.ToTable("Qualification", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.QualificationAttached).HasMaxLength(500);

                entity.Property(e => e.University)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.IdCandidateNavigation)
                    .WithMany(p => p.Qualification)
                    .HasForeignKey(d => d.IdCandidate)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Qualification_Candidate");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.Qualification)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Qualification_Employee");

                entity.HasOne(d => d.IdQualificationCountryNavigation)
                    .WithMany(p => p.Qualification)
                    .HasForeignKey(d => d.IdQualificationCountry)
                    .HasConstraintName("FK_Qualification_Country");

                entity.HasOne(d => d.IdQualificationTypeNavigation)
                    .WithMany(p => p.Qualification)
                    .HasForeignKey(d => d.IdQualificationType)
                    .HasConstraintName("FK_Qualification_QualificationType");
            });

            modelBuilder.Entity<QualificationType>(entity =>
            {
                entity.ToTable("QualificationType", "Payroll");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Label).HasMaxLength(50);
            });

            modelBuilder.Entity<Question>(entity =>
            {
                entity.ToTable("Question", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.QuestionLabel)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ResponseLabel).HasMaxLength(255);

                entity.HasOne(d => d.IdInterviewNavigation)
                    .WithMany(p => p.Question)
                    .HasForeignKey(d => d.IdInterview)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Question_Interview");
            });

            modelBuilder.Entity<ReceiptSpent>(entity =>
            {
                entity.ToTable("ReceiptSpent", "Treasury");

                entity.Property(e => e.Deadline).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.IdReceiptSpentAxis1).HasColumnName("IdReceiptSpentAxis_1");

                entity.Property(e => e.IdReceiptSpentAxis10).HasColumnName("IdReceiptSpentAxis_10");

                entity.Property(e => e.IdReceiptSpentAxis11).HasColumnName("IdReceiptSpentAxis_11");

                entity.Property(e => e.IdReceiptSpentAxis12).HasColumnName("IdReceiptSpentAxis_12");

                entity.Property(e => e.IdReceiptSpentAxis13).HasColumnName("IdReceiptSpentAxis_13");

                entity.Property(e => e.IdReceiptSpentAxis14).HasColumnName("IdReceiptSpentAxis_14");

                entity.Property(e => e.IdReceiptSpentAxis15).HasColumnName("IdReceiptSpentAxis_15");

                entity.Property(e => e.IdReceiptSpentAxis16).HasColumnName("IdReceiptSpentAxis_16");

                entity.Property(e => e.IdReceiptSpentAxis17).HasColumnName("IdReceiptSpentAxis_17");

                entity.Property(e => e.IdReceiptSpentAxis18).HasColumnName("IdReceiptSpentAxis_18");

                entity.Property(e => e.IdReceiptSpentAxis19).HasColumnName("IdReceiptSpentAxis_19");

                entity.Property(e => e.IdReceiptSpentAxis2).HasColumnName("IdReceiptSpentAxis_2");

                entity.Property(e => e.IdReceiptSpentAxis20).HasColumnName("IdReceiptSpentAxis_20");

                entity.Property(e => e.IdReceiptSpentAxis21).HasColumnName("IdReceiptSpentAxis_21");

                entity.Property(e => e.IdReceiptSpentAxis22).HasColumnName("IdReceiptSpentAxis_22");

                entity.Property(e => e.IdReceiptSpentAxis23).HasColumnName("IdReceiptSpentAxis_23");

                entity.Property(e => e.IdReceiptSpentAxis24).HasColumnName("IdReceiptSpentAxis_24");

                entity.Property(e => e.IdReceiptSpentAxis25).HasColumnName("IdReceiptSpentAxis_25");

                entity.Property(e => e.IdReceiptSpentAxis26).HasColumnName("IdReceiptSpentAxis_26");

                entity.Property(e => e.IdReceiptSpentAxis27).HasColumnName("IdReceiptSpentAxis_27");

                entity.Property(e => e.IdReceiptSpentAxis28).HasColumnName("IdReceiptSpentAxis_28");

                entity.Property(e => e.IdReceiptSpentAxis29).HasColumnName("IdReceiptSpentAxis_29");

                entity.Property(e => e.IdReceiptSpentAxis3).HasColumnName("IdReceiptSpentAxis_3");

                entity.Property(e => e.IdReceiptSpentAxis30).HasColumnName("IdReceiptSpentAxis_30");

                entity.Property(e => e.IdReceiptSpentAxis4).HasColumnName("IdReceiptSpentAxis_4");

                entity.Property(e => e.IdReceiptSpentAxis5).HasColumnName("IdReceiptSpentAxis_5");

                entity.Property(e => e.IdReceiptSpentAxis6).HasColumnName("IdReceiptSpentAxis_6");

                entity.Property(e => e.IdReceiptSpentAxis7).HasColumnName("IdReceiptSpentAxis_7");

                entity.Property(e => e.IdReceiptSpentAxis8).HasColumnName("IdReceiptSpentAxis_8");

                entity.Property(e => e.IdReceiptSpentAxis9).HasColumnName("IdReceiptSpentAxis_9");

                entity.Property(e => e.Periodicity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdPaymentDirectionNavigation)
                    .WithMany(p => p.ReceiptSpent)
                    .HasForeignKey(d => d.IdPaymentDirection)
                    .HasConstraintName("FK_RecipeSpent_PaymentDirection");

                entity.HasOne(d => d.IdPaymentMethodNavigation)
                    .WithMany(p => p.ReceiptSpent)
                    .HasForeignKey(d => d.IdPaymentMethod)
                    .HasConstraintName("FK_ReceiptSpent_PaymentMethod");

                entity.HasOne(d => d.IdTiersNavigation)
                    .WithMany(p => p.ReceiptSpent)
                    .HasForeignKey(d => d.IdTiers)
                    .HasConstraintName("FK_RecipeSpent_Tiers");
            });

            modelBuilder.Entity<Reconciliation>(entity =>
            {
                entity.ToTable("Reconciliation", "Treasury");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReconciliationDate).HasColumnType("datetime");

                entity.HasOne(d => d.IdBankAccountNavigation)
                    .WithMany(p => p.Reconciliation)
                    .HasForeignKey(d => d.IdBankAccount)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reconciliation_BankAccount");
            });

            modelBuilder.Entity<Recruitment>(entity =>
            {
                entity.ToTable("Recruitment", "RH");

                entity.Property(e => e.ClosingDate).HasColumnType("date");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreationDate).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.OfferPicture).HasMaxLength(500);

                entity.Property(e => e.RecruitmentTypeCode).HasMaxLength(255);

                entity.Property(e => e.RequestReason).HasMaxLength(500);

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.TreatmentDate).HasColumnType("date");

                entity.HasOne(d => d.IdContractTypeNavigation)
                    .WithMany(p => p.Recruitment)
                    .HasForeignKey(d => d.IdContractType)
                    .HasConstraintName("FK_Recruitment_ContractType");

                entity.HasOne(d => d.IdEmployeeAuthorNavigation)
                    .WithMany(p => p.RecruitmentIdEmployeeAuthorNavigation)
                    .HasForeignKey(d => d.IdEmployeeAuthor)
                    .HasConstraintName("FK_Recruitment_EmployeeAuthor");

                entity.HasOne(d => d.IdEmployeeValidatorNavigation)
                    .WithMany(p => p.RecruitmentIdEmployeeValidatorNavigation)
                    .HasForeignKey(d => d.IdEmployeeValidator)
                    .HasConstraintName("FK_Recruitment_EmployeeValidator");

                entity.HasOne(d => d.IdJobNavigation)
                    .WithMany(p => p.Recruitment)
                    .HasForeignKey(d => d.IdJob)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Recruitment_Job");

                entity.HasOne(d => d.IdOfficeNavigation)
                    .WithMany(p => p.Recruitment)
                    .HasForeignKey(d => d.IdOffice)
                    .HasConstraintName("FK_Recruitment_Office");

                entity.HasOne(d => d.IdQualificationTypeNavigation)
                    .WithMany(p => p.Recruitment)
                    .HasForeignKey(d => d.IdQualificationType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Recruitment_QualificationType");
            });

            modelBuilder.Entity<RecruitmentLanguage>(entity =>
            {
                entity.ToTable("RecruitmentLanguage", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdLanguageNavigation)
                    .WithMany(p => p.RecruitmentLanguage)
                    .HasForeignKey(d => d.IdLanguage)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RecruitmentLanguage_Language");

                entity.HasOne(d => d.IdRecruitmentNavigation)
                    .WithMany(p => p.RecruitmentLanguage)
                    .HasForeignKey(d => d.IdRecruitment)
                    .HasConstraintName("FK_RecruitmentLanguage_Recruitment");
            });

            modelBuilder.Entity<RecruitmentSkills>(entity =>
            {
                entity.ToTable("RecruitmentSkills", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdRecruitmentNavigation)
                    .WithMany(p => p.RecruitmentSkills)
                    .HasForeignKey(d => d.IdRecruitment)
                    .HasConstraintName("FK_RecruitmentSkills_Recruitment");

                entity.HasOne(d => d.IdSkillsNavigation)
                    .WithMany(p => p.RecruitmentSkills)
                    .HasForeignKey(d => d.IdSkills)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RecruitmentSkills_Skills");
            });

            modelBuilder.Entity<ReflectiveSettlement>(entity =>
            {
                entity.ToTable("ReflectiveSettlement", "Payment");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");
                entity.HasOne(d => d.IdGapSettlementNavigation)
                                    .WithMany(p => p.ReflectiveSettlementIdGapSettlementNavigation)
                                    .HasForeignKey(d => d.IdGapSettlement)
                                    .OnDelete(DeleteBehavior.ClientSetNull)
                                    .HasConstraintName("FK_ReflectiveSettlement_SettlementRelated");

                entity.HasOne(d => d.IdSettlementNavigation)
                    .WithMany(p => p.ReflectiveSettlementIdSettlementNavigation)
                    .HasForeignKey(d => d.IdSettlement)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReflectiveSettlement_Settlement");


            });

            modelBuilder.Entity<ReportTemplate>(entity =>
            {
                entity.ToTable("ReportTemplate", "ERPSettings");

                entity.Property(e => e.ReportCode).HasMaxLength(255);

                entity.Property(e => e.ReportName).HasMaxLength(255);

                entity.Property(e => e.TemplateCode).HasMaxLength(255);

                entity.Property(e => e.TemplateNameEn).HasMaxLength(255);

                entity.Property(e => e.TemplateNameFr).HasMaxLength(255);

                entity.HasOne(d => d.IdEntityNavigation)
                    .WithMany(p => p.ReportTemplate)
                    .HasForeignKey(d => d.IdEntity)
                    .HasConstraintName("FK_ReportTemplate_Entity");
            });

            modelBuilder.Entity<RequestType>(entity =>
            {
                entity.ToTable("RequestType", "ERPSettings");

                entity.HasComment("Table contains all the types of the features");

                entity.Property(e => e.Id).HasComment("Unique identifier for Request type");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.RequestFile).HasMaxLength(50);

                entity.Property(e => e.RequestName)
                    .HasMaxLength(50)
                    .HasComment("Name of request type");
            });

            modelBuilder.Entity<Review>(entity =>
            {
                entity.ToTable("Review", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.ReviewDate).HasColumnType("date");

                entity.HasOne(d => d.IdEmployeeCollaboratorNavigation)
                    .WithMany(p => p.ReviewIdEmployeeCollaboratorNavigation)
                    .HasForeignKey(d => d.IdEmployeeCollaborator)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Review_Employee_Collaborator");

                entity.HasOne(d => d.IdManagerNavigation)
                    .WithMany(p => p.ReviewIdManagerNavigation)
                    .HasForeignKey(d => d.IdManager)
                    .HasConstraintName("FK_Review_Manager");
            });

            modelBuilder.Entity<ReviewFormation>(entity =>
            {
                entity.ToTable("ReviewFormation", "RH");

                entity.Property(e => e.CollaboratorComment).HasMaxLength(500);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.ManagerComment).HasMaxLength(500);

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.ReviewFormation)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReviewFormation_Employee");

                entity.HasOne(d => d.IdFormationNavigation)
                    .WithMany(p => p.ReviewFormation)
                    .HasForeignKey(d => d.IdFormation)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReviewFormation_Formation");

                entity.HasOne(d => d.IdReviewNavigation)
                    .WithMany(p => p.ReviewFormation)
                    .HasForeignKey(d => d.IdReview)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReviewFormation_Review");
            });

            modelBuilder.Entity<ReviewResume>(entity =>
            {
                entity.ToTable("ReviewResume", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsFixedLength(true);

                entity.HasOne(d => d.IdReviewNavigation)
                    .WithMany(p => p.ReviewResume)
                    .HasForeignKey(d => d.IdReview)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReviewResume_Review");
            });

            modelBuilder.Entity<ReviewSkills>(entity =>
            {
                entity.ToTable("ReviewSkills", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.ReviewSkills)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReviewSkills_Employee");

                entity.HasOne(d => d.IdReviewNavigation)
                    .WithMany(p => p.ReviewSkills)
                    .HasForeignKey(d => d.IdReview)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReviewSkills_Review");

                entity.HasOne(d => d.IdSkillsNavigation)
                    .WithMany(p => p.ReviewSkills)
                    .HasForeignKey(d => d.IdSkills)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReviewSkills_Skills");
            });

            modelBuilder.Entity<RuleUniqueReference>(entity =>
            {
                entity.ToTable("RuleUniqueReference", "Payroll");

                entity.HasIndex(e => e.Reference, "Unique_RuleUniqueReference")
                    .IsUnique();

                entity.Property(e => e.DeletedToken).HasMaxLength(255);

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<SalaryRule>(entity =>
            {
                entity.ToTable("SalaryRule", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.IdContributionRegisterNavigation)
                    .WithMany(p => p.SalaryRule)
                    .HasForeignKey(d => d.IdContributionRegister)
                    .HasConstraintName("FK_SalaryRule_ContributionRegister");

                entity.HasOne(d => d.IdRuleUniqueReferenceNavigation)
                    .WithMany(p => p.SalaryRule)
                    .HasForeignKey(d => d.IdRuleUniqueReference)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalaryRule_RuleUniqueReference");
            });

            modelBuilder.Entity<SalaryRuleValidityPeriod>(entity =>
            {
                entity.ToTable("SalaryRuleValidityPeriod", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Rule).HasColumnName("rule");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.State).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdSalaryRuleNavigation)
                    .WithMany(p => p.SalaryRuleValidityPeriod)
                    .HasForeignKey(d => d.IdSalaryRule)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalaryRuleValidityPeriod_SalaryRule");
            });

            modelBuilder.Entity<SalaryStructure>(entity =>
            {
                entity.ToTable("SalaryStructure", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.SalaryStructureReference)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.IdParentNavigation)
                    .WithMany(p => p.InverseIdParentNavigation)
                    .HasForeignKey(d => d.IdParent)
                    .HasConstraintName("FK_SalaryStructure_SalaryStructureParent");
            });

            modelBuilder.Entity<SalaryStructureValidityPeriod>(entity =>
            {
                entity.ToTable("SalaryStructureValidityPeriod", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.State).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdSalaryStructureNavigation)
                    .WithMany(p => p.SalaryStructureValidityPeriod)
                    .HasForeignKey(d => d.IdSalaryStructure)
                    .HasConstraintName("FK_SalaryStructureValidityPeriod_SalaryStructure");
            });

            modelBuilder.Entity<SalaryStructureValidityPeriodSalaryRule>(entity =>
            {
                entity.ToTable("SalaryStructureValidityPeriodSalaryRule", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdSalaryRuleNavigation)
                    .WithMany(p => p.SalaryStructureValidityPeriodSalaryRule)
                    .HasForeignKey(d => d.IdSalaryRule)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalaryStructureValidityPeriodSalaryRule_SalaryRule");

                entity.HasOne(d => d.IdSalaryStructureValidityPeriodNavigation)
                    .WithMany(p => p.SalaryStructureValidityPeriodSalaryRule)
                    .HasForeignKey(d => d.IdSalaryStructureValidityPeriod)
                    .HasConstraintName("FK_SalaryStructureValidityPeriodSalaryRule_SalaryStructureValidityPeriod");
            });

            modelBuilder.Entity<SaleSettings>(entity =>
            {
                entity.ToTable("SaleSettings", "Sales");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.InvoicingEndMonth)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SaleAllowItemManagedInStock)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdNavigation)
                    .WithOne(p => p.SaleSettings)
                    .HasForeignKey<SaleSettings>(d => d.Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaleSetting_Company");
            });

            modelBuilder.Entity<SalesInvoiceLog>(entity =>
            {
                entity.ToTable("SalesInvoiceLog", "Sales");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.TransactionUserId).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<SalesPrice>(entity =>
            {
                entity.ToTable("SalesPrice", "Sales");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(255);
            });

            modelBuilder.Entity<SearchItem>(entity =>
            {
                entity.ToTable("SearchItem", "Sales");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdCashierNavigation)
                    .WithMany(p => p.SearchItem)
                    .HasForeignKey(d => d.IdCashier)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SearchItem_User");

                entity.HasOne(d => d.IdTiersNavigation)
                    .WithMany(p => p.SearchItem)
                    .HasForeignKey(d => d.IdTiers)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SearchItem_Tiers");
            });

            modelBuilder.Entity<Session>(entity =>
            {
                entity.ToTable("Session", "Payroll");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.CreationDate).HasColumnType("date");

                entity.Property(e => e.DaysOfWork).HasDefaultValueSql("((26))");

                entity.Property(e => e.DaysWorkedInTheWeek).HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Month).HasColumnType("date");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(125);
            });

            modelBuilder.Entity<SessionBonus>(entity =>
            {
                entity.ToTable("SessionBonus", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdBonusNavigation)
                    .WithMany(p => p.SessionBonus)
                    .HasForeignKey(d => d.IdBonus)
                    .HasConstraintName("FK_PaySlip_Premium_Premium");

                entity.HasOne(d => d.IdContractNavigation)
                    .WithMany(p => p.SessionBonus)
                    .HasForeignKey(d => d.IdContract)
                    .HasConstraintName("FK_PaySlip_Premium_Contract");

                entity.HasOne(d => d.IdSessionNavigation)
                    .WithMany(p => p.SessionBonus)
                    .HasForeignKey(d => d.IdSession)
                    .HasConstraintName("FK_PaySlip_Premium_Session");
            });

            modelBuilder.Entity<SessionCash>(entity =>
            {
                entity.ToTable("SessionCash", "Payment");

                entity.Property(e => e.ClosingDate).HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.LastCounter)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('0000')");

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.HasOne(d => d.IdCashRegisterNavigation)
                    .WithMany(p => p.SessionCash)
                    .HasForeignKey(d => d.IdCashRegister)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SessionCash_CashRegister");

                entity.HasOne(d => d.IdSellerNavigation)
                    .WithMany(p => p.SessionCash)
                    .HasForeignKey(d => d.IdSeller)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SessionCash_User");
            });

            modelBuilder.Entity<SessionContract>(entity =>
            {
                entity.ToTable("SessionContract", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdContractNavigation)
                    .WithMany(p => p.SessionContract)
                    .HasForeignKey(d => d.IdContract)
                    .HasConstraintName("FK_SessionContract_Contract");

                entity.HasOne(d => d.IdSessionNavigation)
                    .WithMany(p => p.SessionContract)
                    .HasForeignKey(d => d.IdSession)
                    .HasConstraintName("FK_SessionContract_Session");
            });

            modelBuilder.Entity<SessionLoanInstallment>(entity =>
            {
                entity.ToTable("SessionLoanInstallment", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdContractNavigation)
                    .WithMany(p => p.SessionLoanInstallment)
                    .HasForeignKey(d => d.IdContract)
                    .HasConstraintName("FK_SessionLoan_Contract");

                entity.HasOne(d => d.IdLoanInstallmentNavigation)
                    .WithMany(p => p.SessionLoanInstallment)
                    .HasForeignKey(d => d.IdLoanInstallment)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SessionLoan_LoanInstallment");

                entity.HasOne(d => d.IdSessionNavigation)
                    .WithMany(p => p.SessionLoanInstallment)
                    .HasForeignKey(d => d.IdSession)
                    .HasConstraintName("FK_SessionLoan_Session");
            });

            modelBuilder.Entity<Settlement>(entity =>
            {
                entity.ToTable("Settlement", "Payment");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.CommitmentDate).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Direction).HasDefaultValueSql("((1))");

                entity.Property(e => e.Holder).HasMaxLength(255);

                entity.Property(e => e.IdStatus).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsDepositSettlement)
                    .IsRequired()
                    .HasDefaultValueSql("('false')");

                entity.Property(e => e.IssuingBank).HasMaxLength(255);

                entity.Property(e => e.Label).HasMaxLength(255);

                entity.Property(e => e.SettlementDate).HasColumnType("date");

                entity.Property(e => e.SettlementReference).HasMaxLength(100);

                entity.Property(e => e.Type).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdBankAccountNavigation)
                    .WithMany(p => p.Settlement)
                    .HasForeignKey(d => d.IdBankAccount)
                    .HasConstraintName("FK_Settlement_BankAccount");

                entity.HasOne(d => d.IdPaymentMethodNavigation)
                    .WithMany(p => p.Settlement)
                    .HasForeignKey(d => d.IdPaymentMethod)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Settlement_PaymentMethod");

                entity.HasOne(d => d.IdPaymentSlipNavigation)
                    .WithMany(p => p.Settlement)
                    .HasForeignKey(d => d.IdPaymentSlip)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Settlement_PaymentSlip");

                entity.HasOne(d => d.IdPaymentStatusNavigation)
                    .WithMany(p => p.Settlement)
                    .HasForeignKey(d => d.IdPaymentStatus)
                    .HasConstraintName("FK_Settlement_PaymentStatus");

                entity.HasOne(d => d.IdReconciliationNavigation)
                    .WithMany(p => p.Settlement)
                    .HasForeignKey(d => d.IdReconciliation)
                    .HasConstraintName("FK_Settlement_Reconciliation");

                entity.HasOne(d => d.IdSessionCashNavigation)
                    .WithMany(p => p.Settlement)
                    .HasForeignKey(d => d.IdSessionCash)
                    .HasConstraintName("FK_Settlement_SessionCash");

                entity.HasOne(d => d.IdStatusNavigation)
                    .WithMany(p => p.Settlement)
                    .HasForeignKey(d => d.IdStatus)
                    .HasConstraintName("FK_Settlement_DocumentStatus");

                entity.HasOne(d => d.IdTiersNavigation)
                    .WithMany(p => p.Settlement)
                    .HasForeignKey(d => d.IdTiers)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Settlement_Tiers");

                entity.HasOne(d => d.IdUsedCurrencyNavigation)
                    .WithMany(p => p.Settlement)
                    .HasForeignKey(d => d.IdUsedCurrency)
                    .HasConstraintName("FK_Settlement_Currency");
            });

            modelBuilder.Entity<SettlementCommitment>(entity =>
            {
                entity.ToTable("SettlementCommitment", "Payment");

                entity.HasIndex(e => new { e.CommitmentId, e.SettlementId }, "IX_SettlementCommitment")
                    .IsUnique();

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.Commitment)
                    .WithMany(p => p.SettlementCommitment)
                    .HasForeignKey(d => d.CommitmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SettlementCommitment_FinancialCommitment");

                entity.HasOne(d => d.Settlement)
                    .WithMany(p => p.SettlementCommitment)
                    .HasForeignKey(d => d.SettlementId)
                    .HasConstraintName("FK_SettlementCommitment_Settlement");
            });

            modelBuilder.Entity<SettlementDocumentWithholdingTax>(entity =>
            {
                entity.ToTable("SettlementDocumentWithholdingTax", "Payment");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdDocumentWithholdingTaxNavigation)
                    .WithMany(p => p.SettlementDocumentWithholdingTax)
                    .HasForeignKey(d => d.IdDocumentWithholdingTax)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SettlementDocumentWithholdingTax_DocumentWithholdingTax");

                entity.HasOne(d => d.IdSettlementNavigation)
                    .WithMany(p => p.SettlementDocumentWithholdingTax)
                    .HasForeignKey(d => d.IdSettlement)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SettlementDocumentWithholdingTax_Settlement");
            });

            modelBuilder.Entity<SettlementMode>(entity =>
            {
                entity.ToTable("SettlementMode", "Sales");

                entity.HasIndex(e => new { e.DeletedToken, e.Code }, "UniqueCodeSettlementMode")
                    .IsUnique();

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(255);
            });

            modelBuilder.Entity<SettlementType>(entity =>
            {
                entity.ToTable("SettlementType", "Sales");

                entity.HasIndex(e => new { e.DeletedToken, e.Code }, "UniqueCodeSettlementType")
                    .IsUnique();

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(255);
            });

            modelBuilder.Entity<SharedDocument>(entity =>
            {
                entity.ToTable("SharedDocument", "Payroll");

                entity.Property(e => e.AttachmentUrl)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.SubmissionDate).HasColumnType("datetime");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.SharedDocument)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SharedDocument_Employee");

                entity.HasOne(d => d.IdTypeNavigation)
                    .WithMany(p => p.SharedDocument)
                    .HasForeignKey(d => d.IdType)
                    .HasConstraintName("FK_SharedDocument_Type");

                entity.HasOne(d => d.TransactionUser)
                    .WithMany(p => p.SharedDocument)
                    .HasForeignKey(d => d.TransactionUserId)
                    .HasConstraintName("FK_SharedDocument_User");
            });

            modelBuilder.Entity<Shelf>(entity =>
            {
                entity.ToTable("Shelf", "Inventory");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(250);

                entity.HasOne(d => d.IdWharehouseNavigation)
                    .WithMany(p => p.Shelf)
                    .HasForeignKey(d => d.IdWharehouse)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Shelf_Warehouse");
            });

            modelBuilder.Entity<Skills>(entity =>
            {
                entity.ToTable("Skills", "Payroll");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.IdFamily).HasColumnName("Id_Family");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.IdFamilyNavigation)
                    .WithMany(p => p.Skills)
                    .HasForeignKey(d => d.IdFamily)
                    .HasConstraintName("FK_Family_Skills");
            });

            modelBuilder.Entity<SkillsFamily>(entity =>
            {
                entity.ToTable("SkillsFamily", "Payroll");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(250);
            });

            modelBuilder.Entity<SourceDeduction>(entity =>
            {
                entity.ToTable("SourceDeduction", "Payroll");

                entity.Property(e => e.CreationDate).HasColumnType("date");

                entity.Property(e => e.Css).HasColumnName("CSS");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.SumIrpp).HasColumnName("SumIRPP");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.SourceDeduction)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SourceDeduction_Employee");

                entity.HasOne(d => d.IdSourceDeductionSessionNavigation)
                    .WithMany(p => p.SourceDeduction)
                    .HasForeignKey(d => d.IdSourceDeductionSession)
                    .HasConstraintName("FK_SourceDeduction_SourceDeductionSession");
            });

            modelBuilder.Entity<SourceDeductionSession>(entity =>
            {
                entity.ToTable("SourceDeductionSession", "Payroll");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreationDate).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(125);
            });

            modelBuilder.Entity<SourceDeductionSessionEmployee>(entity =>
            {
                entity.ToTable("SourceDeductionSessionEmployee", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.SourceDeductionSessionEmployee)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SourceDeductionSessionEmployee_Employee");

                entity.HasOne(d => d.IdSourceDeductionSessionNavigation)
                    .WithMany(p => p.SourceDeductionSessionEmployee)
                    .HasForeignKey(d => d.IdSourceDeductionSession)
                    .HasConstraintName("FK_SourceDeductionSessionEmployee_SourceDeductionSession");
            });

            modelBuilder.Entity<StockDocument>(entity =>
            {
                entity.ToTable("StockDocument", "Inventory");

                entity.HasIndex(e => e.Code, "IX_StockDocument")
                    .IsUnique();

                entity.HasIndex(e => new { e.DeletedToken, e.Code }, "UniqueCodeStockDocument")
                    .IsUnique();

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.Informations).HasMaxLength(255);

                entity.Property(e => e.IsDefaultValue).HasColumnName("isDefaultValue");

                entity.Property(e => e.IsOnlyAvailableQuantity).HasColumnName("isOnlyAvailableQuantity");

                entity.Property(e => e.Reference).HasMaxLength(50);

                entity.Property(e => e.Shelf).HasMaxLength(50);

                entity.Property(e => e.TransferType).HasMaxLength(50);

                entity.Property(e => e.TypeStockDocument).HasMaxLength(50);

                entity.Property(e => e.ValidationDate).HasColumnType("datetime");

                entity.HasOne(d => d.IdDocumentStatusNavigation)
                    .WithMany(p => p.StockDocument)
                    .HasForeignKey(d => d.IdDocumentStatus)
                    .HasConstraintName("FK_StockDocument_DocumentStatus");

                entity.HasOne(d => d.IdInputUser1Navigation)
                    .WithMany(p => p.StockDocumentIdInputUser1Navigation)
                    .HasForeignKey(d => d.IdInputUser1)
                    .HasConstraintName("FK_StockDocument_User1");

                entity.HasOne(d => d.IdInputUser2Navigation)
                    .WithMany(p => p.StockDocumentIdInputUser2Navigation)
                    .HasForeignKey(d => d.IdInputUser2)
                    .HasConstraintName("FK_StockDocument_User2");

                entity.HasOne(d => d.IdStorageDestinationNavigation)
                    .WithMany(p => p.StockDocumentIdStorageDestinationNavigation)
                    .HasForeignKey(d => d.IdStorageDestination)
                    .HasConstraintName("FK_StockDocument_Storage1");

                entity.HasOne(d => d.IdStorageSourceNavigation)
                    .WithMany(p => p.StockDocumentIdStorageSourceNavigation)
                    .HasForeignKey(d => d.IdStorageSource)
                    .HasConstraintName("FK_StockDocument_Storage");

                entity.HasOne(d => d.IdTiersNavigation)
                    .WithMany(p => p.StockDocument)
                    .HasForeignKey(d => d.IdTiers)
                    .HasConstraintName("FK_StockDocument_Tiers");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.StockDocumentIdUserNavigation)
                    .HasForeignKey(d => d.IdUser)
                    .HasConstraintName("FK_StockDocument_User");

                entity.HasOne(d => d.IdWarehouseDestinationNavigation)
                    .WithMany(p => p.StockDocumentIdWarehouseDestinationNavigation)
                    .HasForeignKey(d => d.IdWarehouseDestination)
                    .HasConstraintName("FK_StockDocument_Warehouse");

                entity.HasOne(d => d.IdWarehouseSourceNavigation)
                    .WithMany(p => p.StockDocumentIdWarehouseSourceNavigation)
                    .HasForeignKey(d => d.IdWarehouseSource)
                    .HasConstraintName("FK_StockDocument_Warehouse1");

                entity.HasOne(d => d.TypeStockDocumentNavigation)
                    .WithMany(p => p.StockDocument)
                    .HasForeignKey(d => d.TypeStockDocument)
                    .HasConstraintName("FK_StockDocument_TypeStockDocument");
            });

            modelBuilder.Entity<StockDocumentLine>(entity =>
            {
                entity.ToTable("StockDocumentLine", "Inventory");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Shelf).HasMaxLength(50);

                entity.Property(e => e.Storage).HasMaxLength(50);

                entity.HasOne(d => d.IdItemNavigation)
                    .WithMany(p => p.StockDocumentLine)
                    .HasForeignKey(d => d.IdItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockDocumentLine_Item");

                entity.HasOne(d => d.IdStockDocumentNavigation)
                    .WithMany(p => p.StockDocumentLine)
                    .HasForeignKey(d => d.IdStockDocument)
                    .HasConstraintName("FK_StockDocumentLine_StockDocument");

                entity.HasOne(d => d.IdWarehouseNavigation)
                    .WithMany(p => p.StockDocumentLine)
                    .HasForeignKey(d => d.IdWarehouse)
                    .HasConstraintName("FK_StockDocumentLine_Warehouse");
            });

            modelBuilder.Entity<StockDocumentType>(entity =>
            {
                entity.HasKey(e => e.CodeType)
                    .HasName("PK_TypeStockDocument");

                entity.ToTable("StockDocumentType", "Inventory");

                entity.Property(e => e.CodeType).HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.StockOperation).HasMaxLength(50);

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<StockMovement>(entity =>
            {
                entity.ToTable("StockMovement", "Inventory");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Operation).HasMaxLength(255);

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.HasOne(d => d.IdClaimNavigation)
                    .WithMany(p => p.StockMovement)
                    .HasForeignKey(d => d.IdClaim)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_StockMovement_Claim");

                entity.HasOne(d => d.IdDocumentLineNavigation)
                    .WithMany(p => p.StockMovement)
                    .HasForeignKey(d => d.IdDocumentLine)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_StockMovement_DocumentLine");

                entity.HasOne(d => d.IdItemNavigation)
                    .WithMany(p => p.StockMovement)
                    .HasForeignKey(d => d.IdItem)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_StockMovement_Item");

                entity.HasOne(d => d.IdStockDocumentLineNavigation)
                    .WithMany(p => p.StockMovement)
                    .HasForeignKey(d => d.IdStockDocumentLine)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_StockMovement_StockDocumentLine");

                entity.HasOne(d => d.IdWarehouseNavigation)
                    .WithMany(p => p.StockMovement)
                    .HasForeignKey(d => d.IdWarehouse)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StockMovement_Warehouse");
            });

            modelBuilder.Entity<Storage>(entity =>
            {
                entity.ToTable("Storage", "Inventory");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(250);

                entity.HasOne(d => d.IdResponsableNavigation)
                    .WithMany(p => p.Storage)
                    .HasForeignKey(d => d.IdResponsable)
                    .HasConstraintName("FK_Storage_User");

                entity.HasOne(d => d.IdShelfNavigation)
                    .WithMany(p => p.Storage)
                    .HasForeignKey(d => d.IdShelf)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Storage_Shelf");
            });

            modelBuilder.Entity<SubFamily>(entity =>
            {
                entity.ToTable("SubFamily", "Inventory");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(250);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UrlPicture).HasMaxLength(255);

                entity.HasOne(d => d.IdFamilyNavigation)
                    .WithMany(p => p.SubFamily)
                    .HasForeignKey(d => d.IdFamily)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubFamily_Family");
            });

            modelBuilder.Entity<SubModel>(entity =>
            {
                entity.ToTable("SubModel", "Inventory");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(250);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UrlPicture).HasMaxLength(255);

                entity.HasOne(d => d.IdModelNavigation)
                    .WithMany(p => p.SubModel)
                    .HasForeignKey(d => d.IdModel)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubModel_Model");
            });

            modelBuilder.Entity<Taxe>(entity =>
            {
                entity.ToTable("Taxe", "Shared");

                entity.HasIndex(e => new { e.DeletedToken, e.CodeTaxe }, "UniqueCodeTaxe")
                    .IsUnique();

                entity.Property(e => e.CodeTaxe).HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(255);

                entity.Property(e => e.TaxeType).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdTaxeTypeNavigation)
                    .WithMany(p => p.Taxe)
                    .HasForeignKey(d => d.IdTaxeType)
                    .HasConstraintName("FK_Taxe_TaxeType");
            });

            modelBuilder.Entity<TaxeGroupTiers>(entity =>
            {
                entity.ToTable("TaxeGroupTiers", "Sales");

                entity.HasIndex(e => new { e.DeletedToken, e.Code }, "UniqueCodeTaxeGroupTiers")
                    .IsUnique();

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(255);
            });

            modelBuilder.Entity<TaxeGroupTiersConfig>(entity =>
            {
                entity.ToTable("TaxeGroupTiersConfig", "Sales");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdTaxeNavigation)
                    .WithMany(p => p.TaxeGroupTiersConfig)
                    .HasForeignKey(d => d.IdTaxe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TaxeTiersConfig_Taxe");

                entity.HasOne(d => d.IdTaxeGroupTiersNavigation)
                    .WithMany(p => p.TaxeGroupTiersConfig)
                    .HasForeignKey(d => d.IdTaxeGroupTiers)
                    .HasConstraintName("FK_TaxeTiersConfig_TaxeGroupTiers");
            });

            modelBuilder.Entity<TaxeItem>(entity =>
            {
                entity.ToTable("TaxeItem", "Inventory");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdItemNavigation)
                    .WithMany(p => p.TaxeItem)
                    .HasForeignKey(d => d.IdItem)
                    .HasConstraintName("FK_TaxeItem_Item");

                entity.HasOne(d => d.IdTaxeNavigation)
                    .WithMany(p => p.TaxeItem)
                    .HasForeignKey(d => d.IdTaxe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TaxeItem_Taxe");
            });

            modelBuilder.Entity<TaxeType>(entity =>
            {
                entity.ToTable("TaxeType", "Shared");

                entity.HasIndex(e => new { e.DeletedToken, e.TaxeTypeCode }, "UniqueCodeTaxeType")
                    .IsUnique();

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.TaxeTypeCode)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Team>(entity =>
            {
                entity.ToTable("Team", "Payroll");

                entity.Property(e => e.CreationDate).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.TeamCode).HasMaxLength(255);

                entity.HasOne(d => d.IdDepartmentNavigation)
                    .WithMany(p => p.Team)
                    .HasForeignKey(d => d.IdDepartment)
                    .HasConstraintName("FK_Team_Department");

                entity.HasOne(d => d.IdManagerNavigation)
                    .WithMany(p => p.Team)
                    .HasForeignKey(d => d.IdManager)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Team_Employee");

                entity.HasOne(d => d.IdTeamTypeNavigation)
                    .WithMany(p => p.Team)
                    .HasForeignKey(d => d.IdTeamType)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Team_TeamType");
            });

            modelBuilder.Entity<TeamType>(entity =>
            {
                entity.ToTable("TeamType", "Payroll");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Label).HasMaxLength(50);
            });

            modelBuilder.Entity<Ticket>(entity =>
            {
                entity.ToTable("Ticket", "Treasury");

                entity.Property(e => e.Code).HasMaxLength(255);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.HasOne(d => d.IdDeliveryFormNavigation)
                    .WithMany(p => p.TicketIdDeliveryFormNavigation)
                    .HasForeignKey(d => d.IdDeliveryForm)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ticket_Document");

                entity.HasOne(d => d.IdInvoiceNavigation)
                    .WithMany(p => p.TicketIdInvoiceNavigation)
                    .HasForeignKey(d => d.IdInvoice)
                    .HasConstraintName("FK_Ticket_Document1");

                entity.HasOne(d => d.IdSessionCashNavigation)
                    .WithMany(p => p.Ticket)
                    .HasForeignKey(d => d.IdSessionCash)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ticket_SessionCash");
            });

            modelBuilder.Entity<TicketPayment>(entity =>
            {
                entity.ToTable("TicketPayment", "Treasury");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdPaymentTypeNavigation)
                    .WithMany(p => p.TicketPayment)
                    .HasForeignKey(d => d.IdPaymentType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TicketPayment_PaymentType");

                entity.HasOne(d => d.IdTicketNavigation)
                    .WithMany(p => p.TicketPayment)
                    .HasForeignKey(d => d.IdTicket)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TicketPayment_Ticket");
            });

            modelBuilder.Entity<TierCategory>(entity =>
            {
                entity.ToTable("TierCategory", "Sales");

                entity.HasIndex(e => e.Code, "UniqueCodeTierCategory")
                    .IsUnique();

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Name).HasMaxLength(255);
            });

            modelBuilder.Entity<Tiers>(entity =>
            {
                entity.ToTable("Tiers", "Sales");

                entity.HasIndex(e => new { e.DeletedToken, e.CodeTiers, e.IdTypeTiers }, "UniqueCodeTiers")
                    .IsUnique();

                entity.Property(e => e.ActivitySector).HasMaxLength(50);

                entity.Property(e => e.Cin)
                    .HasMaxLength(50)
                    .HasColumnName("CIN");

                entity.Property(e => e.CodeTiers).HasMaxLength(50);

                entity.Property(e => e.CommercialRegister).HasMaxLength(255);

                entity.Property(e => e.CounterPartyAccount).HasMaxLength(50);

                entity.Property(e => e.Cp)
                    .HasMaxLength(255)
                    .HasColumnName("CP");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.Facebook).HasMaxLength(255);

                entity.Property(e => e.Fax).HasMaxLength(255);

                entity.Property(e => e.IsCash).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsSynchronizedBtoB).HasColumnName("IsSynchronizedBToB");

                entity.Property(e => e.LeadSource).HasMaxLength(50);

                entity.Property(e => e.Linkedin).HasMaxLength(255);

                entity.Property(e => e.Logo).HasColumnType("image");

                entity.Property(e => e.MapLocalisation).HasMaxLength(255);

                entity.Property(e => e.MatriculeFiscale).HasMaxLength(255);

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.Phone).HasMaxLength(255);

                entity.Property(e => e.Rib).HasMaxLength(255);

                entity.Property(e => e.TiersClassification).HasDefaultValueSql("((1))");

                entity.Property(e => e.Twitter).HasMaxLength(255);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UrlPicture).HasMaxLength(255);

                entity.HasOne(d => d.IdCityNavigation)
                    .WithMany(p => p.Tiers)
                    .HasForeignKey(d => d.IdCity)
                    .HasConstraintName("FK_Tiers_City");

                entity.HasOne(d => d.IdCountryNavigation)
                    .WithMany(p => p.Tiers)
                    .HasForeignKey(d => d.IdCountry)
                    .HasConstraintName("FK_Tiers_Country");

                entity.HasOne(d => d.IdCurrencyNavigation)
                    .WithMany(p => p.Tiers)
                    .HasForeignKey(d => d.IdCurrency)
                    .HasConstraintName("FK_Tiers_Currency");

                entity.HasOne(d => d.IdPaymentConditionNavigation)
                    .WithMany(p => p.Tiers)
                    .HasForeignKey(d => d.IdPaymentCondition)
                    .HasConstraintName("FK_TIERS_ASSOCIATI_PAYEMENT");

                entity.HasOne(d => d.IdPhoneNavigation)
                    .WithMany(p => p.Tiers)
                    .HasForeignKey(d => d.IdPhone)
                    .HasConstraintName("FK_Tiers_Phone");

                entity.HasOne(d => d.IdSalesPriceNavigation)
                    .WithMany(p => p.Tiers)
                    .HasForeignKey(d => d.IdSalesPrice)
                    .HasConstraintName("FK_Tiers_SalesPrice");

                entity.HasOne(d => d.IdSettlementModeNavigation)
                         .WithMany(p => p.Tiers)
                         .HasForeignKey(d => d.IdSettlementMode)
                         .HasConstraintName("FK_Tiers_SettlementMode");


                entity.HasOne(d => d.IdTaxeGroupTiersNavigation)
                    .WithMany(p => p.Tiers)
                    .HasForeignKey(d => d.IdTaxeGroupTiers)
                    .HasConstraintName("FK_Tiers_TaxeGroupTiers");

                entity.HasOne(d => d.IdTierCategoryNavigation)
                    .WithMany(p => p.Tiers)
                    .HasForeignKey(d => d.IdTierCategory)
                    .HasConstraintName("FK_Tiers_TierCategory");

                entity.HasOne(d => d.IdTypeTiersNavigation)
                    .WithMany(p => p.Tiers)
                    .HasForeignKey(d => d.IdTypeTiers)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TIERS_ASSOCIATI_TYPETIER");
            });

            modelBuilder.Entity<TiersPrices>(entity =>
            {
                entity.ToTable("TiersPrices", "Sales");

                entity.HasIndex(e => new { e.IdPrices, e.IdTiers, e.DeletedToken }, "IX_TiersPrices")
                    .IsUnique();

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdPricesNavigation)
                    .WithMany(p => p.TiersPrices)
                    .HasForeignKey(d => d.IdPrices)
                    .HasConstraintName("FK_TiersPrices_Prices");

                entity.HasOne(d => d.IdTiersNavigation)
                    .WithMany(p => p.TiersPrices)
                    .HasForeignKey(d => d.IdTiers)
                    .HasConstraintName("FK_TiersPrices_Tiers");
            });

            modelBuilder.Entity<TiersProvisioning>(entity =>
            {
                entity.ToTable("Tiers_Provisioning", "Sales");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdProvisioningNavigation)
                    .WithMany(p => p.TiersProvisioning)
                    .HasForeignKey(d => d.IdProvisioning)
                    .HasConstraintName("FK_Tiers_Provisioning_Tiers_Provisioning");

                entity.HasOne(d => d.IdTiersNavigation)
                    .WithMany(p => p.TiersProvisioning)
                    .HasForeignKey(d => d.IdTiers)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Tiers_Provisioning_Provisioning");
            });

            modelBuilder.Entity<TimeSheet>(entity =>
            {
                entity.ToTable("TimeSheet", "RH");

                entity.Property(e => e.AttachementFile).HasMaxLength(255);

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Month).HasColumnType("date");

                entity.Property(e => e.TreatmentDate).HasColumnType("date");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.TimeSheetIdEmployeeNavigation)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TimeSheet_Employee");

                entity.HasOne(d => d.IdEmployeeTreatedNavigation)
                    .WithMany(p => p.TimeSheetIdEmployeeTreatedNavigation)
                    .HasForeignKey(d => d.IdEmployeeTreated)
                    .HasConstraintName("FK_TimeSheet_Employee1");
            });

            modelBuilder.Entity<TimeSheetLine>(entity =>
            {
                entity.ToTable("TimeSheetLine", "RH");

                entity.Property(e => e.Day).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdDayOffNavigation)
                    .WithMany(p => p.TimeSheetLine)
                    .HasForeignKey(d => d.IdDayOff)
                    .HasConstraintName("FK_TimeSheetLine_DayOff");

                entity.HasOne(d => d.IdLeaveNavigation)
                    .WithMany(p => p.TimeSheetLine)
                    .HasForeignKey(d => d.IdLeave)
                    .HasConstraintName("FK_TimeSheetLine_Leave");

                entity.HasOne(d => d.IdProjectNavigation)
                    .WithMany(p => p.TimeSheetLine)
                    .HasForeignKey(d => d.IdProject)
                    .HasConstraintName("FK_TimeSheetLine_Project");

                entity.HasOne(d => d.IdTimeSheetNavigation)
                    .WithMany(p => p.TimeSheetLine)
                    .HasForeignKey(d => d.IdTimeSheet)
                    .HasConstraintName("FK_TimeSheetLine_TimeSheet");
            });

            modelBuilder.Entity<Timetable>(entity =>
            {
                entity.ToTable("Timetable", "Treasury");

                entity.Property(e => e.DateFirstTimetable).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Frequence).HasMaxLength(255);

                entity.Property(e => e.IdTimetableAxis1).HasColumnName("IdTimetableAxis_1");

                entity.Property(e => e.IdTimetableAxis10).HasColumnName("IdTimetableAxis_10");

                entity.Property(e => e.IdTimetableAxis11).HasColumnName("IdTimetableAxis_11");

                entity.Property(e => e.IdTimetableAxis12).HasColumnName("IdTimetableAxis_12");

                entity.Property(e => e.IdTimetableAxis13).HasColumnName("IdTimetableAxis_13");

                entity.Property(e => e.IdTimetableAxis14).HasColumnName("IdTimetableAxis_14");

                entity.Property(e => e.IdTimetableAxis15).HasColumnName("IdTimetableAxis_15");

                entity.Property(e => e.IdTimetableAxis16).HasColumnName("IdTimetableAxis_16");

                entity.Property(e => e.IdTimetableAxis17).HasColumnName("IdTimetableAxis_17");

                entity.Property(e => e.IdTimetableAxis18).HasColumnName("IdTimetableAxis_18");

                entity.Property(e => e.IdTimetableAxis19).HasColumnName("IdTimetableAxis_19");

                entity.Property(e => e.IdTimetableAxis2).HasColumnName("IdTimetableAxis_2");

                entity.Property(e => e.IdTimetableAxis20).HasColumnName("IdTimetableAxis_20");

                entity.Property(e => e.IdTimetableAxis21).HasColumnName("IdTimetableAxis_21");

                entity.Property(e => e.IdTimetableAxis22).HasColumnName("IdTimetableAxis_22");

                entity.Property(e => e.IdTimetableAxis23).HasColumnName("IdTimetableAxis_23");

                entity.Property(e => e.IdTimetableAxis24).HasColumnName("IdTimetableAxis_24");

                entity.Property(e => e.IdTimetableAxis25).HasColumnName("IdTimetableAxis_25");

                entity.Property(e => e.IdTimetableAxis26).HasColumnName("IdTimetableAxis_26");

                entity.Property(e => e.IdTimetableAxis27).HasColumnName("IdTimetableAxis_27");

                entity.Property(e => e.IdTimetableAxis28).HasColumnName("IdTimetableAxis_28");

                entity.Property(e => e.IdTimetableAxis29).HasColumnName("IdTimetableAxis_29");

                entity.Property(e => e.IdTimetableAxis3).HasColumnName("IdTimetableAxis_3");

                entity.Property(e => e.IdTimetableAxis30).HasColumnName("IdTimetableAxis_30");

                entity.Property(e => e.IdTimetableAxis4).HasColumnName("IdTimetableAxis_4");

                entity.Property(e => e.IdTimetableAxis5).HasColumnName("IdTimetableAxis_5");

                entity.Property(e => e.IdTimetableAxis6).HasColumnName("IdTimetableAxis_6");

                entity.Property(e => e.IdTimetableAxis7).HasColumnName("IdTimetableAxis_7");

                entity.Property(e => e.IdTimetableAxis8).HasColumnName("IdTimetableAxis_8");

                entity.Property(e => e.IdTimetableAxis9).HasColumnName("IdTimetableAxis_9");

                entity.Property(e => e.Titre).HasMaxLength(255);

                entity.HasOne(d => d.IdPaymentTypeNavigation)
                    .WithMany(p => p.Timetable)
                    .HasForeignKey(d => d.IdPaymentType)
                    .HasConstraintName("FK_Timetable_PaymentType");

                entity.HasOne(d => d.IdTiersNavigation)
                    .WithMany(p => p.Timetable)
                    .HasForeignKey(d => d.IdTiers)
                    .HasConstraintName("FK_Timetable_Tiers");
            });

            modelBuilder.Entity<Training>(entity =>
            {
                entity.ToTable("Training", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("text");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(225);

                entity.Property(e => e.TrainingPictureUrl).HasMaxLength(255);

                entity.HasOne(d => d.IdSupplierNavigation)
                    .WithMany(p => p.Training)
                    .HasForeignKey(d => d.IdSupplier)
                    .HasConstraintName("FK_Training_Supplier");
            });

            modelBuilder.Entity<TrainingByEmployee>(entity =>
            {
                entity.ToTable("TrainingByEmployee", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.TrainingByEmployee)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TrainngByEmployee_Employee");

                entity.HasOne(d => d.IdTrainingNavigation)
                    .WithMany(p => p.TrainingByEmployee)
                    .HasForeignKey(d => d.IdTraining)
                    .HasConstraintName("FK_TrainngByEmployee_Training");
            });

            modelBuilder.Entity<TrainingCenter>(entity =>
            {
                entity.ToTable("TrainingCenter", "RH");

                entity.Property(e => e.CenterPhoneNumber).HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.Place).HasMaxLength(255);

                entity.HasOne(d => d.IdTrainingCenterManagerNavigation)
                    .WithMany(p => p.TrainingCenter)
                    .HasForeignKey(d => d.IdTrainingCenterManager)
                    .HasConstraintName("FK_TrainingCenter_TrainingCenterManager");
            });

            modelBuilder.Entity<TrainingCenterManager>(entity =>
            {
                entity.ToTable("TrainingCenterManager", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.FirstName).HasMaxLength(255);

                entity.Property(e => e.LastName).HasMaxLength(255);

                entity.Property(e => e.PhoneNumber).HasMaxLength(50);
            });

            modelBuilder.Entity<TrainingCenterRoom>(entity =>
            {
                entity.ToTable("TrainingCenterRoom", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.HasOne(d => d.IdTrainingCenterNavigation)
                    .WithMany(p => p.TrainingCenterRoom)
                    .HasForeignKey(d => d.IdTrainingCenter)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TrainingCenterRoom_TrainingCenter");
            });

            modelBuilder.Entity<TrainingExpectedSkills>(entity =>
            {
                entity.ToTable("TrainingExpectedSkills", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdSkillsNavigation)
                    .WithMany(p => p.TrainingExpectedSkills)
                    .HasForeignKey(d => d.IdSkills)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TrainingExcpectedSkills_Skills");

                entity.HasOne(d => d.IdTrainingNavigation)
                    .WithMany(p => p.TrainingExpectedSkills)
                    .HasForeignKey(d => d.IdTraining)
                    .HasConstraintName("FK_TrainingExpectedSkills_Training");
            });

            modelBuilder.Entity<TrainingRequest>(entity =>
            {
                entity.ToTable("TrainingRequest", "RH");

                entity.Property(e => e.CreationDate).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.ExpectedDate).HasColumnType("date");

                entity.Property(e => e.TreatmentDate).HasColumnType("date");

                entity.HasOne(d => d.IdEmployeeAuthorNavigation)
                    .WithMany(p => p.TrainingRequestIdEmployeeAuthorNavigation)
                    .HasForeignKey(d => d.IdEmployeeAuthor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TrainingRequest_Author");

                entity.HasOne(d => d.IdEmployeeCollaboratorNavigation)
                    .WithMany(p => p.TrainingRequestIdEmployeeCollaboratorNavigation)
                    .HasForeignKey(d => d.IdEmployeeCollaborator)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TrainingRequest_Collaborator");

                entity.HasOne(d => d.IdTrainingNavigation)
                    .WithMany(p => p.TrainingRequest)
                    .HasForeignKey(d => d.IdTraining)
                    .HasConstraintName("FK_TrainingRequest_Training");

                entity.HasOne(d => d.IdTrainingSessionNavigation)
                    .WithMany(p => p.TrainingRequest)
                    .HasForeignKey(d => d.IdTrainingSession)
                    .HasConstraintName("FK_TrainingRequest_TrainingSession");
            });

            modelBuilder.Entity<TrainingRequiredSkills>(entity =>
            {
                entity.ToTable("TrainingRequiredSkills", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdSkillsNavigation)
                    .WithMany(p => p.TrainingRequiredSkills)
                    .HasForeignKey(d => d.IdSkills)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TrainingRequiredSkills_Skills");

                entity.HasOne(d => d.IdTrainingNavigation)
                    .WithMany(p => p.TrainingRequiredSkills)
                    .HasForeignKey(d => d.IdTraining)
                    .HasConstraintName("FK_TrainingRequiredSkills_Training");
            });

            modelBuilder.Entity<TrainingSeance>(entity =>
            {
                entity.ToTable("TrainingSeance", "RH");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdTrainingSessionNavigation)
                    .WithMany(p => p.TrainingSeance)
                    .HasForeignKey(d => d.IdTrainingSession)
                    .HasConstraintName("FK_TrainingSeance_TrainingSession");
            });

            modelBuilder.Entity<TrainingSession>(entity =>
            {
                entity.ToTable("TrainingSession", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.SessionPlan).HasMaxLength(255);

                entity.Property(e => e.SessionPlanUrl).HasMaxLength(255);

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.TrainingSession)
                    .HasForeignKey(d => d.IdEmployee)
                    .HasConstraintName("FK_TrainingSession_Employee");

                entity.HasOne(d => d.IdExternalTrainerNavigation)
                    .WithMany(p => p.TrainingSession)
                    .HasForeignKey(d => d.IdExternalTrainer)
                    .HasConstraintName("FK_TrainingSession_ExternalTrainer");

                entity.HasOne(d => d.IdTrainingNavigation)
                    .WithMany(p => p.TrainingSession)
                    .HasForeignKey(d => d.IdTraining)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TrainingSession_Training");
            });

            modelBuilder.Entity<TransferOrder>(entity =>
            {
                entity.ToTable("TransferOrder", "Payroll");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreationDate).HasColumnType("date");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Month).HasColumnType("date");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(125);

                entity.HasOne(d => d.IdBankAccountNavigation)
                    .WithMany(p => p.TransferOrder)
                    .HasForeignKey(d => d.IdBankAccount)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransferOrder_BankAccount");
            });

            modelBuilder.Entity<TransferOrderDetails>(entity =>
            {
                entity.ToTable("TransferOrderDetails", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Rib)
                    .HasMaxLength(50)
                    .HasColumnName("RIB");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.TransferOrderDetails)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransferOrderDetails_Employee");

                entity.HasOne(d => d.IdTransferOrderNavigation)
                    .WithMany(p => p.TransferOrderDetails)
                    .HasForeignKey(d => d.IdTransferOrder)
                    .HasConstraintName("FK_TransferOrderDetails_TransferOrder");
            });

            modelBuilder.Entity<TransferOrderSession>(entity =>
            {
                entity.ToTable("TransferOrderSession", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdSessionNavigation)
                    .WithMany(p => p.TransferOrderSession)
                    .HasForeignKey(d => d.IdSession)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TransferOrderSession_Session");

                entity.HasOne(d => d.IdTransferOrderNavigation)
                    .WithMany(p => p.TransferOrderSession)
                    .HasForeignKey(d => d.IdTransferOrder)
                    .HasConstraintName("FK_TransferOrderSession_TransferOrder");
            });

            modelBuilder.Entity<TriggerItemLog>(entity =>
            {
                entity.ToTable("TriggerItemLog", "Ecommerce");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.DateLog).HasColumnType("datetime");

                entity.HasOne(d => d.IdItemNavigation)
                    .WithMany(p => p.TriggerItemLog)
                    .HasForeignKey(d => d.IdItem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TriggerItemLog_Item");
            });

            modelBuilder.Entity<TypePrices>(entity =>
            {
                entity.ToTable("TypePrices", "Sales");

                entity.HasIndex(e => new { e.DeletedToken, e.CodeTypePrices }, "UniqueCodeTypePrices")
                    .IsUnique();

                entity.Property(e => e.CodeTypePrices)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasColumnType("text");
            });

            modelBuilder.Entity<TypeTiers>(entity =>
            {
                entity.ToTable("TypeTiers", "Sales");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Label).HasMaxLength(255);
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.ToTable("User", "ERPSettings");

                entity.HasComment("Table contains list of the users");

                entity.HasIndex(e => new { e.Email, e.DeletedToken }, "UQ__User__A9D10534122247B2")
                    .IsUnique();

                entity.Property(e => e.Id).HasComment("Unique identifier");

                entity.Property(e => e.Birthday)
                    .HasColumnType("date")
                    .HasComment("Day birth user");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(150)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .HasComment("Email of user");

                entity.Property(e => e.Facebook).HasMaxLength(255);

                entity.Property(e => e.Fax).HasMaxLength(255);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(255)
                    .HasComment("FIrst name of user");

                entity.Property(e => e.FullName).HasMaxLength(255);

                entity.Property(e => e.IsActif)
                    .IsRequired()
                    .HasDefaultValueSql("('true')");

                entity.Property(e => e.IsBtoB).HasColumnName("IsBToB");

                entity.Property(e => e.IsWithEmailNotification)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Lang).HasMaxLength(10);

                entity.Property(e => e.LastConnectedIpAdress).HasMaxLength(100);

                entity.Property(e => e.LastConnection).HasColumnType("datetime");

                entity.Property(e => e.LastName)
                    .HasMaxLength(255)
                    .HasComment("Last name of user");

                entity.Property(e => e.Linkedin).HasMaxLength(255);

                entity.Property(e => e.Login)
                    .HasMaxLength(255)
                    .HasComment("Login of user");

                entity.Property(e => e.MobilePhone)
                    .HasMaxLength(20)
                    .HasComment("Mobile phone numer");

                entity.Property(e => e.Password)
                    .HasMaxLength(255)
                    .HasComment("Password of user");

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .HasComment("Phone number");

                entity.Property(e => e.Picture)
                    .HasColumnType("image")
                    .HasComment("Picture of user");

                entity.Property(e => e.Role).HasMaxLength(255);

                entity.Property(e => e.Twitter).HasMaxLength(255);

                entity.Property(e => e.UrlPicture).HasMaxLength(255);

                entity.Property(e => e.WorkPhone)
                    .HasMaxLength(20)
                    .HasComment("Work phone number");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.User)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_User_Employee");

                entity.HasOne(d => d.IdPhoneNavigation)
                    .WithMany(p => p.User)
                    .HasForeignKey(d => d.IdPhone)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_User_Phone");

                entity.HasOne(d => d.IdTiersNavigation)
                    .WithMany(p => p.User)
                    .HasForeignKey(d => d.IdTiers)
                    .HasConstraintName("FK_User_Tiers");

                entity.HasOne(d => d.IdUserParentNavigation)
                    .WithMany(p => p.InverseIdUserParentNavigation)
                    .HasForeignKey(d => d.IdUserParent)
                    .HasConstraintName("FK_User_User");
            });

            modelBuilder.Entity<UserDiscussionChat>(entity =>
            {
                entity.ToTable("UserDiscussionChat", "ERPSettings");

                entity.HasOne(d => d.IdDiscussionNavigation)
                    .WithMany(p => p.UserDiscussionChat)
                    .HasForeignKey(d => d.IdDiscussion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserDiscussionChat_DiscussionChat");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.UserDiscussionChat)
                    .HasForeignKey(d => d.IdUser)
                    .HasConstraintName("FK_UserDiscussionChat_User");
            });

            modelBuilder.Entity<UserFileAccess>(entity =>
            {
                entity.ToTable("UserFileAccess", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdFileNavigation)
                    .WithMany(p => p.UserFileAccess)
                    .HasForeignKey(d => d.IdFile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserFileAccess_FileDrive");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.UserFileAccess)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserFileAccess_User");
            });

            modelBuilder.Entity<UserFileModification>(entity =>
            {
                entity.ToTable("UserFileModification", "RH");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.ModificationDate).HasColumnType("datetime");

                entity.HasOne(d => d.IdFileNavigation)
                    .WithMany(p => p.UserFileModification)
                    .HasForeignKey(d => d.IdFile)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserFileModification_FileDrive");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.UserFileModification)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserFileModification_User");
            });

            modelBuilder.Entity<UserInfo>(entity =>
            {
                entity.HasKey(e => e.IdUserInfo);

                entity.ToTable("UserInfo", "ERPSettings");

                entity.HasIndex(e => new { e.IdUser, e.IdInformation, e.DeletedToken }, "UniqueConstraint")
                    .IsUnique();

                entity.Property(e => e.IdUserInfo).HasColumnName("idUserInfo");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdInformationNavigation)
                    .WithMany(p => p.UserInfo)
                    .HasForeignKey(d => d.IdInformation)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Info_UserInfo");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.UserInfo)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_UserInfo");
            });

            modelBuilder.Entity<UserPrivilege>(entity =>
            {
                entity.ToTable("UserPrivilege", "ERPSettings");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.HasOne(d => d.IdPrivilegeNavigation)
                    .WithMany(p => p.UserPrivilege)
                    .HasForeignKey(d => d.IdPrivilege)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserPrivilege_Privilege");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.UserPrivilege)
                    .HasForeignKey(d => d.IdUser)
                    .HasConstraintName("FK_UserPrivilege_User");
            });

            modelBuilder.Entity<UserWarehouse>(entity =>
            {
                entity.ToTable("UserWarehouse", "Inventory");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.UserMail).HasMaxLength(50);

                entity.HasOne(d => d.IdWarehouseNavigation)
                    .WithMany(p => p.UserWarehouse)
                    .HasForeignKey(d => d.IdWarehouse)
                    .HasConstraintName("FK_UserWarehouse_Warehouse");
            });

            modelBuilder.Entity<UsersBtob>(entity =>
            {
                entity.ToTable("UsersBtob", "Sales");



                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.FullName).HasMaxLength(50);

                entity.Property(e => e.LastName).HasMaxLength(50);

                entity.Property(e => e.TransactionUserEmail).HasMaxLength(250);
                entity.HasOne(d => d.IdClientNavigation)
                    .WithMany(p => p.UsersBtob)
                    .HasForeignKey(d => d.IdClient)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsersBtob_Tiers");




            });

            modelBuilder.Entity<Variable>(entity =>
            {
                entity.ToTable("Variable", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.HasOne(d => d.IdRuleUniqueReferenceNavigation)
                    .WithMany(p => p.Variable)
                    .HasForeignKey(d => d.IdRuleUniqueReference)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Variable_RuleUnique");
            });

            modelBuilder.Entity<VariableValidityPeriod>(entity =>
            {
                entity.ToTable("VariableValidityPeriod", "Payroll");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.State).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.IdVariableNavigation)
                    .WithMany(p => p.VariableValidityPeriod)
                    .HasForeignKey(d => d.IdVariable)
                    .HasConstraintName("FK_VariableValidityPeriod_Variable");
            });

            modelBuilder.Entity<Vehicle>(entity =>
            {
                entity.ToTable("Vehicle", "Sales");

                entity.Property(e => e.ChassisNumber).HasMaxLength(255);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Power).HasMaxLength(255);

                entity.Property(e => e.RegistrationNumber)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.IdTiersNavigation)
                    .WithMany(p => p.Vehicle)
                    .HasForeignKey(d => d.IdTiers)
                    .HasConstraintName("FK_Vehicle_Tiers");

                entity.HasOne(d => d.IdVehicleBrandNavigation)
                    .WithMany(p => p.Vehicle)
                    .HasForeignKey(d => d.IdVehicleBrand)
                    .HasConstraintName("FK_Vehicle_VehicleBrand");

                entity.HasOne(d => d.IdVehicleEnergyNavigation)
                    .WithMany(p => p.Vehicle)
                    .HasForeignKey(d => d.IdVehicleEnergy)
                    .HasConstraintName("FK_Vehicle_VehicleEnergy");

                entity.HasOne(d => d.IdVehicleModelNavigation)
                    .WithMany(p => p.Vehicle)
                    .HasForeignKey(d => d.IdVehicleModel)
                    .HasConstraintName("FK_Vehicle_ModelOfItem");
            });

            modelBuilder.Entity<VehicleBrand>(entity =>
            {
                entity.ToTable("VehicleBrand", "Inventory");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Label).HasMaxLength(250);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.UrlPicture).HasMaxLength(255);
            });

            modelBuilder.Entity<VehicleEnergy>(entity =>
            {
                entity.ToTable("VehicleEnergy", "Sales");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Name).HasMaxLength(255);
            });

            modelBuilder.Entity<Warehouse>(entity =>
            {
                entity.ToTable("Warehouse", "Inventory");

                entity.HasIndex(e => new { e.DeletedToken, e.WarehouseCode }, "UniqueCodeWarehouse")
                    .IsUnique();

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.WarehouseAdresse).HasMaxLength(255);

                entity.Property(e => e.WarehouseCode).HasMaxLength(255);

                entity.Property(e => e.WarehouseName).HasMaxLength(255);

                entity.HasOne(d => d.IdResponsableNavigation)
                    .WithMany(p => p.Warehouse)
                    .HasForeignKey(d => d.IdResponsable)
                    .HasConstraintName("FK_Warehouse_Employee");

                entity.HasOne(d => d.IdUserResponsableNavigation)
                    .WithMany(p => p.Warehouse)
                    .HasForeignKey(d => d.IdUserResponsable)
                    .HasConstraintName("FK_Warehouse_User");

                entity.HasOne(d => d.IdWarehouseParentNavigation)
                    .WithMany(p => p.InverseIdWarehouseParentNavigation)
                    .HasForeignKey(d => d.IdWarehouseParent)
                    .HasConstraintName("FK_Warehouse_Warehouse");
            });

            modelBuilder.Entity<WithholdingTax>(entity =>
            {
                entity.ToTable("WithholdingTax", "Payment");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Designation).HasMaxLength(255);

                entity.Property(e => e.Type).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<WithholdingTaxLine>(entity =>
            {
                entity.ToTable("WithholdingTaxLine", "Payment");

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.WithholdingTaxLineBit1).HasColumnName("WithholdingTaxLine_bit_1");

                entity.Property(e => e.WithholdingTaxLineBit10).HasColumnName("WithholdingTaxLine_bit_10");

                entity.Property(e => e.WithholdingTaxLineBit2).HasColumnName("WithholdingTaxLine_bit_2");

                entity.Property(e => e.WithholdingTaxLineBit3).HasColumnName("WithholdingTaxLine_bit_3");

                entity.Property(e => e.WithholdingTaxLineBit4).HasColumnName("WithholdingTaxLine_bit_4");

                entity.Property(e => e.WithholdingTaxLineBit5).HasColumnName("WithholdingTaxLine_bit_5");

                entity.Property(e => e.WithholdingTaxLineBit6).HasColumnName("WithholdingTaxLine_bit_6");

                entity.Property(e => e.WithholdingTaxLineBit7).HasColumnName("WithholdingTaxLine_bit_7");

                entity.Property(e => e.WithholdingTaxLineBit8).HasColumnName("WithholdingTaxLine_bit_8");

                entity.Property(e => e.WithholdingTaxLineBit9).HasColumnName("WithholdingTaxLine_bit_9");

                entity.Property(e => e.WithholdingTaxLineDate1)
                    .HasColumnType("date")
                    .HasColumnName("WithholdingTaxLine_date_1");

                entity.Property(e => e.WithholdingTaxLineDate10)
                    .HasColumnType("date")
                    .HasColumnName("WithholdingTaxLine_date_10");

                entity.Property(e => e.WithholdingTaxLineDate2)
                    .HasColumnType("date")
                    .HasColumnName("WithholdingTaxLine_date_2");

                entity.Property(e => e.WithholdingTaxLineDate3)
                    .HasColumnType("date")
                    .HasColumnName("WithholdingTaxLine_date_3");

                entity.Property(e => e.WithholdingTaxLineDate4)
                    .HasColumnType("date")
                    .HasColumnName("WithholdingTaxLine_date_4");

                entity.Property(e => e.WithholdingTaxLineDate5)
                    .HasColumnType("date")
                    .HasColumnName("WithholdingTaxLine_date_5");

                entity.Property(e => e.WithholdingTaxLineDate6)
                    .HasColumnType("date")
                    .HasColumnName("WithholdingTaxLine_date_6");

                entity.Property(e => e.WithholdingTaxLineDate7)
                    .HasColumnType("date")
                    .HasColumnName("WithholdingTaxLine_date_7");

                entity.Property(e => e.WithholdingTaxLineDate8)
                    .HasColumnType("date")
                    .HasColumnName("WithholdingTaxLine_date_8");

                entity.Property(e => e.WithholdingTaxLineDate9)
                    .HasColumnType("date")
                    .HasColumnName("WithholdingTaxLine_date_9");

                entity.Property(e => e.WithholdingTaxLineFloat1).HasColumnName("WithholdingTaxLine_float_1");

                entity.Property(e => e.WithholdingTaxLineFloat10).HasColumnName("WithholdingTaxLine_float_10");

                entity.Property(e => e.WithholdingTaxLineFloat2).HasColumnName("WithholdingTaxLine_float_2");

                entity.Property(e => e.WithholdingTaxLineFloat3).HasColumnName("WithholdingTaxLine_float_3");

                entity.Property(e => e.WithholdingTaxLineFloat4).HasColumnName("WithholdingTaxLine_float_4");

                entity.Property(e => e.WithholdingTaxLineFloat5).HasColumnName("WithholdingTaxLine_float_5");

                entity.Property(e => e.WithholdingTaxLineFloat6).HasColumnName("WithholdingTaxLine_float_6");

                entity.Property(e => e.WithholdingTaxLineFloat7).HasColumnName("WithholdingTaxLine_float_7");

                entity.Property(e => e.WithholdingTaxLineFloat8).HasColumnName("WithholdingTaxLine_float_8");

                entity.Property(e => e.WithholdingTaxLineFloat9).HasColumnName("WithholdingTaxLine_float_9");

                entity.Property(e => e.WithholdingTaxLineInt1).HasColumnName("WithholdingTaxLine_int_1");

                entity.Property(e => e.WithholdingTaxLineInt10).HasColumnName("WithholdingTaxLine_int_10");

                entity.Property(e => e.WithholdingTaxLineInt2).HasColumnName("WithholdingTaxLine_int_2");

                entity.Property(e => e.WithholdingTaxLineInt3).HasColumnName("WithholdingTaxLine_int_3");

                entity.Property(e => e.WithholdingTaxLineInt4).HasColumnName("WithholdingTaxLine_int_4");

                entity.Property(e => e.WithholdingTaxLineInt5).HasColumnName("WithholdingTaxLine_int_5");

                entity.Property(e => e.WithholdingTaxLineInt6).HasColumnName("WithholdingTaxLine_int_6");

                entity.Property(e => e.WithholdingTaxLineInt7).HasColumnName("WithholdingTaxLine_int_7");

                entity.Property(e => e.WithholdingTaxLineInt8).HasColumnName("WithholdingTaxLine_int_8");

                entity.Property(e => e.WithholdingTaxLineInt9).HasColumnName("WithholdingTaxLine_int_9");

                entity.Property(e => e.WithholdingTaxLineVarchar1)
                    .IsUnicode(false)
                    .HasColumnName("WithholdingTaxLine_varchar_1");

                entity.Property(e => e.WithholdingTaxLineVarchar10)
                    .IsUnicode(false)
                    .HasColumnName("WithholdingTaxLine_varchar_10");

                entity.Property(e => e.WithholdingTaxLineVarchar2)
                    .IsUnicode(false)
                    .HasColumnName("WithholdingTaxLine_varchar_2");

                entity.Property(e => e.WithholdingTaxLineVarchar3)
                    .IsUnicode(false)
                    .HasColumnName("WithholdingTaxLine_varchar_3");

                entity.Property(e => e.WithholdingTaxLineVarchar4)
                    .IsUnicode(false)
                    .HasColumnName("WithholdingTaxLine_varchar_4");

                entity.Property(e => e.WithholdingTaxLineVarchar5)
                    .IsUnicode(false)
                    .HasColumnName("WithholdingTaxLine_varchar_5");

                entity.Property(e => e.WithholdingTaxLineVarchar6)
                    .IsUnicode(false)
                    .HasColumnName("WithholdingTaxLine_varchar_6");

                entity.Property(e => e.WithholdingTaxLineVarchar7)
                    .IsUnicode(false)
                    .HasColumnName("WithholdingTaxLine_varchar_7");

                entity.Property(e => e.WithholdingTaxLineVarchar8)
                    .IsUnicode(false)
                    .HasColumnName("WithholdingTaxLine_varchar_8");

                entity.Property(e => e.WithholdingTaxLineVarchar9)
                    .IsUnicode(false)
                    .HasColumnName("WithholdingTaxLine_varchar_9");

                entity.HasOne(d => d.IdWithholdingTaxNavigation)
                    .WithMany(p => p.WithholdingTaxLine)
                    .HasForeignKey(d => d.IdWithholdingTax)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WithholdingTaxLine_WithholdingTax");
            });

            modelBuilder.Entity<ZipCode>(entity =>
            {
                entity.ToTable("ZipCode", "Shared");

                entity.Property(e => e.Code)
                    .HasMaxLength(10)
                    .IsFixedLength(true);

                entity.Property(e => e.DeletedToken)
                    .HasMaxLength(255)
                    .HasColumnName("Deleted_Token");

                entity.Property(e => e.Region).HasMaxLength(50);

                entity.HasOne(d => d.IdCityNavigation)
                    .WithMany(p => p.ZipCode)
                    .HasForeignKey(d => d.IdCity)
                    .HasConstraintName("FK_ZipCode_City");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}